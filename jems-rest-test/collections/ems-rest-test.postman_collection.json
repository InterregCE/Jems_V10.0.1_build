{
	"info": {
		"_postman_id": "0c24edb5-8dc3-4b32-9351-fbdc0818f6f4",
		"name": "ems-rest-test",
		"description": "Check JEMS application for common use-cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1630872"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "create users for following tests",
					"item": [
						{
							"name": "create admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const username = pm.variables.get(\"admin_user_name\")",
											"const response = pm.response.json()",
											"",
											"pm.test('should be created with correct credentials', function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(response.email).to.equal(pm.variables.get(\"admin_user_email_to_create\"));",
											"",
											"    pm.environment.set(\"admin_email\", response.email);",
											"    pm.environment.set(\"admin_password\", pm.environment.get('default_password_prefix') + response.email);",
											"});",
											"",
											"pm.test('should be created with correct name and surname', function () {",
											"    pm.expect(response.name).to.equal(pm.variables.get(\"admin_name\"));",
											"    pm.expect(response.surname).to.equal(pm.variables.get(\"admin_surname\"));",
											"});",
											"",
											"pm.test('should be created with correct role', function () {",
											"    pm.expect(response.userRole.name).to.contain('admin');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"const randomIdentifier = uuid.v4().substring(24, 32);",
											"",
											"pm.variables.set('admin_user_email_to_create', randomIdentifier + \"@admin.eu\");",
											"pm.variables.set('admin_name', pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set('admin_surname', pm.variables.replaceIn('{{$randomLastName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{admin_user_email_to_create}}\",\n\t\"name\": \"{{admin_name}}\",\n\t\"surname\": \"{{admin_surname}}\",\n    \"userRoleId\": 1,\n    \"userStatus\": \"ACTIVE\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "register applicant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('applicant_email', randomIdentifier + \"@Applicant.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can register', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set(\"applicant_id\", pm.response.json().id);\r",
											"    pm.environment.set(\"applicant_role_id\", pm.response.json().userRole.id);\r",
											"    pm.environment.set('applicant_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{applicant_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"password\": \"{{applicant_email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/registration",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "activate applicant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant is activated manually', function() {",
											"    pm.expect(pm.response.json().userStatus).to.equal(\"ACTIVE\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{applicant_id}}\",\n    \"email\": \"{{applicant_email}}\",\n    \"name\": \"{{$randomFirstName}}\",\n    \"surname\": \"{{$randomLastName}}\",\n    \"userRoleId\": \"{{applicant_role_id}}\",\n    \"userStatus\": \"ACTIVE\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "update default programme ROLE (with Call Edit)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('programme_user_email', randomIdentifier + \"@Programme-user.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programme user ROLE updated/reset', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('programme user ROLE also has CallUpdate', function() {\r",
											"    pm.expect(pm.response.json().permissions).to.include('CallUpdate');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 2,\r\n    \"name\": \"Programme user\",\r\n    \"defaultForRegisteredUser\": false,\r\n    \"permissions\": [\r\n        \"ProjectReportingView\",\r\n        \"ProjectContractingPartnerView\",\r\n        \"ProjectContractingView\",\r\n        \"ProjectSetToContracted\",\r\n        \"ProjectContractingManagementView\",\r\n        \"ProjectContractingReportingView\",\r\n        \"ProjectContractsView\",\r\n        \"ProjectFormRetrieve\",\r\n        \"ProjectFileApplicationRetrieve\",\r\n        \"ProjectCheckApplicationForm\",\r\n        \"ProjectAssessmentView\",\r\n        \"ProjectAssessmentQualityEnter\",\r\n        \"ProjectAssessmentEligibilityEnter\",\r\n        \"ProjectStatusDecideEligible\",\r\n        \"ProjectStatusDecideIneligible\",\r\n        \"ProjectStatusDecideApproved\",\r\n        \"ProjectStatusDecideApprovedWithConditions\",\r\n        \"ProjectStatusDecideNotApproved\",\r\n        \"ProjectStatusReturnToApplicant\",\r\n        \"ProjectStartStepTwo\",\r\n        \"ProjectFileAssessmentRetrieve\",\r\n        \"ProjectFileAssessmentUpdate\",\r\n        \"ProjectAssessmentChecklistUpdate\",\r\n        \"ProjectAssessmentChecklistSelectedRetrieve\",\r\n        \"ProjectModificationView\",\r\n        \"ProjectStatusDecideModificationApproved\",\r\n        \"ProjectStatusDecideModificationNotApproved\",\r\n        \"ProjectOpenModification\",\r\n        \"ProjectModificationFileAssessmentRetrieve\",\r\n        \"ProjectModificationFileAssessmentUpdate\",\r\n        \"ProjectMonitorCollaboratorsRetrieve\",\r\n        \"ProjectMonitorCollaboratorsUpdate\",\r\n        \"ProjectsWithOwnershipRetrieve\",\r\n        \"CallPublishedRetrieve\",\r\n        \"ProjectRetrieve\",\r\n        \"CallRetrieve\",\r\n        \"CallUpdate\",\r\n        \"ProgrammeSetupRetrieve\",\r\n        \"InstitutionsRetrieve\",\r\n        \"InstitutionsAssignmentRetrieve\",\r\n        \"PaymentsRetrieve\",\r\n        \"AdvancePaymentsRetrieve\",\r\n        \"ProgrammeDataExportRetrieve\",\r\n        \"AuditRetrieve\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/role",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "create programme user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('programme_user_email', randomIdentifier + \"@Programme-user.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programme user can be created', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('programme_user_email', pm.response.json().email);\r",
											"    pm.environment.set('programme_user_password', pm.environment.get('default_password_prefix') + pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{programme_user_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"userRoleId\": \"2\",\r\n    \"userStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "change programme user password to his email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programme user password has been changed', function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set('programme_user_password', pm.environment.get('programme_user_email'));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{programme_user_email}}\",\n    \"oldPassword\": \"{{programme_user_password}}\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/user/changeMyPassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"changeMyPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve user role 4 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('we have controller user role or not (?)', function() {\r",
											"    console.log(pm.response.status);\r",
											"    console.log(pm.response.code);\r",
											"    if (pm.response.status == 'OK') {\r",
											"        console.log('There is role id=4, we just update it now');\r",
											"        pm.environment.set('toCreateRole', 'Very long name so then the call for creation will fail and we can continue. Very long name so then the call for creation will fail and we can continue.');\r",
											"        pm.environment.set('controllerRoleId', 4);\r",
											"    } else {\r",
											"        console.log('There is no role id=4, we will create 1 right now');\r",
											"        pm.environment.set('toCreateRole', 'controller (API)');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/role/byId/4",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"role",
										"byId",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "[IF] not exists, then create controller user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('user role has been created if it was needed', function() {\r",
											"    if (pm.environment.get('toCreateRole').length > 100) {\r",
											"        console.log('We did not create new user role, that is why this call should have failed.');\r",
											"        pm.response.to.have.status(422);\r",
											"        pm.environment.set('controllerRoleId', 4);\r",
											"    } else {\r",
											"        console.log('We created new controller user role, so this call should be successful.');\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.environment.set('controllerRoleId', pm.response.json().id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{toCreateRole}}\",\r\n    \"defaultForRegisteredUser\": false,\r\n    \"permissions\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/role",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "update default controller user role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('controller user ROLE updated/reset', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{controllerRoleId}},\r\n    \"name\": \"controller (API)\",\r\n    \"defaultForRegisteredUser\": false,\r\n    \"permissions\": [\r\n        \"ProjectReportingView\",\r\n        \"ProjectReportingProjectView\",\r\n        \"ProjectContractingPartnerView\",\r\n        \"ProjectContractingView\",\r\n        \"ProjectContractingManagementView\",\r\n        \"ProjectContractingReportingView\",\r\n        \"ProjectContractsView\",\r\n        \"ProjectFormRetrieve\",\r\n        \"ProjectFileApplicationRetrieve\",\r\n        \"ProjectCheckApplicationForm\",\r\n        \"ProjectMonitorCollaboratorsRetrieve\",\r\n        \"ProjectsWithOwnershipRetrieve\",\r\n        \"CallRetrieve\",\r\n        \"InstitutionsRetrieve\",\r\n        \"InstitutionsUpdate\",\r\n        \"InstitutionsAssignmentRetrieve\",\r\n        \"InstitutionsAssignmentUpdate\",\r\n        \"PaymentsRetrieve\",\r\n        \"AdvancePaymentsRetrieve\"\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/role",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "create controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('controller can be created', function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set('controller_email', pm.response.json().email);",
											"    pm.environment.set('controller_password', pm.environment.get('default_password_prefix') + pm.response.json().email);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"const randomIdentifier = uuid.v4().substring(24, 32);",
											"pm.variables.set('controller_email', randomIdentifier + \"@Controller.eu\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{controller_email}}\",\n    \"name\": \"{{$randomFirstName}}\",\n    \"surname\": \"{{$randomLastName}}\",\n    \"userRoleId\": {{controllerRoleId}},\n    \"userStatus\": \"ACTIVE\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "change controller password to his email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('controller user password has been changed', function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set('controller_password', pm.environment.get('controller_email'));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{controller_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{controller_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{controller_email}}\",\n    \"oldPassword\": \"{{controller_password}}\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/user/changeMyPassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"changeMyPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "make institution for controller user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('controller institution created', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('controllerInstitutionId', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('controller institution user is assigned', function() {\r",
											"    const institution = pm.response.json();\r",
											"    pm.expect(institution.institutionUsers.length).to.equal(1);\r",
											"    pm.expect(institution.institutionUsers[0].userEmail).to.equal(pm.variables.get('controller_email'));\r",
											"    pm.expect(institution.institutionUsers[0].accessLevel).to.equal('Edit');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": null,\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"institutionNuts\": [\r\n        \"HN\",\r\n        \"HN0\",\r\n        \"HN00\",\r\n        \"HN000\",\r\n        \"SO\",\r\n        \"SO0\",\r\n        \"SO00\",\r\n        \"SO000\"\r\n    ],\r\n    \"institutionUsers\": [\r\n        {\r\n            \"userId\": null,\r\n            \"institutionId\": null,\r\n            \"userEmail\": \"{{controller_email}}\",\r\n            \"accessLevel\": \"Edit\"\r\n        }\r\n    ],\r\n    \"createdAt\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/controller/institution/create",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"controller",
										"institution",
										"create"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "retrieve and save available input language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme languages', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have input language available', function() {\r",
									"    const languages = pm.response.json().inputLanguages;\r",
									"    pm.expect(languages).to.be.an('array');\r",
									"    const inputLanguage = languages[0];\r",
									"    pm.expect(inputLanguage).to.not.be.undefined;\r",
									"    console.log('There is input language ' + inputLanguage + ' enabled, we will use this during test');\r",
									"    pm.environment.set('inputLanguage', inputLanguage);\r",
									"});\r",
									"\r",
									"pm.test('we have system language available', function() {\r",
									"    const languages = pm.response.json().systemLanguages;\r",
									"    pm.expect(languages).to.be.an('array');\r",
									"    const systemLanguage = languages[0];\r",
									"    pm.expect(systemLanguage).to.not.be.undefined;\r",
									"    console.log('There is system language ' + systemLanguage + ' enabled, we will use this during test');\r",
									"    pm.environment.set('systemLanguage', systemLanguage);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmeLanguage/available",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeLanguage",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve priorities and specific objectives', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme priority or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    if (response.length > 0) {\r",
									"        const specificObjectives = response[0].specificObjectives;\r",
									"        if (specificObjectives.length) {\r",
									"            const policy = specificObjectives[0].programmeObjectivePolicy\r",
									"            console.log('There is already specific objective ' + policy + ', which we will use for calls during this test');\r",
									"            pm.environment.set('programmePriorityPolicy', policy);\r",
									"            pm.environment.set('programmePriority', response[0]);\r",
									"        } else {\r",
									"            console.log('There is already a programme priority, but no specific objective. We have to create one.');\r",
									"            pm.environment.set('programmePriorityPolicy', null);\r",
									"        }\r",
									"    } else {\r",
									"        console.log('There are no any programme priorities yet. We need to create one.');\r",
									"        pm.environment.set('programmePriorityPolicy', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmePriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmePriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create programme priority with policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function zeroPrefixedNum(num, size) {\r",
									"    var s = \"000000000\" + num;\r",
									"    return s.substr(s.length-size);\r",
									"}\r",
									"\r",
									"const programmeCode = zeroPrefixedNum(Math.floor(Math.random() * 1000), 4)\r",
									"pm.variables.set('programmeCode', programmeCode)\r",
									"\r",
									"if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"    console.log('There is no any programme priority specific objective we can use, so we need to create one.');\r",
									"    pm.variables.set(\r",
									"        'programmePriorityPolicies',\r",
									"        JSON.stringify([{\r",
									"            \"programmeObjectivePolicy\": \"AdvancedTechnologies\",\r",
									"            \"code\": \"AT\"\r",
									"        }])\r",
									"    );\r",
									"} else {\r",
									"    console.log('There is already a programme priority with specific objective, so we will use that one.');\r",
									"    pm.variables.set('programmePriorityPolicies', null);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme priority was created if needed', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme priority.')\r",
									"        pm.environment.set('programmePriorityPolicy', 'AdvancedTechnologies');\r",
									"        pm.environment.set('programmePriority', pm.response.json());\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT create new programme priority, no variable is changing.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{programmeCode}}\",\r\n    \"title\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"API test Programme Priority {{programmeCode}}\"\r\n        }\r\n    ],\r\n    \"objective\": \"PO1\",\r\n    \"specificObjectives\": {{programmePriorityPolicies}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmePriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmePriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme funds', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme fund or we need to enable first one', function() {\r",
									"    const funds = pm.response.json();\r",
									"    const selectedFunds = funds.filter(f => f.selected);\r",
									"    if (selectedFunds.length >= 2) {\r",
									"        const fundId = selectedFunds[0].id;\r",
									"        const fundId_2 = selectedFunds[1].id;\r",
									"        console.log('There are selected funds with id ' + fundId + ' and id ' + fundId_2);\r",
									"        pm.environment.set('programmeFundId', fundId);\r",
									"        pm.environment.set('programmeFundId_2', fundId_2);\r",
									"    } else {\r",
									"        console.log('There are no any programme funds yet enabled. We need to enable 2.');\r",
									"        pm.environment.set('programmeFundId', null);\r",
									"    }\r",
									"    pm.environment.set('funds', funds);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmeFund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeFund"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then enable some programme fund Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('programmeFundId') == null) {\r",
									"    console.log('There is no enough programme funds enabled, so we need to enable few.');\r",
									"    var fundsToModify = pm.environment.get('funds');\r",
									"    fundsToModify.forEach(function(fund, index) {\r",
									"        fund.selected = index < 2;\r",
									"    });\r",
									"    pm.variables.set('modifiedFunds', JSON.stringify(fundsToModify));\r",
									"} else {\r",
									"    console.log('There are already at least 2 programme funds enabled, so we will use that one.');\r",
									"    pm.variables.set('modifiedFunds', \"please-just-fail\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme fund was enabled', function() {\r",
									"    console.log(pm.variables.get('modifiedFunds'));\r",
									"    if (pm.variables.get('modifiedFunds') === \"please-just-fail\") {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT enable new programme funds, no variable is changing.');\r",
									"    } else {\r",
									"        pm.response.to.have.status(200);\r",
									"        const selectedFunds = pm.response.json().filter(fund => fund.selected);\r",
									"        pm.expect(selectedFunds.length).to.be.above(1);\r",
									"        pm.variables.set('programmeFundId', selectedFunds[0].id);\r",
									"        pm.variables.set('programmeFundId_2', selectedFunds[1].id);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedFunds}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmeFund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeFund"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme lumpSum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme lump sums', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme lump sum or we need to create one', function() {\r",
									"    const response = pm.response.json().filter(lumpSum => lumpSum.splittingAllowed);\r",
									"    if (response.length > 0) {\r",
									"        console.log('There is already some splittable lumpSum ' + response[0].name + ' with id=' + response[0].id + ', which we will use for calls during this test');\r",
									"        pm.environment.set('programmeLumpSumId', response[0].id);\r",
									"    } else {\r",
									"        console.log('There are no any splittable programme lumpSum yet. We need to create one.');\r",
									"        pm.environment.set('programmeLumpSumId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/costOption/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create splittable programme lumpSum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('programmeLumpSumId') == null) {\r",
									"    console.log('There is no any splittable programme lump sum we can use, so we need to create one.');\r",
									"} else {\r",
									"    console.log('There is already a splittable programme lump sum, so we will use that one.');\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme lump sum was created (as it was needed)', function() {\r",
									"    if (pm.environment.get('programmeLumpSumId') == null) {\r",
									"        const response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme lump sum with id=' + response.id);\r",
									"        pm.environment.set('programmeLumpSumId', response.id);\r",
									"        pm.expect(response.splittingAllowed).to.be.true;\r",
									"    } else {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"        console.log('We did an invalid POST to NOT create new lump sum.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{programmeLumpSumId}}\",\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"[API test] splittable\"\r\n        }\r\n    ],\r\n    \"cost\": 10000,\r\n    \"splittingAllowed\": true,\r\n    \"phase\": \"Preparation\",\r\n    \"categories\": [\"StaffCosts\", \"OfficeAndAdministrationCosts\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costOption/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme unitCosts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme unit costs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme 1-category unit cost or we need to create one', function() {\r",
									"    const response = pm.response.json().filter(unitCost => !unitCost.oneCostCategory);\r",
									"    if (response.length > 0) {\r",
									"        console.log('There is already some 1-category unitCost ' + response[0].name + ' with id=' + response[0].id + ', which we will use for calls during this test');\r",
									"        pm.environment.set('programmeUnitCostId', response[0].id);\r",
									"    } else {\r",
									"        console.log('There are no any splittable programme unitCost yet. We need to create one.');\r",
									"        pm.environment.set('programmeUnitCostId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/costOption/unitCost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"unitCost"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create 1-category programme unitCost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('programmeUnitCostId') == null) {\r",
									"    console.log('There is no any 1-category programme unit cost we can use, so we need to create one.');\r",
									"} else {\r",
									"    console.log('There is already a 1-category programme unit cost, so we will use that one.');\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme unit cost was created (as if was needed)', function() {\r",
									"    if (pm.environment.get('programmeUnitCostId') == null) {\r",
									"        const response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme unit cost with id=' + response.id);\r",
									"        pm.environment.set('programmeUnitCostId', response.id);\r",
									"        pm.expect(response.oneCostCategory).to.be.true;\r",
									"    } else {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"        console.log('We did an invalid POST to NOT create new unit cost.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{programmeUnitCostId}}\",\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"[API test] 1-category\"\r\n        }\r\n    ],\r\n    \"description\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{inputLanguage}} 1-category description \"\r\n        }\r\n    ],\r\n    \"type\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"type translated to {{inputLanguage}}\"\r\n        }\r\n    ],\r\n    \"costPerUnit\": 498.26,\r\n    \"oneCostCategory\": true,\r\n    \"categories\": [\"EquipmentCosts\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costOption/unitCost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"unitCost"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing result indicators",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve indicators', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have result indicator for this SO or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    if (response.length > 0) {\r",
									"        console.log('There is already indicator ' + response[0].code + ' with id=' + response[0].id + ', which we will use for applciations during this test');\r",
									"        pm.environment.set('resultIndicatorId', response[0].id);\r",
									"    } else {\r",
									"        console.log('There are no any indicators for this SO yet. We need to create one.');\r",
									"        pm.environment.set('resultIndicatorId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmeindicator/result/summary/{{programmePriorityPolicy}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeindicator",
								"result",
								"summary",
								"{{programmePriorityPolicy}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create result indicator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('resultIndicatorId') == null) {\r",
									"    console.log('There is no result indicator we can use, so we need to create one.');\r",
									"    pm.variables.set('resultIndicatorCode', \"RI.1 (API)\");\r",
									"} else {\r",
									"    console.log('There is already a result indicator we will use that one.');\r",
									"    pm.variables.set('resultIndicatorCode', \"!!!This name is so long that it needs to fail and it should never be created!!!\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme result indicator has been created (as if was needed)', function() {\r",
									"    if (pm.environment.get('resultIndicatorId') == null) {\r",
									"        const response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new result indicator with id=' + response.id);\r",
									"        pm.environment.set('resultIndicatorId', response.id);\r",
									"    } else {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"        console.log('We did an invalid POST to NOT create new result indicator.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identifier\": \"{{resultIndicatorCode}}\",\r\n    \"code\": \"RCR73\",\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"Annual users of new or modernised health care facilities\"\r\n        }\r\n    ],\r\n    \"measurementUnit\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"users/year\"\r\n        }\r\n    ],\r\n    \"type\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"type translated to {{inputLanguage}}\"\r\n        }\r\n    ],\r\n    \"finalTarget\": 8000000,\r\n    \"referenceYear\": \"2027\",\r\n    \"programmeObjectivePolicy\": \"{{programmePriorityPolicy}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmeindicator/result",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeindicator",
								"result"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing output indicators",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve SOs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have output indicator for this SO or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    if (response.length > 0) {\r",
									"        console.log('There is already indicator ' + response[0].code + ' with id=' + response[0].id + ', which we will use for applciations during this test');\r",
									"        pm.environment.set('outputIndicatorId', response[0].id);\r",
									"    } else {\r",
									"        console.log('There are no any indicators for this SO yet. We need to create one.');\r",
									"        pm.environment.set('outputIndicatorId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmeindicator/output/summary/{{programmePriorityPolicy}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeindicator",
								"output",
								"summary",
								"{{programmePriorityPolicy}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create output indicator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('outputIndicatorId') == null) {\r",
									"    console.log('There is no output indicator we can use, so we need to create one.');\r",
									"    pm.variables.set('outputIndicatorCode', \"OI.1 (API)\");\r",
									"} else {\r",
									"    console.log('There is already an output indicator we will use that one.');\r",
									"    pm.variables.set('outputIndicatorCode', \"!!!This name is so long that it needs to fail and it should never be created!!!\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme output indicator has been created (as if was needed)', function() {\r",
									"    if (pm.environment.get('outputIndicatorId') == null) {\r",
									"        const response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new output indicator with id=' + response.id);\r",
									"        pm.environment.set('outputIndicatorId', response.id);\r",
									"    } else {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"        console.log('We did an invalid POST to NOT create new output indicator.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identifier\": \"{{outputIndicatorCode}}\",\r\n    \"code\": \"RCO52\",\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"Length of new, upgraded or modernised inland waterways - non-TEN-T\"\r\n        }\r\n    ],\r\n    \"measurementUnit\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"km\"\r\n        }\r\n    ],\r\n    \"type\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"type translated to {{inputLanguage}}\"\r\n        }\r\n    ],\r\n    \"finalTarget\": 200000,\r\n    \"programmeObjectivePolicy\": \"{{programmePriorityPolicy}}\",\r\n    \"resultIndicatorId\": {{resultIndicatorId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmeindicator/output",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeindicator",
								"output"
							]
						}
					},
					"response": []
				},
				{
					"name": "create call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const callName = pm.variables.replaceIn('{{$randomCatchPhrase}}')\r",
									"pm.variables.set(\r",
									"    'call_name_to_create',\r",
									"    callName.substr(0,150)\r",
									");\r",
									"\r",
									"var callDateStart = new Date();\r",
									"callDateStart.setDate(callDateStart.getDate() - 1);\r",
									"pm.variables.set('callDateStart', callDateStart.toISOString());\r",
									"\r",
									"var callDateEnd = new Date();\r",
									"callDateEnd.setDate(callDateEnd.getDate() + 10);\r",
									"pm.variables.set('callDateEnd', callDateEnd.toISOString());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call can be created', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"callId\", pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('description is set', function () {\r",
									"    const description = pm.response.json().description.find(description => description.language === pm.variables.get('inputLanguage')).translation;\r",
									"    pm.expect(description).to.eql(pm.variables.get('inputLanguage') + \" description\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{call_name_to_create}}\",\n    \"type\": \"STANDARD\",\n\t\"startDateTime\": \"{{callDateStart}}\",\n\t\"endDateTime\": \"{{callDateEnd}}\",\n    \"isAdditionalFundAllowed\": true,\n    \"lengthOfPeriod\": 12,\n    \"description\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{inputLanguage}} description\"\n        }\n    ],\n\t\"priorityPolicies\": [ \"{{programmePriorityPolicy}}\" ],\n    \"strategies\": [\"EUStrategyDanubeRegion\", \"SeaBasinStrategyOutermostRegions\"],\n    \"funds\": [ {\n        \"programmeFund\": {\n            \"id\": \"{{programmeFundId}}\"\n        },\n        \"rate\": 100,\n        \"adjustable\": true\n    }]\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/call",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup possible flatRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call flatrate setup is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffCostFlatRateSetup\": {\r\n        \"rate\": 20,\r\n        \"adjustable\": true\r\n    },\r\n    \"officeAndAdministrationOnStaffCostsFlatRateSetup\": {\r\n        \"rate\": 15,\r\n        \"adjustable\": true\r\n    },\r\n    \"officeAndAdministrationOnDirectCostsFlatRateSetup\": {\r\n        \"rate\": 25,\r\n        \"adjustable\": true\r\n    },\r\n    \"travelAndAccommodationOnStaffCostsFlatRateSetup\": {\r\n        \"rate\": 15,\r\n        \"adjustable\": true\r\n    },\r\n    \"otherCostsOnStaffCostsFlatRateSetup\": {\r\n        \"rate\": 40,\r\n        \"isAdjustable\": true\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/byId/{{callId}}/flatRate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"byId",
								"{{callId}}",
								"flatRate"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup lump sums to call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call lump sum is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{{programmeLumpSumId}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/byId/{{callId}}/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"byId",
								"{{callId}}",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup unit costs to call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call unit cost is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{{programmeUnitCostId}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/byId/{{callId}}/unitCost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"byId",
								"{{callId}}",
								"unitCost"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup AF config to call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call unit cost is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": \"application.config.project.partner.budget.and.co.financing\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    },\r\n    {\r\n        \"id\": \"application.config.project.partner.co.financing.add.new.contribution.origin\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    },\r\n    {\r\n        \"id\": \"application.config.project.partner.budget.staff.cost.unit.type.and.number.of.units\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    },\r\n    {\r\n        \"id\": \"application.config.project.partner.budget.travel.and.accommodation.unit.type.and.number.of.units\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    },\r\n    {\r\n        \"id\": \"application.config.project.partner.budget.infrastructure.and.works.unit.type.and.number.of.units\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    },\r\n    {\r\n        \"id\": \"application.config.project.activities.deliverables\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    },\r\n    {\r\n        \"id\": \"application.config.project.partner.budget.periods\",\r\n        \"visible\": \"true\",\r\n        \"availableInStep\": \"STEP_ONE_AND_TWO\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/applicationFormFieldConfigurations",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"applicationFormFieldConfigurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "set 'off' pre-submission check plugin for the call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('off pre-submission check plugin is set for the call successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pluginKey\": \"jems-pre-condition-check-off\",\r\n    \"reportPartnerCheckPluginKey\": \"report-partner-check-off\",\r\n    \"controlReportSamplingCheckPluginKey\": \"control-report-sampling-check-off\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/byId/{{callId}}/preSubmissionCheck",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"byId",
								"{{callId}}",
								"preSubmissionCheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "publish call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call is published successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/call/byId/{{callId}}/publish",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"byId",
								"{{callId}}",
								"publish"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "test restricted setup",
			"item": [
				{
					"name": "disable programme fund after setup restricted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var fundsToModify = pm.environment.get('funds');\r",
									"fundsToModify.forEach(function(fund) {\r",
									"    fund.selected = false;\r",
									"});\r",
									"pm.variables.set('disabledFunds', JSON.stringify(fundsToModify));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme fund cannot be disabled after setup is in restricted mode', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{disabledFunds}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmeFund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeFund"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve free priority policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve available specific objectives', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have not used specifc objective', function() {\r",
									"    const response = pm.response.json().freePrioritiesWithPolicies;\r",
									"    const policyObjective = Object.keys(response)[0];\r",
									"    pm.variables.set('freeSpecificObjectivePolicy', response[policyObjective][0]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmePriority/availableSetup",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmePriority",
								"availableSetup"
							]
						}
					},
					"response": []
				},
				{
					"name": "change priority after setup restricted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var priorityToModify = pm.environment.get('programmePriority');\r",
									"priorityToModify.specificObjectives[0].programmeObjectivePolicy === pm.variables.get('freeSpecificObjectivePolicy');\r",
									"pm.variables.set('priorityToModify', JSON.stringify(priorityToModify));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme priority cannot be changed after programme is in restricted mode', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{disabledFunds}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmeFund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmeFund"
							]
						}
					},
					"response": []
				},
				{
					"name": "change lump sum after setup restricted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme lump sum cannot be changed after programme is in restricted mode', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{programmeLumpSumId}}\",\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"[API test] splittable\"\r\n        }\r\n    ],\r\n    \"cost\": 8000,\r\n    \"splittingAllowed\": false,\r\n    \"phase\": \"Preparation\",\r\n    \"categories\": [\r\n        \"OfficeAndAdministrationCosts\",\r\n        \"TravelAndAccommodationCosts\"\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costOption/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "change unit cost after setup restricted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme unit cost cannot be changed after programme is in restricted mode', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{programmeUnitCostId}}\",\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"this should never be seen (ERR in API tests)\"\r\n        }\r\n    ],\r\n    \"costPerUnit\": 5,\r\n    \"oneCostCategory\": false,\r\n    \"categories\": [\r\n        \"OfficeAndAdministrationCosts\",\r\n        \"InfrastructureCosts\"\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costOption/unitCost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"unitCost"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/list?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"list"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.formErrors.surname.i18nKey).to.contain('common.error.field.blank');",
									"    pm.expect(response.formErrors.name.i18nKey).to.contain('common.error.field.blank');",
									"    pm.expect(response.formErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userStatus\": \"ACTIVE\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.formErrors.surname.i18nKey).to.contain('common.error.field.blank');",
									"    pm.expect(response.formErrors.name.i18nKey).to.contain('common.error.field.blank');",
									"    pm.expect(response.formErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userRoleId\": -1,\n    \"userStatus\": \"ACTIVE\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user invalid role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 404 role not found', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('should return error role not found', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.details[0].i18nMessage.i18nKey).to.contain('use.case.create.user.user.role.not.found');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"his.user@shouldnot.exist\",\n\t\"name\": \"This user\",\n\t\"surname\": \"should not exist\",\n    \"userRoleId\": -1,\n    \"userStatus\": \"ACTIVE\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project/list?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"list"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.formErrors.acronym.i18nKey).to.contain('common.error.field.max.length');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"projectCallId\": {{callId}},\n\t\"acronym\": \"test-proj-this-is-a-very-long-name\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.formErrors.acronym.i18nKey).to.contain('common.error.field.blank');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"\",\n\t\"projectCallId\": {{callId}}\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json()\r",
									"\r",
									"pm.test('project should be created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application).to.have.property(\"id\");\r",
									"    pm.expect(application.id).not.eql(null);\r",
									"    pm.variables.set(\"projectId\", application.id);\r",
									"});\r",
									"\r",
									"pm.test('acronym should fit', function() {\r",
									"    pm.expect(application).to.have.property(\"acronym\");\r",
									"    pm.expect(application.acronym).to.eql(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('submission should be empty', function() {\r",
									"    pm.expect(application).to.have.property(\"firstSubmission\");\r",
									"    pm.expect(application.firstSubmission).to.eql(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"projectCallId\": {{callId}}\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"\r",
									"const projectDuration = pm.variables.replaceIn('{{$randomInt}}')\r",
									"pm.variables.set(\r",
									"    'project_duration',\r",
									"    (projectDuration % 999 + 1)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project data should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ],\n\t\"duration\": {{project_duration}},\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project/list?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"list"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"id should fit\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"    pm.expect(response.id).to.equal(pm.variables.get(\"projectId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"acronym should fit\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"acronym\");\r",
									"    pm.expect(response.acronym).to.equal(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('title should fit', function() {\r",
									"    const response = pm.response.json();\r",
									"    const title = pm.response.json().title.find(title => title.language === pm.variables.get('inputLanguage')).translation;\r",
									"    pm.expect(title).to.eql(pm.variables.get(\"project_title\"));\r",
									"});\r",
									"\r",
									"pm.test('specificObjective should fit', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"specificObjective\");\r",
									"    pm.expect(response.specificObjective).to.have.property(\"programmeObjectivePolicy\");\r",
									"    pm.expect(response.specificObjective.programmeObjectivePolicy)\r",
									"        .to.eql(pm.variables.get(\"programmePriorityPolicy\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/byId/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"byId",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/byId/-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"byId",
								"-1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "file upload to DRAFT",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/upload?type=APPLICATION",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"upload"
							],
							"query": [
								{
									"key": "type",
									"value": "APPLICATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve the uploaded file list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const file = pm.response.json().content[0];\r",
									"\r",
									"pm.test('applicant can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.variables.set('file_id',file.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/list?type=APPLICATION&id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"list"
							],
							"query": [
								{
									"key": "type",
									"value": "APPLICATION"
								},
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "set description to uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const file = pm.response.json();\r",
									"\r",
									"pm.test('applicant can specify description to a file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.id).to.equal(pm.variables.get('file_id'));\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.expect(file.description).to.equal('API test description');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "API test description"
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "download uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can download previously-uploaded file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/download/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"download",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user NOW CAN see list of all files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user is now able to see project in DRAFT, so he can also see applicant files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/list?type=APPLICATION&id=",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"list"
							],
							"query": [
								{
									"key": "type",
									"value": "APPLICATION"
								},
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user NOW CAN download applicant file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user is able to download also APPLICANT file, cause he can see application in DRAFT', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/download/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"download",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "submit and resubmit application",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project title",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project title should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/upload?type=APPLICATION",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"upload"
							],
							"query": [
								{
									"key": "type",
									"value": "APPLICATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('application has correct status', function() {\r",
									"    pm.expect(pm.response.json()).to.eql('SUBMITTED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "check submitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status should be SUBMITTED', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should be filled in', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.firstSubmission.updated).not.eql(null);\r",
									"    pm.variables.set('application_submission_time', application.firstSubmission.updated);\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be empty after first submission', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('submission and status should be equal', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.firstSubmission)\r",
									"        .deep.equal(application.projectStatus);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/byId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"byId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to SUBMITTED application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant should not be able to upload file to SUBMITTED application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/upload?type=APPLICATION",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"upload"
							],
							"query": [
								{
									"key": "type",
									"value": "APPLICATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('programme user can see files, when application is SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.content[0].name).to.equal('file.txt');\r",
									"    pm.expect(response.totalElements).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/list?type=APPLICATION",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"list"
							],
							"query": [
								{
									"key": "type",
									"value": "APPLICATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(pm.response.json()).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/return-to-applicant",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"return-to-applicant"
							]
						}
					},
					"response": []
				},
				{
					"name": "check returned application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status should be RETURNED_TO_APPLICANT', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should still be empty', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/byId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"byId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to resubmit application', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "check resubmitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status should be SUBMITTED', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be now filled in', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.lastResubmission).not.equal(null);\r",
									"    pm.expect(application.lastResubmission.updated).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to user who triggered it', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/byId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"byId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "enter eligibility assessment (EA) and decision",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project title",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project title should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "aplicant cannot enter EA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant should not be able to enter EA', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"this should not be processed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"assessment",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter EA once",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can enter EA once', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('EA is part of the application detail', function() {\r",
									"    const decision = pm.response.json().secondStepDecision;\r",
									"    pm.expect(decision).to.have.property(\"eligibilityAssessment\");\r",
									"    pm.expect(decision.eligibilityAssessment).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('status of the application is not changed', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('EA result is properly saved', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.secondStepDecision.eligibilityAssessment.result)\r",
									"        .to.eql(\"PASSED\");\r",
									"});\r",
									"\r",
									"pm.test('EA note is properly saved', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.secondStepDecision.eligibilityAssessment.note)\r",
									"        .to.eql(\"status set to passed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"status set to passed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"assessment",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot enter EA twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to enter EA second time', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('should return error', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.details[0].i18nMessage.i18nKey).to.contain('use.case.set.assessment.eligibility.step2.already.concluded');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"FAILED\",\r\n    \"note\": \"status set to failed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"assessment",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE without date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE without date', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('correct error returned', function() {\r",
									"    pm.expect(pm.response.json().code).to.eql('S-PA-SAAE');\r",
									"    pm.expect(pm.response.json().i18nMessage.i18nKey).to.eql('use.case.set.application.as.eligible.failed');\r",
									"});\r",
									"\r",
									"pm.test('correct error detail translation key returned', function() {\r",
									"    pm.expect(pm.response.json().formErrors.decisionDate.i18nKey).to.eql('common.error.field.required');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"note\": \"optional note\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"set-as-eligible"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE with date in future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 5);\r",
									"pm.variables.set('date_plus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE with date in future', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('correct error returned', function() {\r",
									"    pm.expect(pm.response.json().code).to.eql('S-PA-SAAE');\r",
									"    pm.expect(pm.response.json().i18nMessage.i18nKey).to.eql('use.case.set.application.as.eligible.failed');\r",
									"});\r",
									"\r",
									"pm.test('correct error detail translation key returned', function() {\r",
									"    pm.expect(pm.response.json().formErrors.decisionDate.i18nKey).to.eql('common.error.field.date.is.in.future');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"date\": \"{{date_plus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"set-as-eligible"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can change status to ELIGIBLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5);\r",
									"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can change status to ELIGIBLE', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('status of project is set to ELIGIBLE', function() {\r",
									"    pm.expect(pm.response.json()).to.eql('ELIGIBLE');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"set-as-eligible"
							]
						}
					},
					"response": []
				},
				{
					"name": "check ELIGIBLE application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('request is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('status ELIGIBLE is correct', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.projectStatus.status)\r",
									"        .to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status ELIGIBLE date is set to date -5days', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.projectStatus.decisionDate)\r",
									"        .to.eql(pm.variables.get(\"eligibility_decision_date_minus_5\"));\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    const application = pm.response.json();\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/byId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"byId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(pm.response.json()).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/return-to-applicant",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"return-to-applicant"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application to ELIGIBLE status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('status of project is set back to ELIGIBLE', function() {\r",
									"    pm.expect(pm.response.json()).to.eql('ELIGIBLE');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "enter quality assessment (QA)",
			"item": [
				{
					"name": "when SUBMITTED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											"pm.variables.set(\r",
											"    'project_acronym_to_create',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project title should be saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should not be able to enter QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA once",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA once', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('QA is part of the application detail', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application.secondStepDecision).to.have.property(\"qualityAssessment\");\r",
											"    pm.expect(application.secondStepDecision.qualityAssessment).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test('status of the application is not changed', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
											"});\r",
											"\r",
											"pm.test('QA result is properly saved', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application.secondStepDecision.qualityAssessment.result)\r",
											"        .to.eql(\"RECOMMENDED_FOR_FUNDING\");\r",
											"});\r",
											"\r",
											"pm.test('QA note is properly saved', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application.secondStepDecision.qualityAssessment.note)\r",
											"        .to.eql(\"status set to recommended for funding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter QA twice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user should not be able to enter QA second time', function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test('should return error', function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.details[0].i18nMessage.i18nKey).to.contain('use.case.set.assessment.quality.step2.already.concluded');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_WITH_CONDITIONS\",\r\n    \"note\": \"status set to recommended with conditions\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when INELIGIBLE",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											"pm.variables.set(\r",
											"    'project_acronym_to_create',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project title should be saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA = FAILED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"FAILED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to INELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to INELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status of project is set to INELIGIBLE', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('INELIGIBLE');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/set-as-ineligible",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"set-as-ineligible"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA (when INELIGIBLE already)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should not be able to enter QA when INELIGIBLE state already', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "enter funding decision (FD)",
			"item": [
				{
					"name": "with QA and ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											"pm.variables.set(\r",
											"    'project_acronym_to_create',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project title should be saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"set-as-eligible"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status of project is set to APPROVED', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('APPROVED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"note\": \"changed to approved\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/approve",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "check APPROVED application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('request is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.note)\r",
											"        .to.eql(\"changed to approved\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    const application = pm.response.json();\r",
											"    const decision = application.secondStepDecision;\r",
											"    pm.expect(decision).to.have.property('finalFundingDecision');\r",
											"    pm.expect(decision.finalFundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/byId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"byId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "without ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											"pm.variables.set(\r",
											"    'project_acronym_to_create',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project title should be saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without ED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('funding_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user should not be able to enter funding without ED', function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test('should return error', function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.details[0].i18nMessage.i18nKey).to.contain('application.action.approve.is.not.allowed');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{funding_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/approve",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"approve"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "without QA",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											"pm.variables.set(\r",
											"    'project_acronym_to_create',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project title should be saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"set-as-eligible"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('funding_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user should not be able to enter funding without QA', function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test('should return error', function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.details[0].i18nMessage.i18nKey).to.contain('use.case.approve.application.missing.quality.assessment');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{funding_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/approve",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"approve"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "enter FD, return and resubmit",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											"pm.variables.set(\r",
											"    'project_acronym_to_create',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project title should be saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"set-as-eligible"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD - APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to APPROVED_WC', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status of project is set to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"note\": \"changed to approved with conditions\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/approve-with-conditions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"approve-with-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "check APPROVED_WC application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('request is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status of project is set to APPROVED_WITH_CONDITIONS', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    const status = pm.response.json().projectStatus;\r",
											"    pm.expect(status.note)\r",
											"        .to.eql(\"changed to approved with conditions\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    const application = pm.response.json();\r",
											"    const decision = application.secondStepDecision;\r",
											"    pm.expect(decision).to.have.property('preFundingDecision');\r",
											"    pm.expect(decision.preFundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/byId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"byId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can return application after FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can return application back to user', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status of project is set to RETURNED_TO_APPLICANT_FOR_CONDITIONS', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('RETURNED_TO_APPLICANT_FOR_CONDITIONS');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/return-to-applicant",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"return-to-applicant"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant can resubmit back to CONDITIONS_SUBMITTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should be able to resubmit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status should be CONDITIONS_SUBMITTED', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('CONDITIONS_SUBMITTED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can hand application back to user from CONDITIONS_SUBMITTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can hand application back to user', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status of project is set to RETURNED_TO_APPLICANT_FOR_CONDITIONS', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('RETURNED_TO_APPLICANT_FOR_CONDITIONS');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/hand-back-to-applicant",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"hand-back-to-applicant"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant can resubmit back multiple times to CONDITIONS_SUBMITTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should be able to resubmit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status should be CONDITIONS_SUBMITTED', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('CONDITIONS_SUBMITTED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check application after resubmit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('request is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application).to.have.property('lastResubmission');\r",
											"    pm.expect(application).to.have.property('projectStatus');\r",
											"    pm.expect(application.lastResubmission)\r",
											"        .deep.eql(application.projectStatus);\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to applicant who triggered change', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/byId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"byId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "programm user can set final funding to APPROVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 2);\r",
											"pm.variables.set('funding_decision_date_minus_2', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status should be set to APPROVED', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('APPROVED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{funding_decision_date_minus_2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/approve",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "check APPROVED application after final funding",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('request is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to day-5', function() {\r",
											"    const application = pm.response.json();\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_2\"));\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    const application = pm.response.json();\r",
											"    const decision = application.secondStepDecision;\r",
											"    pm.expect(decision.finalFundingDecision).to.have.property('id');\r",
											"    pm.expect(application.projectStatus).to.have.property('id');\r",
											"    // preFundingDecision is still referring to the first funding attempt\r",
											"    pm.expect(decision.preFundingDecision.id)\r",
											"        .not.eql(application.projectStatus.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/byId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"byId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Approved Project Modifications",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project title",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project title should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter QA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can enter QA', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"assessment",
								"quality"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter EA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can enter EA', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"assessment",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can change status to ELIGIBLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5);\r",
									"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can change status to ELIGIBLE', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"set-as-eligible"
							]
						}
					},
					"response": []
				},
				{
					"name": "programm user can set final funding to APPROVED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"pm.variables.set('funding_decision_date', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('status should be set to APPROVED', function() {\r",
									"    pm.expect(pm.response.json()).to.eql('APPROVED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"date\": \"{{funding_decision_date}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/approve",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"approve"
							]
						}
					},
					"response": []
				},
				{
					"name": "project version and status are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const versions = pm.response.json();",
									"const currentVersion = versions.find(version => version.current == true);",
									"",
									"pm.test('project versions can be fetched', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('version is correct', function() {   ",
									"    pm.expect(currentVersion.version).to.equal(\"1.0\");",
									"});",
									"",
									"pm.test('status is APPROVED', function() {",
									"    pm.expect(currentVersion.status).to.equal(\"APPROVED\");",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/versions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can open the submitted project for modifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user should be able open the project for modifications', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('status should be set to MODIFICATION_PRECONTRACTING', function() {",
									"    pm.expect(pm.response.json()).to.eql('MODIFICATION_PRECONTRACTING');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/start-modification",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"start-modification"
							]
						}
					},
					"response": []
				},
				{
					"name": "project version is incremented when opening project for modification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const versions = pm.response.json();",
									"const applicationCurrentVersion = versions.find(version => version.current == true).version;",
									"",
									"pm.test('programme user should be able open the project for modifications', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var currentVersionCounter = pm.variables.get(\"versionCounter\");",
									"const versionCounter = ++currentVersionCounter;",
									"pm.variables.set(\"versionCounter\", versionCounter);",
									"const expectedVersion = `${versionCounter}.0`;",
									"pm.variables.set(\"latestVersion\", expectedVersion);",
									"",
									"",
									"pm.test('version is correct', function() {",
									"    pm.expect(applicationCurrentVersion).to.equal(expectedVersion);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.variables.get(\"versionCounter\") == null ) {",
									"    pm.variables.set(\"versionCounter\", 1);",
									"}",
									"",
									"if (pm.variables.get(\"latestVersion\") == null ) {",
									"    pm.variables.set(\"latestVersion\", \"1.0\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/versions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application to Modification Precontracted Submitted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant should be able to resubmit his application', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('status should be set to MODIFICATION_PRECONTRACTING_SUBMITTED', function() {",
									"    pm.expect(pm.response.json()).to.eql('MODIFICATION_PRECONTRACTING_SUBMITTED');",
									"});",
									"",
									"var resubmitCounter = pm.variables.get(\"resubmitCounter\");",
									"const NUMBER_OF_RESUBMITS = 3;",
									"",
									" if (resubmitCounter < NUMBER_OF_RESUBMITS) {",
									"    pm.variables.set(\"resubmitCounter\", ++resubmitCounter);",
									"    postman.setNextRequest('programme user can hand back the submitted modifications');",
									" } else if (pm.variables.get(\"versionCounter\") % 2 == 0) {",
									"     postman.setNextRequest('programme user can reject modifications');",
									" } else {",
									"     postman.setNextRequest('programme user can approve modifications');",
									" }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.variables.get(\"resubmitCounter\") == null ) {",
									"    pm.variables.set(\"resubmitCounter\", 0);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can hand back the submitted modifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test('programme user should be able to hand back the submitted application', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test('status should be set to MODIFICATION_PRECONTRACTING', function() {",
									"    pm.expect(pm.response.json()).to.eql('MODIFICATION_PRECONTRACTING');",
									"});",
									"",
									"postman.setNextRequest('applicant can resubmit application to Modification Precontracted Submitted');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/hand-back-to-applicant",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"hand-back-to-applicant"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can reject modifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test('programme user should be able to reject the submitted modification', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('status should be set to MODIFICATION_REJECTED', function() {",
									"    pm.expect(pm.response.json()).to.eql('MODIFICATION_REJECTED');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();",
									"pm.variables.set('decision_date', date.toISOString().split('T')[0]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"note\": \"changed to approved\",\n    \"date\": \"{{decision_date}}\",\n    \"entryIntoForceDate\": \"{{decision_date}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/reject",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"reject"
							]
						}
					},
					"response": []
				},
				{
					"name": "project shloud have a rejected version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const versions = pm.response.json();",
									"const rejectedVersion = versions.find(version => version.status === \"MODIFICATION_REJECTED\");",
									"",
									"pm.test('project versions can be fetched', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('rejected version exists', function(){",
									"    pm.expect(rejectedVersion).to.not.be.undefined",
									"    pm.expect(rejectedVersion).to.not.be.null",
									"});",
									"",
									"pm.test('rejected version has correct version number', function(){",
									"    pm.expect(rejectedVersion.version).to.equal(pm.variables.get(\"latestVersion\"));",
									"});",
									"",
									"pm.test(`rejected version is not the current version`, function() {",
									"    pm.expect(rejectedVersion.current === false)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/versions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "project current status should be APPROVED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const versions = pm.response.json();",
									"const currentVersion = versions.find(version => version.current === true);",
									"",
									"pm.test('project versions can be fetched', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('status should be APPROVED', function() {",
									"    pm.expect(currentVersion.status).to.equal(\"APPROVED\");",
									"})",
									"",
									"pm.test('current version is not the latest version', function(){",
									"    pm.expect(currentVersion.version).to.not.equal(pm.variables.get(\"latestVersion\"));",
									"});",
									"",
									"postman.setNextRequest('programme user can open the submitted project for modifications');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/versions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can approve modifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test('programme user should be able to approve the submitted modification', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('status should be set to APPROVED', function() {",
									"    pm.expect(pm.response.json()).to.eql('APPROVED');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();",
									"pm.variables.set('decision_date', date.toISOString().split('T')[0]);",
									"console.log(\"decision_date\");",
									"console.log(pm.variables.get('decision_date'));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"note\": \"changed to approved\",\n    \"date\": \"{{decision_date}}\",\n    \"entryIntoForceDate\": \"{{decision_date}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/approve modification",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"approve modification"
							]
						}
					},
					"response": []
				},
				{
					"name": "project current status is APPROVED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const versions = pm.response.json();",
									"const currentVersion = versions.find(version => version.current === true);",
									"",
									"pm.test('project versions can be fetched', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('status is APPROVED', function() {",
									"    pm.expect(currentVersion.status).to.equal(\"APPROVED\");",
									"})",
									"",
									"pm.test('current version has correct version number', function(){",
									"    pm.expect(currentVersion.version).to.equal(pm.variables.get(\"latestVersion\"));",
									"});",
									"",
									"if(pm.variables.get(\"versionCounter\") <= 5) {",
									"    postman.setNextRequest('programme user can open the submitted project for modifications');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{programme_user_password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/versions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"versions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Project Partner and Associated Organization",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project Partner A', function() {\r",
									"    const partner = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdA', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    const partner = pm.response.json();\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner A\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"toProjectId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner B', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdB', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner B\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner B\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"toProjectId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner A LeadPartner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can update project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A LEAD\");\r",
									"    pm.variables.set('partnerAbbreviationALead', partner.abbreviation);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdA}}\",\r\n    \"abbreviation\": \"Partner A LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can force to update project Partner B to be LEAD', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n  \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with address', function() {\r",
									"    pm.expect(organization.address.street).to.eql(\"test street\");\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with both contacts', function() {\r",
									"    pm.expect(organization.contacts).to.have.deep.members([\r",
									"        {\r",
									"            \"type\": \"LegalRepresentative\",\r",
									"            \"title\": null,\r",
									"            \"firstName\": \"Rafael\",\r",
									"            \"lastName\": \"Nadal\",\r",
									"            \"email\": \"rafael@atp.com\",\r",
									"            \"telephone\": \"+6 30 216 896\"\r",
									"        },\r",
									"        {\r",
									"            \"type\": \"ContactPerson\",\r",
									"            \"title\": \"Champion\",\r",
									"            \"firstName\": \"Roger\",\r",
									"            \"lastName\": \"Federer\",\r",
									"            \"email\": \"roger@atp.com\",\r",
									"            \"telephone\": \"+6 20 542 265\"\r",
									"        }\r",
									"    ]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdA}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdA}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdA}}\",\r\n    \"address\": {\r\n        \"street\": \"test street\"\r\n    },\r\n    \"contacts\": [\r\n        {\r\n            \"type\": \"ContactPerson\",\r\n            \"title\": \"Champion\",\r\n            \"firstName\": \"Roger\",\r\n            \"lastName\": \"Federer\",\r\n            \"email\": \"roger@atp.com\",\r\n            \"telephone\": \"+6 20 542 265\"\r\n        },\r\n        {\r\n            \"type\": \"LegalRepresentative\",\r\n            \"firstName\": \"Rafael\",\r\n            \"lastName\": \"Nadal\",\r\n            \"email\": \"rafael@atp.com\",\r\n            \"telephone\": \"+6 30 216 896\"\r\n        }\r\n    ],\r\n    \"roleDescription\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"test role description\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdD', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner D\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"toProjectId",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization for Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdD'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdD'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdD}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdD}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdD}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete project partner D together with AO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can delete project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partnerIdD}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partnerIdD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check AssociatedOrganization D deleted A stays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const page = pm.response.json();\r",
									"\r",
									"pm.test('applicant can fetch associated organizations for Project', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('there is now only one associated organization', function() {\r",
									"    pm.expect(page.totalElements).to.eql(1);\r",
									"    pm.expect(page.content[0].nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(page.content[0].nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('when only one associated organization, sortNumber is 1', function() {\r",
									"    pm.expect(page.content[0].sortNumber).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Project Partner - Details",
			"item": [
				{
					"name": "just create project application",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project duration to have periods",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project duration is saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().duration).to.eql(50);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{application_acronym}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ],\n\t\"duration\": 50,\n    \"intro\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partner 1 - Details",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_1', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}} {{$randomCompanySuffix}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"nameInOriginalLanguage\": \"{{$randomCatchPhrase}}\",\r\n    \"nameInEnglish\": \"{{$randomWords}}\",\r\n    \"otherIdentifierNumber\": \"{{$randomBankAccount}}\",\r\n    \"otherIdentifierDescription\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomBankAccountIban}}\"\r\n        }\r\n    ],\r\n    \"partnerType\": \"NationalPublicAuthority\",\r\n    \"vat\": \"{{$randomPhoneNumber}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"toProjectId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set both addresses to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set addresses to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('both addresses are there', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"street\": \"test org\"\r\n    },\r\n    {\r\n        \"type\": \"Department\",\r\n        \"street\": \"test dprt\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_1}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_1}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove 1st address and update 2nd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"Burundi (BI)\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\":\"Burundi (BI)\",\r\n        \"nutsRegion2\":\"Burundi (BI00)\",\r\n        \"nutsRegion3\":\"Burundi (BI000)\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_1}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_1}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set both contacts to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set contacts to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('both contacts are there', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.expect(partner.contacts.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"firstName\": \"test LR\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"firstName\": \"test CP\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_1}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_1}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove 1st contact and update 2nd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can remove contacts from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one contact is now returned', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.expect(partner.contacts.length).to.eql(1);\r",
											"}); \r",
											"\r",
											"pm.test('contact is saved correctly', function() {\r",
											"    const contact = pm.response.json().contacts[0];\r",
											"    pm.expect(contact.type).to.eql(\"ContactPerson\");\r",
											"    pm.expect(contact.title).to.eql(\"Bachelor\");\r",
											"    pm.expect(contact.firstName).to.eql(\"Donald\");\r",
											"    pm.expect(contact.lastName).to.eql(\"Trump\");\r",
											"    pm.expect(contact.email).to.eql(\"mc.donald@whitehouse.gov\");\r",
											"    pm.expect(contact.telephone).to.eql(\"202-456-6213\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"Bachelor\",\r\n        \"firstName\": \"Donald\",\r\n        \"lastName\": \"Trump\",\r\n        \"email\": \"mc.donald@whitehouse.gov\",\r\n        \"telephone\": \"202-456-6213\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_1}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_1}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "set motivation to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set motivation to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('motivation is set correctly', function() {\r",
											"    const motivation = pm.response.json().motivation;\r",
											"    pm.expect(motivation.organizationRelevance[0].translation).to.eql('This project is definitely relevant enough to be founded.');\r",
											"    pm.expect(motivation.organizationRole[0].translation).to.eql('test latin àâçéèêëîïôùûüÿ');\r",
											"    pm.expect(motivation.organizationExperience[0].translation).to.eql('We have 16 millions years of experience in this particular area.');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"organizationRelevance\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"This project is definitely relevant enough to be founded.\"\r\n            }\r\n        ],\r\n    \"organizationRole\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"test latin àâçéèêëîïôùûüÿ\"\r\n            }\r\n        ],\r\n    \"organizationExperience\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"We have 16 millions years of experience in this particular area.\"\r\n            }\r\n        ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_1}}/motivation",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_1}}",
										"motivation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Partner 2 - Budget 1",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_2', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}} {{$randomCompanySuffix}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"nameInOriginalLanguage\": \"{{$randomCatchPhrase}}\",\r\n    \"nameInEnglish\": \"{{$randomWords}}\",\r\n    \"otherIdentifierNumber\": \"{{$randomBankAccount}}\",\r\n    \"otherIdentifierDescription\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomBankAccountIban}}\"\r\n        }\r\n    ],\r\n    \"partnerType\": \"NationalPublicAuthority\",\r\n    \"vat\": \"{{$randomPhoneNumber}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"toProjectId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"Honduras (HN)\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\":\"Honduras (HN)\",\r\n        \"countryCode\":\"HN\",\r\n        \"nutsRegion2\":\"Honduras (HN00)\",\r\n        \"nutsRegion2Code\":\"HN00\",\r\n        \"nutsRegion3\":\"Honduras (HN000)\",\r\n        \"nutsRegion3Code\":\"HN000\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    const staffCosts = pm.response.json();\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    const staffCosts = pm.response.json();\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(48800);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Project Manager\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 10,\r\n        \"pricePerUnit\": 4500,\r\n        \"rowSum\": 45000\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Doctor\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 1,\r\n        \"pricePerUnit\": 3800,\r\n        \"rowSum\": 3800\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/staffcosts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"staffcosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - travel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budgettravel', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('travel is set correctly', function() {\r",
											"    const travel = pm.response.json();\r",
											"    pm.expect(travel.length).to.eql(1);\r",
											"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
											"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
											"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Gran Canaria');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99,\r\n        \"rowSum\": 0.18\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/travel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"travel"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - infrastructure",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set infrastructure budget', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('infrastructure budget is set correctly', function() {\r",
											"    const infrastructure = pm.response.json();\r",
											"    pm.expect(infrastructure.length).to.eql(1);\r",
											"    pm.expect(infrastructure[0].numberOfUnits).to.eql(2);\r",
											"    pm.expect(infrastructure[0].pricePerUnit).to.eql(0.5);\r",
											"    pm.expect(infrastructure[0].rowSum).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Dell Aspiron');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Dell Aspiron\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 0.5,\r\n        \"rowSum\": 1\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/infrastructure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"infrastructure"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(53681.18);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "set officeAndAdm + travel flatRates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate with travel flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRate\": 10,\r\n    \"travelAndAccommodationOnStaffCostsFlatRate\": 15\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total after travel auto-deleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(61001);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "set staff costs flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set staffCosts flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore budget - travel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budgettravel', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('travel is set correctly', function() {\r",
											"    const travel = pm.response.json();\r",
											"    pm.expect(travel.length).to.eql(1);\r",
											"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
											"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
											"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Gran Canaria');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99,\r\n        \"rowSum\": 0.18\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/travel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"travel"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(1.29);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Partner 3 - Budget 2 (Lead)",
					"item": [
						{
							"name": "create project Lead partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const partnerAbbr = pm.variables.replaceIn('{{$randomAbbreviation}}') + ' ' + pm.variables.replaceIn('{{$randomCompanySuffix}}')\r",
											"pm.variables.set(\r",
											"    'partner_abbreviation',\r",
											"    partnerAbbr.substr(0, 15)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_lead', partner.id);\r",
											"});\r",
											"\r",
											"pm.test('project partner has correct abbreviation', function() {\r",
											"    pm.expect(partner.abbreviation).to.eql(pm.variables.get('partner_abbreviation'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{partner_abbreviation}}\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"nameInOriginalLanguage\": \"{{$randomCatchPhrase}}\",\r\n    \"nameInEnglish\": \"{{$randomWords}}\",\r\n    \"otherIdentifierNumber\": \"{{$randomBankAccount}}\",\r\n    \"otherIdentifierDescription\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomBankAccountIban}}\"\r\n        }\r\n    ],\r\n    \"partnerType\": \"NationalPublicAuthority\",\r\n    \"vat\": \"{{$randomPhoneNumber}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"toProjectId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"Somalia (SO)\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\":\"Somalia (SO)\",\r\n        \"countryCode\":\"SO\",\r\n        \"nutsRegion2\":\"Somalia (SO00)\",\r\n        \"nutsRegion2Code\":\"SO00\",\r\n        \"nutsRegion3\":\"Somalia (SO000)\",\r\n        \"nutsRegion3Code\":\"SO000\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs to Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const staffCosts = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(22000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Teachers\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 8800,\r\n        \"rowSum\": 17600\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Students\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 22,\r\n        \"pricePerUnit\": 200,\r\n        \"rowSum\": 4400\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/staffcosts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"staffcosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate to Lead Partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total for Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(24200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in contacts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant fill in contacts', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"title\": \"{{$randomNamePrefix}}\",\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"telephone\": \"{{$randomPhoneNumber}}\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"{{$randomNamePrefix}}\",\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"telephone\": \"{{$randomPhoneNumber}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"contact"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "fill in project lump sums",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can fill in project lump sum and their respective partner contribution', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"programmeLumpSumId\": {{programmeLumpSumId}},\r\n        \"period\": 0,\r\n        \"lumpSumContributions\": [\r\n            {\r\n                \"partnerId\": {{partner_id_1}},\r\n                \"amount\": 2000\r\n            },\r\n            {\r\n                \"partnerId\": {{partner_id_2}},\r\n                \"amount\": 8000\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"programmeLumpSumId\": {{programmeLumpSumId}},\r\n        \"period\": 2,\r\n        \"lumpSumContributions\": [\r\n            {\r\n                \"partnerId\": {{partner_id_2}},\r\n                \"amount\": 3956\r\n            },\r\n            {\r\n                \"partnerId\": {{partner_id_1}},\r\n                \"amount\": 4044\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "check project budget for all partners",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project budget can be retrieved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both partners are returned', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    pm.expect(res).to.have.length(3);\r",
									"});\r",
									"\r",
									"pm.test('partners are sorted', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.id).to.eql(pm.variables.get('partner_id_lead'));\r",
									"    pm.expect(res[1].partner.id).to.eql(pm.variables.get('partner_id_1'));\r",
									"    pm.expect(res[2].partner.id).to.eql(pm.variables.get('partner_id_2'));\r",
									"});\r",
									"\r",
									"pm.test('partners have correct sort numbers', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.sortNumber).to.eql(1);\r",
									"    pm.expect(res[1].partner.sortNumber).to.eql(2);\r",
									"    pm.expect(res[2].partner.sortNumber).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test('partners have correct data filled in', function() {\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    pm.expect(res[0].staffCosts).to.eql(22000.0);\r",
									"    pm.expect(res[0].travelCosts).to.eql(0);\r",
									"    pm.expect(res[0].externalCosts).to.eql(0);\r",
									"    pm.expect(res[0].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[0].infrastructureCosts).to.eql(0);\r",
									"    pm.expect(res[0].officeAndAdministrationCosts).to.eql(2200.0);\r",
									"    pm.expect(res[0].totalSum).to.eql(24200);\r",
									"\r",
									"    pm.expect(res[1].partner.country).to.eql('Burundi (BI)');\r",
									"    pm.expect(res[1].totalSum).to.eql(6044);\r",
									"    pm.expect(res[1].lumpSumContribution).to.eql(6044);\r",
									"\r",
									"    pm.expect(res[2].staffCosts).to.eql(0.11);\r",
									"    pm.expect(res[2].travelCosts).to.eql(0.18);\r",
									"    pm.expect(res[2].externalCosts).to.eql(0);\r",
									"    pm.expect(res[2].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[2].infrastructureCosts).to.eql(1);\r",
									"    pm.expect(res[2].officeAndAdministrationCosts).to.eql(0);\r",
									"    pm.expect(res[2].totalSum).to.eql(11957.29);\r",
									"    pm.expect(res[2].lumpSumContribution).to.eql(11956);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/budget",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"budget"
							]
						}
					},
					"response": []
				},
				{
					"name": "set co-financing to Lead Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can set Co-Finaning', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('financing and funds are correct', function() {\r",
									"    const finances = pm.response.json().finances;\r",
									"    pm.expect(finances[0].percentage).to.eql(25);\r",
									"    pm.expect(finances[0].fund).to.not.be.empty;\r",
									"    pm.expect(finances[1].percentage).to.eql(75);\r",
									"    pm.expect(finances[1].fund).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test('1st contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[0].name).to.eql(pm.variables.get('partner_abbreviation'));\r",
									"    pm.expect(contributions[0].status).to.eql('Private');\r",
									"    pm.expect(contributions[0].partner).to.be.true;\r",
									"    pm.expect(contributions[0].amount).to.eql(5100);\r",
									"});\r",
									"\r",
									"pm.test('2nd contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[1].name).to.eql('Source of money 01');\r",
									"    pm.expect(contributions[1].status).to.eql('Public');\r",
									"    pm.expect(contributions[1].partner).to.be.false;\r",
									"    pm.expect(contributions[1].amount).to.eql(8000);\r",
									"});\r",
									"\r",
									"pm.test('3rd contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[2].name).to.eql('Source of money 02');\r",
									"    pm.expect(contributions[2].status).to.eql('AutomaticPublic');\r",
									"    pm.expect(contributions[2].partner).to.be.false;\r",
									"    pm.expect(contributions[2].amount).to.eql(3000);\r",
									"});\r",
									"\r",
									"pm.test('4th contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[3].name).to.eql('Source of money 03');\r",
									"    pm.expect(contributions[3].status).to.eql('Private');\r",
									"    pm.expect(contributions[3].partner).to.be.false;\r",
									"    pm.expect(contributions[3].amount).to.eql(2050);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"finances\": [\r\n        {\r\n            \"percentage\": 25,\r\n            \"fundType\": \"MainFund\",\r\n            \"fundId\": {{programmeFundId}}\r\n        },\r\n        {\r\n            \"percentage\": 75,\r\n            \"fundType\": \"PartnerContribution\"\r\n        }\r\n    ],\r\n    \"partnerContributions\": [\r\n        {\r\n            \"partner\": false,\r\n            \"name\": \"Source of money 01\",\r\n            \"status\": \"Public\",\r\n            \"amount\": 8000\r\n        },\r\n        {\r\n            \"partner\": true,\r\n            \"name\": \"THIS NAME SHOULD BE IGNORED\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 5100\r\n        },\r\n        {\r\n            \"partner\": false,\r\n            \"name\": \"Source of money 02\",\r\n            \"status\": \"AutomaticPublic\",\r\n            \"amount\": 3000\r\n        },\r\n        {\r\n            \"partner\": false,\r\n            \"name\": \"Source of money 03\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 2050\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/cofinancing",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"cofinancing"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Project Work Package and Result",
			"item": [
				{
					"name": "just create project application",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"    pm.environment.set('application_id', pm.response.json().id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project duration to have periods",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project duration is saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().duration).to.eql(80);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{application_acronym}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ],\n\t\"duration\": 80,\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create work package 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workPackage = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"pm.variables.set(\r",
									"    'workPackage_1_name',\r",
									"    workPackage.substr(0, 100)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project workPackage', function() {\r",
									"    const workPackage = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('workPackage_id_1', workPackage.id);\r",
									"});\r",
									"\r",
									"pm.test('workPackage has correct name (translated)', function() {\r",
									"    const name = pm.response.json().name.find(x => x.language === pm.variables.get('inputLanguage')).translation;\r",
									"    pm.expect(name).to.be.eql(pm.variables.get('workPackage_1_name'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{workPackage_1_name}}\"\r\n        }\r\n    ],\r\n    \"specificObjective\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomDepartment}}\"\r\n        }\r\n    ],\r\n    \"objectiveAndAudience\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomLoremParagraph}}\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage"
							]
						}
					},
					"response": []
				},
				{
					"name": "create activities for work package 1 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function createActivityNameAndDescription(activityNumber) {\r",
									"    const activityName = pm.variables.replaceIn('{{$randomProduct}}') + ' - ' + pm.variables.replaceIn('{{$randomWords}}')\r",
									"    pm.variables.set(\r",
									"        'activity_name_' + activityNumber,\r",
									"        activityName.substr(0, 200)\r",
									"    );\r",
									"    const activityDescription = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"    pm.variables.set(\r",
									"        'activity_description_' + activityNumber,\r",
									"        activityDescription.substr(0, 500)\r",
									"    );\r",
									"}\r",
									"\r",
									"function createDeliverableName(deliverableNumber) {\r",
									"    pm.variables.set('deliverable_' + deliverableNumber, pm.variables.replaceIn('{{$randomProduct}}'));\r",
									"}\r",
									"\r",
									"createActivityNameAndDescription(1);\r",
									"createDeliverableName(1);\r",
									"createActivityNameAndDescription(2);\r",
									"createDeliverableName(2);\r",
									"createActivityNameAndDescription(3);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can update workPackage activities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('activities are correctly sorted', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    pm.expect(activities[0].startPeriod).to.eql(1);\r",
									"    pm.expect(activities[0].endPeriod).to.eql(2);\r",
									"\r",
									"    pm.expect(activities[1].startPeriod).to.eql(2);\r",
									"    pm.expect(activities[1].endPeriod).to.eql(3);\r",
									"\r",
									"    pm.expect(activities[2].startPeriod).to.eql(3);\r",
									"    pm.expect(activities[2].endPeriod).to.eql(4);\r",
									"});\r",
									"\r",
									"// pm.test('deliverables are correctly sorted', function() {\r",
									"//     const deliverables = pm.response.json()[0].deliverables;\r",
									"\r",
									"//     pm.expect(deliverables[0].period).to.eql(1);\r",
									"//     pm.expect(deliverables[1].period).to.eql(2);\r",
									"// });\r",
									"\r",
									"pm.test('activities have correct names', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    pm.expect(activities[0].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_name_1'));\r",
									"    pm.expect(activities[0].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_description_1'));\r",
									"\r",
									"    pm.expect(activities[1].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_name_2'));\r",
									"    pm.expect(activities[1].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_description_2'));\r",
									"\r",
									"    pm.expect(activities[2].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_name_3'));\r",
									"    pm.expect(activities[2].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_description_3'));\r",
									"});\r",
									"\r",
									"pm.test('amount of deliverables is correct', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    const deliverables_1 = activities[0].deliverables;\r",
									"    pm.expect(deliverables_1).to.has.length(1);\r",
									"\r",
									"    const deliverables_2 = activities[1].deliverables;\r",
									"    pm.expect(deliverables_2).to.has.length(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('deliverables have correct names', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    const deliverable_1 = activities[0].deliverables[0];\r",
									"    pm.expect(deliverable_1.description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('deliverable_1'));\r",
									"\r",
									"    const deliverable_2 = activities[1].deliverables[0];\r",
									"    pm.expect(deliverable_2.description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('deliverable_2'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name_1}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 1,\r\n        \"endPeriod\": 2,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description_1}}\"\r\n            }\r\n        ],\r\n        \"deliverables\": [\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_1}}\"\r\n                    }\r\n                ],\r\n                \"period\": 2\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name_2}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 2,\r\n        \"endPeriod\": 3,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description_2}}\"\r\n            }\r\n        ],\r\n        \"deliverables\": [\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_2}}\"\r\n                    }\r\n                ],\r\n                \"period\": 2\r\n            }\r\n        ]\r\n    },\r\n        {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name_3}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 3,\r\n        \"endPeriod\": 4,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description_3}}\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage/{{workPackage_id_1}}/activity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage",
								"{{workPackage_id_1}}",
								"activity"
							]
						}
					},
					"response": []
				},
				{
					"name": "create outputs for work package 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function createOutputTitleAndDescription(outputNumber) {\r",
									"    const outputTitle = pm.variables.replaceIn('{{$randomProduct}}')\r",
									"    pm.variables.set(\r",
									"        'output_title_' + outputNumber,\r",
									"        outputTitle.substr(0, 200)\r",
									"    );\r",
									"    const outputDescription = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"    pm.variables.set(\r",
									"        'output_description_' + outputNumber,\r",
									"        outputDescription.substr(0, 500)\r",
									"    );\r",
									"}\r",
									"\r",
									"createOutputTitleAndDescription(1);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can update workPackage outputs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('output is correctly saved', function() {\r",
									"    const output = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(output.outputNumber).to.eql(1);\r",
									"    pm.expect(output.targetValue).to.eql(25000);\r",
									"    pm.expect(output.periodNumber).to.eql(5);\r",
									"});\r",
									"\r",
									"pm.test('output title is correct', function() {\r",
									"    const outputTitles = pm.response.json()[0].title;\r",
									"\r",
									"    pm.expect(outputTitles.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('output_title_1'));\r",
									"});\r",
									"\r",
									"pm.test('output description is correct', function() {\r",
									"    const outputDescriptions = pm.response.json()[0].description;\r",
									"\r",
									"    pm.expect(outputDescriptions.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('output_description_1'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"programmeOutputIndicatorId\": null,\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{output_title_1}}\"\r\n            }\r\n        ],\r\n        \"targetValue\": 25000,\r\n        \"periodNumber\": 5,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{output_description_1}}\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage/{{workPackage_id_1}}/output",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage",
								"{{workPackage_id_1}}",
								"output"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work package 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workPackage = pm.variables.replaceIn('{{$randomJobTitle}}')\r",
									"pm.variables.set(\r",
									"    'workPackage_2_name',\r",
									"    workPackage.substr(0, 100)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project workPackage 2', function() {\r",
									"    const workPackage = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('workPackage_id_2', workPackage.id);\r",
									"});\r",
									"\r",
									"pm.test('workPackage has correct name (translated)', function() {\r",
									"    const name = pm.response.json().name.find(x => x.language === pm.variables.get('inputLanguage')).translation;\r",
									"    pm.expect(name).to.be.eql(pm.variables.get('workPackage_2_name'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{workPackage_2_name}}\"\r\n        }\r\n    ],\r\n    \"specificObjective\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomDepartment}}\"\r\n        }\r\n    ],\r\n    \"objectiveAndAudience\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomLoremParagraph}}\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage"
							]
						}
					},
					"response": []
				},
				{
					"name": "create activities for work package 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function createActivityNameAndDescription(activityNumber) {\r",
									"    const activityName = pm.variables.replaceIn('{{$randomProduct}}') + ' - ' + pm.variables.replaceIn('{{$randomWords}}')\r",
									"    pm.variables.set(\r",
									"        'activity_name_' + activityNumber,\r",
									"        activityName.substr(0, 200)\r",
									"    );\r",
									"    const activityDescription = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"    pm.variables.set(\r",
									"        'activity_description_' + activityNumber,\r",
									"        activityDescription.substr(0, 500)\r",
									"    );\r",
									"}\r",
									"\r",
									"function createDeliverableName(deliverableNumber) {\r",
									"    pm.variables.set('deliverable_' + deliverableNumber, pm.variables.replaceIn('{{$randomProduct}}'));\r",
									"}\r",
									"\r",
									"createActivityNameAndDescription(1);\r",
									"createDeliverableName(1);\r",
									"createActivityNameAndDescription(2);\r",
									"createDeliverableName(2);\r",
									"createDeliverableName(3);\r",
									"createDeliverableName(4);\r",
									"createDeliverableName(5);\r",
									"createActivityNameAndDescription(3);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can update workPackage activities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('activities are correctly sorted', function() {\r",
									"    const activities = pm.response.json();\r",
									"    pm.expect(activities).to.have.length(3);\r",
									"\r",
									"    pm.expect(activities[0].startPeriod).to.eql(2);\r",
									"    pm.expect(activities[0].endPeriod).to.eql(3);\r",
									"\r",
									"    pm.expect(activities[1].startPeriod).to.eql(3);\r",
									"    pm.expect(activities[1].endPeriod).to.eql(4);\r",
									"\r",
									"    pm.expect(activities[2].startPeriod).to.eql(4);\r",
									"    pm.expect(activities[2].endPeriod).to.eql(5);\r",
									"});\r",
									"\r",
									"pm.test('deliverables are correctly sorted for the 2nd activity', function() {\r",
									"    const deliverables = pm.response.json()[1].deliverables;\r",
									"\r",
									"    pm.expect(deliverables[0].period).to.eql(3);\r",
									"    pm.expect(deliverables[1].period).to.eql(4);\r",
									"    pm.expect(deliverables[2].period).to.eql(3);\r",
									"    pm.expect(deliverables[3].period).to.eql(4);\r",
									"\r",
									"    pm.expect(deliverables[0].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('deliverable_2'));\r",
									"    pm.expect(deliverables[1].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('deliverable_3'));\r",
									"    pm.expect(deliverables[2].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('deliverable_4'));\r",
									"    pm.expect(deliverables[3].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('deliverable_5'));\r",
									"});\r",
									"\r",
									"pm.test('activities have correct names', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    pm.expect(activities[0].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_name_1'));\r",
									"    pm.expect(activities[0].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_description_1'));\r",
									"\r",
									"    pm.expect(activities[1].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_name_2'));\r",
									"    pm.expect(activities[1].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_description_2'));\r",
									"\r",
									"    pm.expect(activities[2].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_name_3'));\r",
									"    pm.expect(activities[2].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('activity_description_3'));\r",
									"});\r",
									"\r",
									"pm.test('overall amount of deliverables is correct', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    const deliverables_1 = activities[0].deliverables.length;\r",
									"    const deliverables_2 = activities[1].deliverables.length;\r",
									"    const deliverables_3 = activities[2].deliverables.length;\r",
									"\r",
									"    pm.expect(deliverables_1 + deliverables_2 + deliverables_3).to.eql(5);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('deliverables have correct names', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    const deliverable_1 = activities[0].deliverables[0];\r",
									"    pm.expect(deliverable_1.description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('deliverable_1'));\r",
									"\r",
									"    const deliverable_2 = activities[1].deliverables[0];\r",
									"    pm.expect(deliverable_2.description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('deliverable_2'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name_1}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 2,\r\n        \"endPeriod\": 3,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description_1}}\"\r\n            }\r\n        ],\r\n        \"deliverables\": [\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_1}}\"\r\n                    }\r\n                ],\r\n                \"period\": 3\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name_2}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 3,\r\n        \"endPeriod\": 4,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description_2}}\"\r\n            }\r\n        ],\r\n        \"deliverables\": [\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_2}}\"\r\n                    }\r\n                ],\r\n                \"period\": 3\r\n            },\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_3}}\"\r\n                    }\r\n                ],\r\n                \"period\": 4\r\n            },\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_4}}\"\r\n                    }\r\n                ],\r\n                \"period\": 3\r\n            },\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_5}}\"\r\n                    }\r\n                ],\r\n                \"period\": 4\r\n            }\r\n        ]\r\n    },\r\n        {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name_3}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 4,\r\n        \"endPeriod\": 5,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description_3}}\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage/{{workPackage_id_2}}/activity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage",
								"{{workPackage_id_2}}",
								"activity"
							]
						}
					},
					"response": []
				},
				{
					"name": "create outputs for work package 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function createOutputTitleAndDescription(outputNumber) {\r",
									"    const outputTitle = pm.variables.replaceIn('{{$randomProduct}}')\r",
									"    pm.variables.set(\r",
									"        'output_title_' + outputNumber,\r",
									"        outputTitle.substr(0, 200)\r",
									"    );\r",
									"    const outputDescription = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"    pm.variables.set(\r",
									"        'output_description_' + outputNumber,\r",
									"        outputDescription.substr(0, 500)\r",
									"    );\r",
									"}\r",
									"\r",
									"createOutputTitleAndDescription(1);\r",
									"createOutputTitleAndDescription(2);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can update workPackage outputs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('outputs are correctly saved', function() {\r",
									"    const outputs = pm.response.json();\r",
									"    pm.expect(outputs).to.have.length(2);\r",
									"});\r",
									"\r",
									"pm.test('outputs are correctly sorted', function() {\r",
									"    const outputs = pm.response.json();\r",
									"\r",
									"    pm.expect(outputs[0].outputNumber).to.eql(1);\r",
									"    pm.expect(outputs[1].outputNumber).to.eql(2);\r",
									"\r",
									"    pm.expect(outputs[0].periodNumber).to.eql(5);\r",
									"    pm.expect(outputs[1].periodNumber).to.eql(6);\r",
									"});\r",
									"\r",
									"pm.test('outputs are correctly sorted and have proper titles', function() {\r",
									"    const outputs = pm.response.json();\r",
									"\r",
									"    pm.expect(outputs[0].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('output_title_1'));\r",
									"    pm.expect(outputs[1].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation)\r",
									"        .to.eql(pm.variables.get('output_title_2'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"programmeOutputIndicatorId\": null,\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{output_title_1}}\"\r\n            }\r\n        ],\r\n        \"targetValue\": 5000,\r\n        \"periodNumber\": 5,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{output_description_1}}\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"programmeOutputIndicatorId\": null,\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{output_title_2}}\"\r\n            }\r\n        ],\r\n        \"targetValue\": \"1800\",\r\n        \"periodNumber\": 6,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{output_description_2}}\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage/{{workPackage_id_2}}/output",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage",
								"{{workPackage_id_2}}",
								"output"
							]
						}
					},
					"response": []
				},
				{
					"name": "add project results",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can add results to project', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('results has been created', function() {\r",
									"    const results = pm.response.json();\r",
									"    pm.expect(results).to.have.length(3);\r",
									"});\r",
									"\r",
									"pm.test('results has correct numbers', function() {\r",
									"    const results = pm.response.json();\r",
									"    pm.expect(results[0].resultNumber).to.be.eql(1);\r",
									"    pm.expect(results[1].resultNumber).to.be.eql(2);\r",
									"    pm.expect(results[2].resultNumber).to.be.eql(3);\r",
									"});\r",
									"\r",
									"pm.test('results has correct periods and baselines', function() {\r",
									"    const results = pm.response.json();\r",
									"\r",
									"    pm.expect(results[0].periodNumber).to.be.eql(6);\r",
									"    pm.expect(results[1].periodNumber).to.be.eql(7);\r",
									"    pm.expect(results[2].periodNumber).to.be.eql(7);\r",
									"\r",
									"    pm.expect(results[0].baseline).to.be.eql(4500);\r",
									"    pm.expect(results[1].baseline).to.be.eql(80000);\r",
									"    pm.expect(results[2].baseline).to.be.eql(10500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"baseline\": 4500,\r\n        \"periodNumber\": 6,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{$randomJobTitle}}\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"baseline\": 80000,\r\n        \"periodNumber\": 7,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{$randomJobTitle}}\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"baseline\": 10500,\r\n        \"periodNumber\": 7,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{$randomJobTitle}}\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/result",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"result"
							]
						}
					},
					"response": []
				},
				{
					"name": "test timeplan data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can retrieve data for timeplan', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('2 work packages are returned', function() {\r",
									"    const wps = pm.response.json();\r",
									"    pm.expect(wps).to.have.length(2);\r",
									"});\r",
									"\r",
									"pm.test('assert first work package data', function() {\r",
									"    const wp = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(wp.workPackageNumber).to.eql(1);\r",
									"    pm.expect(wp.activities).to.have.length(3);\r",
									"    pm.expect(wp.outputs).to.have.length(1);\r",
									"});\r",
									"\r",
									"pm.test('assert second work package data', function() {\r",
									"    const wp = pm.response.json()[1];\r",
									"\r",
									"    pm.expect(wp.workPackageNumber).to.eql(2);\r",
									"    pm.expect(wp.activities).to.have.length(3);\r",
									"    pm.expect(wp.outputs).to.have.length(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/workPackage/withOutputsAndActivities",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"workPackage",
								"withOutputsAndActivities"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Project Report - add partner and contract previous project",
			"item": [
				{
					"name": "Partner 2 + budget",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can create project partner', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_2', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}} {{$randomCompanySuffix}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"nameInOriginalLanguage\": \"{{$randomCatchPhrase}}\",\r\n    \"nameInEnglish\": \"{{$randomWords}}\",\r\n    \"otherIdentifierNumber\": \"{{$randomBankAccount}}\",\r\n    \"otherIdentifierDescription\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomBankAccountIban}}\"\r\n        }\r\n    ],\r\n    \"partnerType\": \"NationalPublicAuthority\",\r\n    \"vat\": \"{{$randomPhoneNumber}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"toProjectId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"Honduras (HN)\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\":\"Honduras (HN)\",\r\n        \"countryCode\":\"HN\",\r\n        \"nutsRegion2\":\"Honduras (HN00)\",\r\n        \"nutsRegion2Code\":\"HN00\",\r\n        \"nutsRegion3\":\"Honduras (HN000)\",\r\n        \"nutsRegion3Code\":\"HN000\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    const staffCosts = pm.response.json();\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    const staffCosts = pm.response.json();\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(48800);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Project Manager\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 10,\r\n        \"pricePerUnit\": 4500,\r\n        \"rowSum\": 45000\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Doctor\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 1,\r\n        \"pricePerUnit\": 3800,\r\n        \"rowSum\": 3800\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/staffcosts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"staffcosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - travel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budgettravel', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('travel is set correctly', function() {\r",
											"    const travel = pm.response.json();\r",
											"    pm.expect(travel.length).to.eql(1);\r",
											"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
											"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
											"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Gran Canaria');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99,\r\n        \"rowSum\": 0.18\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/travel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"travel"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - infrastructure",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set infrastructure budget', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('infrastructure budget is set correctly', function() {\r",
											"    const infrastructure = pm.response.json();\r",
											"    pm.expect(infrastructure.length).to.eql(1);\r",
											"    pm.expect(infrastructure[0].numberOfUnits).to.eql(2);\r",
											"    pm.expect(infrastructure[0].pricePerUnit).to.eql(0.5);\r",
											"    pm.expect(infrastructure[0].rowSum).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Dell Aspiron');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Dell Aspiron\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 0.5,\r\n        \"rowSum\": 1\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/infrastructure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"infrastructure"
									]
								}
							},
							"response": []
						},
						{
							"name": "set staff costs flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set staffCosts flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(1.29);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Partner 1 + budget",
					"item": [
						{
							"name": "create project Lead partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const partnerAbbr = pm.variables.replaceIn('{{$randomAbbreviation}}') + ' ' + pm.variables.replaceIn('{{$randomCompanySuffix}}')\r",
											"pm.variables.set(\r",
											"    'partner_abbreviation',\r",
											"    partnerAbbr.substr(0, 15)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can create project partner', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_lead', partner.id);\r",
											"});\r",
											"\r",
											"pm.test('project partner has correct abbreviation', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.expect(partner.abbreviation).to.eql(pm.variables.get('partner_abbreviation'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{partner_abbreviation}}\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"nameInOriginalLanguage\": \"{{$randomCatchPhrase}}\",\r\n    \"nameInEnglish\": \"{{$randomWords}}\",\r\n    \"otherIdentifierNumber\": \"{{$randomBankAccount}}\",\r\n    \"otherIdentifierDescription\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomBankAccountIban}}\"\r\n        }\r\n    ],\r\n    \"partnerType\": \"NationalPublicAuthority\",\r\n    \"vat\": \"{{$randomPhoneNumber}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/toProjectId/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"toProjectId",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"Somalia (SO)\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\":\"Somalia (SO)\",\r\n        \"countryCode\":\"SO\",\r\n        \"nutsRegion2\":\"Somalia (SO00)\",\r\n        \"nutsRegion2Code\":\"SO00\",\r\n        \"nutsRegion3\":\"Somalia (SO000)\",\r\n        \"nutsRegion3Code\":\"SO000\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs to Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const staffCosts = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(22000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Teachers\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 8800,\r\n        \"rowSum\": 17600,\r\n        \"budgetPeriods\":[\r\n            { \"number\":1, \"amount\":1500},\r\n            { \"number\":2, \"amount\":2000},\r\n            { \"number\":3, \"amount\":1500},\r\n            { \"number\":4, \"amount\":5000},\r\n            { \"number\":5, \"amount\":1200},\r\n            { \"number\":6, \"amount\":3200},\r\n            { \"number\":7, \"amount\":3200}\r\n        ]\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Students\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 22,\r\n        \"pricePerUnit\": 200,\r\n        \"rowSum\": 4400,\r\n        \"budgetPeriods\":[\r\n            { \"number\":1, \"amount\":1000},\r\n            { \"number\":2, \"amount\":100},\r\n            { \"number\":3, \"amount\":1000},\r\n            { \"number\":4, \"amount\":100},\r\n            { \"number\":5, \"amount\":1100},\r\n            { \"number\":6, \"amount\":100},\r\n            { \"number\":7, \"amount\":1000}\r\n        ]\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/staffcosts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"staffcosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate to Lead Partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total for Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(24200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in contacts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant fill in contacts', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"title\": \"{{$randomNamePrefix}}\",\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"telephone\": \"{{$randomPhoneNumber}}\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"{{$randomNamePrefix}}\",\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"telephone\": \"{{$randomPhoneNumber}}\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "set co-financing to Lead Partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set Co-Finaning', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('financing and funds are correct', function() {\r",
											"    const finances = pm.response.json().finances;\r",
											"    pm.expect(finances[0].percentage).to.eql(25);\r",
											"    pm.expect(finances[0].fund).to.not.be.empty;\r",
											"    pm.expect(finances[1].percentage).to.eql(75);\r",
											"    pm.expect(finances[1].fund).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test('1st contribution is correct', function() {\r",
											"    const contributions = pm.response.json().partnerContributions;\r",
											"    pm.expect(contributions[0].name).to.eql(pm.variables.get('partner_abbreviation'));\r",
											"    pm.expect(contributions[0].status).to.eql('Private');\r",
											"    pm.expect(contributions[0].partner).to.be.true;\r",
											"    pm.expect(contributions[0].amount).to.eql(5805);\r",
											"});\r",
											"\r",
											"pm.test('2nd contribution is correct', function() {\r",
											"    const contributions = pm.response.json().partnerContributions;\r",
											"    pm.expect(contributions[1].name).to.eql('Source of money 01');\r",
											"    pm.expect(contributions[1].status).to.eql('Public');\r",
											"    pm.expect(contributions[1].partner).to.be.false;\r",
											"    pm.expect(contributions[1].amount).to.eql(8360);\r",
											"});\r",
											"\r",
											"pm.test('3rd contribution is correct', function() {\r",
											"    const contributions = pm.response.json().partnerContributions;\r",
											"    pm.expect(contributions[2].name).to.eql('Source of money 02');\r",
											"    pm.expect(contributions[2].status).to.eql('AutomaticPublic');\r",
											"    pm.expect(contributions[2].partner).to.be.false;\r",
											"    pm.expect(contributions[2].amount).to.eql(3800.63);\r",
											"});\r",
											"\r",
											"pm.test('4th contribution is correct', function() {\r",
											"    const contributions = pm.response.json().partnerContributions;\r",
											"    pm.expect(contributions[3].name).to.eql('Source of money 03');\r",
											"    pm.expect(contributions[3].status).to.eql('Private');\r",
											"    pm.expect(contributions[3].partner).to.be.false;\r",
											"    pm.expect(contributions[3].amount).to.eql(2350);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"finances\": [\r\n        {\r\n            \"percentage\": 25,\r\n            \"fundType\": \"MainFund\",\r\n            \"fundId\": {{programmeFundId}}\r\n        },\r\n        {\r\n            \"percentage\": 75,\r\n            \"fundType\": \"PartnerContribution\"\r\n        }\r\n    ],\r\n    \"partnerContributions\": [\r\n        {\r\n            \"partner\": false,\r\n            \"name\": \"Source of money 01\",\r\n            \"status\": \"Public\",\r\n            \"amount\": 8360\r\n        },\r\n        {\r\n            \"partner\": true,\r\n            \"name\": \"THIS NAME SHOULD BE IGNORED\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 5805\r\n        },\r\n        {\r\n            \"partner\": false,\r\n            \"name\": \"Source of money 02\",\r\n            \"status\": \"AutomaticPublic\",\r\n            \"amount\": 3800.63\r\n        },\r\n        {\r\n            \"partner\": false,\r\n            \"name\": \"Source of money 03\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 2350\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/cofinancing",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"cofinancing"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "fill in lump sums",
					"item": [
						{
							"name": "fill in project lump sums",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can fill in project lump sum and their respective partner contribution', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"programmeLumpSumId\": {{programmeLumpSumId}},\r\n        \"period\": 3,\r\n        \"lumpSumContributions\": [\r\n            {\r\n                \"partnerId\": {{partner_id_lead}},\r\n                \"amount\": 2887.5\r\n            },\r\n            {\r\n                \"partnerId\": {{partner_id_2}},\r\n                \"amount\": 7112.5\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/lumpSum",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"lumpSum"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "set to contracted",
					"item": [
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('application has correct status', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('SUBMITTED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/assessment/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"assessment",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "set ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/set-as-eligible",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"set-as-eligible"
									]
								}
							},
							"response": []
						},
						{
							"name": "set to APPROVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 2);\r",
											"pm.variables.set('funding_decision_date_minus_2', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status should be set to APPROVED', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('APPROVED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"date\": \"{{funding_decision_date_minus_2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/approve",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "set to CONTRACTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programm user should be able to set to CONTRACTED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('status should be set to CONTRACTED', function() {\r",
											"    pm.expect(pm.response.json()).to.eql('CONTRACTED');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/set-to-contracted",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"set-to-contracted"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "make user partner collaborator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('successful', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('applicant is now collaborator for LP', function() {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data[0].userEmail).to.eql(pm.environment.get('applicant_email'));\r",
									"    pm.expect(data[0].level).to.eql('EDIT');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"userEmail\": \"{{applicant_email}}\",\r\n        \"level\": \"EDIT\",\r\n        \"gdpr\": true\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/projectPartnerCollaborators/forProject/{{application_id}}/forPartner/{{partner_id_lead}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"projectPartnerCollaborators",
								"forProject",
								"{{application_id}}",
								"forPartner",
								"{{partner_id_lead}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create report for partner #1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to create partner report', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('report_id_1', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('report should have number 1', function() {\r",
									"    const report = pm.response.json();\r",
									"    pm.expect(report.reportNumber).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('report should have status draft', function() {\r",
									"    const report = pm.response.json();\r",
									"    pm.expect(report.status).to.eql('Draft');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/create/{{partner_id_lead}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"create",
								"{{partner_id_lead}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "choose period for report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to fill in report identification', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('report should have period 1 selected and report forecast persisted', function() {\r",
									"    const report = pm.response.json();\r",
									"    pm.expect(report.spendingProfile.periodDetail.number).to.eql(1);\r",
									"    pm.expect(report.spendingProfile.periodDetail.periodBudget).to.eql(2750);\r",
									"    pm.expect(report.spendingProfile.periodDetail.periodBudgetCumulative).to.eql(2750);\r",
									"    pm.expect(report.spendingProfile.nextReportForecast).to.eql(2415.20);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startDate\": null,\r\n    \"endDate\": null,\r\n    \"period\": 1,\r\n    \"summary\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\r\n        }\r\n    ],\r\n    \"problemsAndDeviations\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomPhrase}}\"\r\n        }\r\n    ],\r\n    \"targetGroups\": [],\r\n    \"nextReportForecast\": 2415.20,\r\n    \"spendingDeviations\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/report/partner/identification/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"identification",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get available lump sums",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to fetch available lumpsums', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('report should have at least 1 available lump sum', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.length).to.be.greaterThan(0);\r",
									"    pm.variables.set('reportLumpSumId', response[0].id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/expenditure/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}/lumpSums",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"expenditure",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}",
								"lumpSums"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in at least 1 expenditure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to fill in report expenditure', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('report should have 1 expenditure', function() {\r",
									"    pm.expect(pm.response.json().length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('report should have 1 lump sum with correct amount', function() {\r",
									"    const expenditures = pm.response.json();\r",
									"    pm.expect(expenditures[0].declaredAmount).to.eql(2887.5);\r",
									"    pm.expect(expenditures[0].pricePerUnit).to.eql(2887.5);\r",
									"    pm.expect(expenditures[0].numberOfUnits).to.eql(1);\r",
									"    pm.expect(expenditures[0].currencyConversionRate).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": null,\r\n        \"lumpSumId\": {{reportLumpSumId}},\r\n        \"unitCostId\": null,\r\n        \"costCategory\": \"Multiple\",\r\n        \"investmentId\": null,\r\n        \"contractId\": null,\r\n        \"internalReferenceNumber\": null,\r\n        \"invoiceNumber\": null,\r\n        \"invoiceDate\": null,\r\n        \"dateOfPayment\": null,\r\n        \"currencyCode\": \"EUR\",\r\n        \"currencyConversionRate\": 1,\r\n        \"declaredAmountInEur\": 0\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/report/partner/expenditure/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"expenditure",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get report spending profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to retrieve current spending profile', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('assert spending profile values are correctly calculated', function() {\r",
									"    const spendingProfile = pm.response.json().spendingProfile;\r",
									"    pm.expect(spendingProfile.currentReport).to.eql(2887.5);\r",
									"    pm.expect(spendingProfile.differenceFromPlan).to.eql(-137.5);\r",
									"    pm.expect(spendingProfile.differenceFromPlanPercentage).to.eql(105);\r",
									"    pm.expect(spendingProfile.nextReportForecast).to.eql(2415.2);\r",
									"});\r",
									"\r",
									"pm.test('assert spending profile period is properly calculated', function() {\r",
									"    const periodDetail = pm.response.json().spendingProfile.periodDetail;\r",
									"    pm.expect(periodDetail.start).to.eql(1);\r",
									"    pm.expect(periodDetail.end).to.eql(12);\r",
									"    pm.expect(periodDetail.number).to.eql(1);\r",
									"    pm.expect(periodDetail.periodBudget).to.eql(2750);\r",
									"    pm.expect(periodDetail.periodBudgetCumulative).to.eql(2750);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/identification/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"identification",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get contribution",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programm user should be able to retrieve partner report contribution', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('assert total amount', function() {\r",
									"    const report = pm.response.json();\r",
									"    pm.expect(report.overview.total.amount).to.eql(20315.63);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/contribution/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"contribution",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('report submitted', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(\"Submitted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/submit/{{partner_id_lead}}/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"submit",
								"{{partner_id_lead}}",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "assign controller institution to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('controller institution assignment finished successfully', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assignmentsToAdd\": [\r\n        {\r\n            \"partnerId\": {{partner_id_lead}},\r\n            \"institutionId\": {{controllerInstitutionId}}\r\n        }\r\n    ],\r\n    \"assignmentsToRemove\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/controller/institution/assign",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"controller",
								"institution",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "start control on report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('report control started', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(\"InControl\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{controller_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{controller_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/startControl/{{partner_id_lead}}/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"startControl",
								"{{partner_id_lead}}",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get expenditure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('expenditure retrieved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json().length).to.eql(1);\r",
									"    pm.variables.set('expenditureId', pm.response.json()[0].id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{controller_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{controller_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/control/expenditure/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"control",
								"expenditure",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "park expenditure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('expenditure parked', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()[0].parked).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test('certified amount correct', function() {\r",
									"    pm.expect(pm.response.json()[0].certifiedAmount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test('part of sample automatically ticked, when parked', function() {\r",
									"    pm.expect(pm.response.json()[0].partOfSample).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{controller_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{controller_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": {{expenditureId}},\r\n        \"partOfSample\": false,\r\n        \"certifiedAmount\": 0,\r\n        \"typologyOfErrorId\": null,\r\n        \"parked\": true,\r\n        \"verificationComment\": null\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/report/partner/control/expenditure/byPartnerId/{{partner_id_lead}}/byReportId/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"control",
								"expenditure",
								"byPartnerId",
								"{{partner_id_lead}}",
								"byReportId",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "finalize report (certification)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('report control finalized (certified)', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(\"Certified\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{controller_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{controller_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/report/partner/finalizeControl/{{partner_id_lead}}/{{report_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"report",
								"partner",
								"finalizeControl",
								"{{partner_id_lead}}",
								"{{report_id_1}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{admin_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{admin_email}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "specify_url_here"
		}
	]
}
