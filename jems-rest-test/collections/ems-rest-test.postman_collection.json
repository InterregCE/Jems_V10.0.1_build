{
	"info": {
		"_postman_id": "37313c96-4f29-4409-b1db-e02bc0707e08",
		"name": "ems-rest-test",
		"description": "Check EMS application for common use-cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "create users for following tests",
					"item": [
						{
							"name": "create admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a337fabd-71fc-4f8b-ab0a-fc66ee3b1d37",
										"exec": [
											"const username = pm.variables.get(\"admin_user_name\")",
											"const response = pm.response.json()",
											"",
											"pm.test('should be created with correct credentials', function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(response.email).to.equal(pm.variables.get(\"admin_user_email_to_create\"));",
											"",
											"    pm.environment.set(\"admin_email\", response.email);",
											"    pm.environment.set(\"admin_password\", response.email);",
											"});",
											"",
											"pm.test('should be created with correct name and surname', function () {",
											"    pm.expect(response.name).to.equal(pm.variables.get(\"admin_name\"));",
											"    pm.expect(response.surname).to.equal(pm.variables.get(\"admin_surname\"));",
											"});",
											"",
											"pm.test('should be created with correct role', function () {",
											"    pm.expect(response.userRole.name).to.contain('admin');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a1e43ba-c45e-443d-9942-5d6b0e3ab107",
										"exec": [
											"var uuid = require('uuid');",
											"const randomIdentifier = uuid.v4().substring(24, 32);",
											"",
											"pm.variables.set('admin_user_email_to_create', randomIdentifier + \"@admin.eu\");",
											"pm.variables.set('admin_name', pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set('admin_surname', pm.variables.replaceIn('{{$randomLastName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{admin_user_email_to_create}}\",\n\t\"name\": \"{{admin_name}}\",\n\t\"surname\": \"{{admin_surname}}\",\n    \"userRoleId\": 1\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "register applicant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9992d02-b8d9-4739-89fa-2e9daaa14071",
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('applicant_email', randomIdentifier + \"@applicant.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d408758b-5294-4d0b-b400-a1dad350d689",
										"exec": [
											"pm.test('applicant can register', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('applicant_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{applicant_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"password\": \"{{applicant_email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/registration",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "create programme user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "abfbcc3d-0ed2-4054-beb3-cd33ff29f909",
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('programme_user_email', randomIdentifier + \"@programme-user.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86ce0616-56b1-4c50-9247-1b5a00fb54ff",
										"exec": [
											"pm.test('programme user can be created', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('programme_user_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{programme_user_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"userRoleId\": \"2\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22f76590-13b6-4a65-a4f8-834f361f953e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9532918d-cd1d-47cf-bf2c-104b6ecaf514",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "retrieve and save available input language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42ef23ee-3f9a-4bae-9a7d-aecb3714a8f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be820e55-01c0-431f-bfef-18d8f30d6e01",
								"exec": [
									"pm.test('we can retrieve programme languages', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have input language available', function() {\r",
									"    const languages = pm.response.json();\r",
									"    pm.expect(languages).to.be.an('array');\r",
									"    const inputLanguage = languages.find(lang => lang.input);\r",
									"    pm.expect(inputLanguage).to.not.be.undefined;\r",
									"    console.log('There is input language ' + inputLanguage.code + ' enabled, we will use this during test');\r",
									"    pm.environment.set('inputLanguage', inputLanguage.code);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmelanguage",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmelanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef46a83f-27a8-42a6-95d1-3ab0bb5638ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "40c096d6-5289-48b5-9833-a40ccc8da46f",
								"exec": [
									"pm.test('we can retrieve programme priorities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme priority or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('totalElements');\r",
									"    if (response.totalElements > 0) {\r",
									"        const policies = response.content[0].programmePriorityPolicies;\r",
									"        if (policies.length) {\r",
									"            const policy = policies[0].programmeObjectivePolicy\r",
									"            console.log('There is already a policy ' + policy + ', which we will use for calls during this test');\r",
									"            pm.environment.set('programmePriorityPolicy', policy);\r",
									"        } else {\r",
									"            console.log('There is already a programme priority, but no policy. We have to create one.');\r",
									"            pm.environment.set('programmePriorityPolicy', null);\r",
									"        }\r",
									"    } else {\r",
									"        console.log('There are no any programme priorities yet. We need to create one.');\r",
									"        pm.environment.set('programmePriorityPolicy', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create programme priority with policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a06b4dad-8f2f-41d9-a19e-5ccd670ac5b7",
								"exec": [
									"function zeroPrefixedNum(num, size) {\r",
									"    var s = \"000000000\" + num;\r",
									"    return s.substr(s.length-size);\r",
									"}\r",
									"\r",
									"const programmeCode = zeroPrefixedNum(Math.floor(Math.random() * 1000), 4)\r",
									"pm.variables.set('programmeCode', programmeCode)\r",
									"\r",
									"if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"    console.log('There is no any programme priority policy we can use, so we need to create one.');\r",
									"    pm.variables.set(\r",
									"        'programmePriorityPolicies',\r",
									"        JSON.stringify([{\r",
									"            \"programmeObjectivePolicy\": \"AdvancedTechnologies\",\r",
									"            \"code\": \"AT\"\r",
									"        }])\r",
									"    );\r",
									"} else {\r",
									"    console.log('There is already a programme priority with policy, so we will use that one.');\r",
									"    pm.variables.set('programmePriorityPolicies', null);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "92893bdd-592d-4570-be04-8bf34527a083",
								"exec": [
									"pm.test('programme priority was created if needed', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme priority.')\r",
									"        pm.environment.set('programmePriorityPolicy', 'AdvancedTechnologies');\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT create new programme priority, no variable is changing.');\r",
									"        // pm.expect(pm.response.json().i18nFieldErrors.programmePriorityPolicies.i18nKey)\r",
									"        //     .to.eql(\"programme.priority.priorityPolicies.should.not.be.null\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{programmeCode}}\",\r\n    \"title\": \"API test Programme Priority {{programmeCode}}\",\r\n    \"objective\": \"PO1\",\r\n    \"programmePriorityPolicies\": {{programmePriorityPolicies}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2769eae9-d202-4510-b072-3701b861fc46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d313861-bd2a-48bd-ac7e-f37253cd7750",
								"exec": [
									"pm.test('we can retrieve programme funds', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme fund or we need to enable first one', function() {\r",
									"    const funds = pm.response.json().filter(f => f.selected);\r",
									"    if (funds.length > 0) {\r",
									"        const fundId = funds[0].id;\r",
									"        console.log('There is fund wth id ' + fundId);\r",
									"        pm.environment.set('programmeFundId', fundId);\r",
									"    } else {\r",
									"        console.log('There are no any programme funds yet enabled. We need to enable one.');\r",
									"        pm.environment.set('programmeFundId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then enable programme fund 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "715a46db-c3a9-4b83-a584-86f76fbede5e",
								"exec": [
									"if (pm.environment.get('programmeFundId') == null) {\r",
									"    console.log('There is no any programme fund enabled we can use, so we need to enable one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', 1);\r",
									"} else {\r",
									"    console.log('There is already a programme fund enabled, so we will use that one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', \"not-existing\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ed74ddb-6afd-4772-a59c-3bdd52c6d03b",
								"exec": [
									"pm.test('programme fund was enabled', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmeFundId') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We enabled programme fund id=1');\r",
									"        pm.environment.set('programmeFundId', 1);\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT enable new programme funds, no variable is changing.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"funds\": [\r\n        {\r\n            \"id\": {{programmeFundIdToBeEnabled}},\r\n            \"selected\": true\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "create call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "91f23e51-d482-4a94-ab5c-2b343d6c6f4e",
								"exec": [
									"const callName = pm.variables.replaceIn('{{$randomCatchPhrase}}')\r",
									"pm.variables.set(\r",
									"    'call_name_to_create',\r",
									"    callName.substr(0,150)\r",
									");\r",
									"\r",
									"var callDateStart = new Date();\r",
									"callDateStart.setDate(callDateStart.getDate() - 1);\r",
									"pm.variables.set('callDateStart', callDateStart.toISOString());\r",
									"\r",
									"var callDateEnd = new Date();\r",
									"callDateEnd.setDate(callDateEnd.getDate() + 10);\r",
									"pm.variables.set('callDateEnd', callDateEnd.toISOString());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "515c4487-125d-461f-8343-e7a5cc65b269",
								"exec": [
									"pm.test('call can be created', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"callId\", pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{call_name_to_create}}\",\n\t\"priorityPolicies\": [ \"{{programmePriorityPolicy}}\" ],\n    \"funds\": [{{programmeFundId}}],\n\t\"startDate\": \"{{callDateStart}}\",\n\t\"endDate\": \"{{callDateEnd}}\",\n    \"lengthOfPeriod\": 12\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/call",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup possible flatRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2b6db62-f0c3-4b58-8a3d-358fab9b8005",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf29bf8-70f6-41e9-acd0-ee3eb1f5c857",
								"exec": [
									"pm.test('call flatrate setup is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffCostFlatRateSetup\": {\r\n        \"rate\": 20,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"officeOnStaffFlatRateSetup\": {\r\n        \"type\": \"OfficeOnStaff\",\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"officeOnOtherFlatRateSetup\": {\r\n        \"type\": \"OfficeOnOther\",\r\n        \"rate\": 25,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"travelOnStaffFlatRateSetup\": {\r\n        \"type\": \"TravelOnStaff\",\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"otherOnStaffFlatRateSetup\": {\r\n        \"type\": \"OtherOnStaff\",\r\n        \"rate\": 40,\r\n        \"isAdjustable\": true\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/flatrate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"flatrate"
							]
						}
					},
					"response": []
				},
				{
					"name": "publish call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b2b91a1-2756-48b3-9c56-b9e008e020d3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0dbb3188-b6aa-4c06-9af4-bd8b42fcd836",
								"exec": [
									"pm.test('call is published successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/publish",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"publish"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dcca0f9c-7d43-477f-a5f1-e45a6d9b929a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66aad411-50f3-48ab-a3cc-b6614dad9d11",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ba3ec7f-4d31-4583-a0b4-aae814bfd8b9",
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "514ffe3e-fea0-4276-ac77-8fd45b207c48",
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "820649e2-c936-4620-a35a-c13ca05ecba4",
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d83ecf6-4040-4510-9f34-6733e1652aba",
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a808b7f6-6c47-4048-b3cf-ea9e088eeb5a",
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2ff11099-1bf4-425b-9f73-1f81185455b9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0ab48382-b411-4788-87de-3a2662d70814",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82da9d33-0188-4760-a2fa-1c125fc42185",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7c02b98-13e1-4054-90c0-1ccc7e34a638",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"\",\n\t\"surname\": \"\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d949680a-3cbe-45f0-b12d-7b8bb69f3840",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.should.not.be.empty');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c884baed-89ba-42e1-a4a1-542608ddd898",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userRoleId\": null\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99a893fb-4023-4ae5-b44d-2c7d2c730d20",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c609df03-0e20-42df-83e5-e64510f7516c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0727feaa-96bc-481f-a85c-e59092b20608",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58fde7f7-5625-482e-9a50-e1a1a3541755",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a04d248-13d2-4ecf-895c-90c340984e02",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ae4c3ab-62aa-4ebc-a231-4538d966c667",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.size.too.long');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"test-proj-this-is-a-very-long-name\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96573946-55c8-421c-b764-b2fe2d439bbc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1a031d30-29c1-498a-9277-5150a16ed072",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.should.not.be.empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"\",\n\t\"projectCallId\": null\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "37c5d858-96f4-4672-85ac-d0b80fc154c9",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce88c4e2-8582-47ae-b943-7ed5f3032ad2",
								"exec": [
									"const application = pm.response.json()\r",
									"\r",
									"pm.test('project should be created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application).to.have.property(\"id\");\r",
									"    pm.expect(application.id).not.eql(null);\r",
									"    pm.variables.set(\"projectId\", application.id);\r",
									"});\r",
									"\r",
									"pm.test('acronym should fit', function() {\r",
									"    pm.expect(application).to.have.property(\"acronym\");\r",
									"    pm.expect(application.acronym).to.eql(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('submission should be empty', function() {\r",
									"    pm.expect(application).to.have.property(\"firstSubmission\");\r",
									"    pm.expect(application.firstSubmission).to.eql(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"projectCallId\": {{callId}}\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1809771-2b2b-44ce-8780-1ed4382828e4",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"\r",
									"const projectDuration = pm.variables.replaceIn('{{$randomInt}}')\r",
									"pm.variables.set(\r",
									"    'project_duration',\r",
									"    (projectDuration % 999 + 1)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14383078-9cbd-47da-ad3e-198f21d68f8c",
								"exec": [
									"pm.test('project data should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": \"{{project_title}}\",\n\t\"duration\": {{project_duration}},\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2490ec7b-28ce-484c-9f45-9f9139f4d44b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e03cb8a-c346-4707-a4b8-bc5c4460f15b",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b18b114-1ba3-49e9-94cd-d6c9330ba1dc",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"id should fit\", function () {\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"    pm.expect(response.id).to.equal(pm.variables.get(\"projectId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"acronym should fit\", function () {\r",
									"    pm.expect(response).to.have.property(\"acronym\");\r",
									"    pm.expect(response.acronym).to.equal(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('title should fit', function() {\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"title\");\r",
									"    pm.expect(response.projectData.title).to.eql(pm.variables.get(\"project_title\"));\r",
									"});\r",
									"\r",
									"pm.test('specificObjective should fit', function() {\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"specificObjective\");\r",
									"    pm.expect(response.projectData.specificObjective).to.have.property(\"programmeObjectivePolicy\");\r",
									"    pm.expect(response.projectData.specificObjective.programmeObjectivePolicy)\r",
									"        .to.eql(pm.variables.get(\"programmePriorityPolicy\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8a0a207c-3f78-44f9-a5d0-e9a9a824c51e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5fd3433-c9db-489a-b426-d14cd200c04b",
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"-1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0eff617c-87a5-40d9-a2cf-f42ee9dbf31b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9a7b9b94-cf0d-429e-b357-9178c16f4b4e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "file upload to DRAFT",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70341a56-949a-4318-a3f3-369883d94dfa",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78ce60ae-5cdf-4c09-ad9b-a1ef389def81",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "71233de6-fe44-4b0e-8ebb-5f849388480a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2245154f-966b-4429-a07e-4adff7de8630",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve the uploaded file list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c08c42d-d106-4d7e-a5ee-b28d846d245b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6c543204-c5e1-421e-b77e-747302054e74",
								"exec": [
									"const file = pm.response.json().content[0];\r",
									"\r",
									"pm.test('applicant can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.variables.set('file_id',file.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "set description to uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb9a89b7-d61f-4b9d-a29a-872815cb1315",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d61f6011-fb13-40ae-a3fb-61cdd6634e6a",
								"exec": [
									"const file = pm.response.json();\r",
									"\r",
									"pm.test('applicant can specify description to a file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.id).to.equal(pm.variables.get('file_id'));\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.expect(file.description).to.equal('API test description');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "download uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af2a191a-e5c3-48d7-90c1-c262425b7c78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89978576-bad5-47f3-80c1-e2fb6b3dc3e2",
								"exec": [
									"pm.test('applicant can download previously-uploaded file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot create application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc3b9384-2725-4eed-89e7-9454207f3666",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "705101dc-f16e-4859-8e34-b3c6e71efdfe",
								"exec": [
									"pm.test('programme user should not be able to create project application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"should-not-create\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e51b5f4-ae99-45e1-b3de-75acf5d6bd74",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d45c34da-6c8b-4f96-9101-f80e2c0304da",
								"exec": [
									"pm.test('programme user should not be able to see files when application is DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user should not be able to see files because he cannot see project in DRAFT', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot upload file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "357d032a-2a96-4ed0-b02c-9528dd0c953b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8f6e0cd-5460-45ef-8e93-fa2ec8cabbb5",
								"exec": [
									"pm.test('programme user should not be able to upload APPLICANT file when he cannot read project itself', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot see project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot set description",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d1a5c5e-c32a-4e72-82c4-029184f1cba9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8e6215b-6568-4cd1-a6b8-5a7cd6882df2",
								"exec": [
									"pm.test('programme user should not be able to set description, when he cannot see DRAFT project', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot download file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf0f9269-023f-47f8-b3b9-8ced954b578d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1fbab829-34d2-47d5-a353-830b06070cd4",
								"exec": [
									"pm.test('programme user should not be able to download file, cause he cannot see application in DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "submit and resubmit application",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3665453-28f2-4eb6-bfcf-18b795b5e83b",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b733bb88-f0e5-4aa4-b109-db4b1ee81d73",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a401208-c4e5-4dd6-b940-89d528da3c56",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4718b75c-f9f8-4085-9cc4-7063b09e65ff",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53061f6a-b599-48d7-aee8-6acd2f252691",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "967e6375-9f87-4c25-853b-e7dbdddd86f9",
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check submitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4763e120-4eb2-4786-80c0-6515cff6270c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8c14c6d-6c21-4af3-9357-5e3706f6569c",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should be filled in', function() {\r",
									"    pm.expect(application.firstSubmission.updated).not.eql(null);\r",
									"    pm.variables.set('application_submission_time', application.firstSubmission.updated);\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be empty after first submission', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('submission and status should be equal', function() {\r",
									"    pm.expect(application.firstSubmission)\r",
									"        .deep.equal(application.projectStatus);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to SUBMITTED application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e72f89d-c936-47a8-9ea5-723ca1e1f065",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "060549bc-f538-4430-a4f7-a68b51b7097c",
								"exec": [
									"pm.test('applicant should not be able to upload file to SUBMITTED application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0c1d402a-5941-434e-a5bf-02f1161a889e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d848b703-bc63-4c99-896a-7d3f50ff2f9d",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('programme user can see files, when application is SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.content[0].name).to.equal('file.txt');\r",
									"    pm.expect(response.totalElements).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21726dc2-33fe-43e4-9937-11fed4a673c4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb77cf53-212c-45a4-919f-8ea6a060feb9",
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check returned application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26457be8-d326-4558-b5c0-6fa94bfcb32f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "083a6015-7c8e-403c-946e-1f95ecb036ed",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be RETURNED_TO_APPLICANT', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should still be empty', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13a3f54a-37ab-4319-9ca5-e5bcfe681c32",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "471b2c08-f219-4d9a-a845-1bc1e7a42f74",
								"exec": [
									"pm.test('program user should not be able to resubmit application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "293e9581-4051-48ee-b422-a8e869a2f3b5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9e8e00a1-4740-476d-b117-c22c400e498a",
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check resubmitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3e5683f-64b7-4df7-b8ea-540f9a5c4dd7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9e759a10-451f-4242-b813-6114bbe967fe",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be now filled in', function() {\r",
									"    pm.expect(application.lastResubmission).not.equal(null);\r",
									"    pm.expect(application.lastResubmission.updated).not.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter eligibility assessment (EA) and decision",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23b2d8fa-c40c-4b98-83cd-bec53de07503",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c488b4e-7730-469f-89cf-d10e93afbfc0",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce1ab293-321f-4c7b-b3e4-62535cfca18c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14e8b9d7-31d9-4e25-bbc9-0be3d0a8f231",
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "aplicant cannot enter EA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60b45982-f811-4ad2-9d0d-b57d7ec0b890",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cff02148-aeaa-41b0-8db2-cc3bb0f6ae03",
								"exec": [
									"pm.test('applicant should not be able to enter EA', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"this should not be processed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter EA once",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6503e168-6284-4221-88a4-d1efc20605f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc673686-3e2b-445d-9a46-74bdd16367fe",
								"exec": [
									"pm.test('program user can enter EA once', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('EA is part of the application detail', function() {\r",
									"    pm.expect(application).to.have.property(\"eligibilityAssessment\");\r",
									"    pm.expect(application.eligibilityAssessment).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('status of the application is not changed', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('EA result is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.result)\r",
									"        .to.eql(\"PASSED\");\r",
									"});\r",
									"\r",
									"pm.test('EA note is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.note)\r",
									"        .to.eql(\"status set to passed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"status set to passed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot enter EA twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7af5092a-8594-400e-90b0-bf3fca97cc94",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a9d5e7a-d41f-4af5-bc46-dc2f1e9070c6",
								"exec": [
									"pm.test('program user should not be able to enter EA second time', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"FAILED\",\r\n    \"note\": \"status set to failed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE without date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6033e7ea-3fdf-4282-b24c-c7ab51fba959",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "597a5cd3-1362-467b-b1bf-3ccc6b18dbc6",
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE without date', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nKey).to.eql('project.decision.date.unknown')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE with date in future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a18d7434-fe51-4953-9250-40594c0f1b74",
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 5);\r",
									"pm.variables.set('date_plus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f9e4e99-f3d4-452e-bed3-4a1d937a2a1d",
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE with date in future', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nFieldErrors.date.i18nKey)\r",
									"        .to.eql('project.status.date.should.be.in.past.or.present')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{date_plus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can change status to ELIGIBLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "62f6f93a-7bf3-4006-bf6e-179c2b9a078d",
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5);\r",
									"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62fd42bf-c65e-426e-97d9-9dffbb1d7e9b",
								"exec": [
									"pm.test('program user can change status to ELIGIBLE', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status decision date is set to date -5days', function() {\r",
									"    pm.expect(application.projectStatus.decisionDate)\r",
									"        .to.eql(pm.variables.get(\"eligibility_decision_date_minus_5\"));\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "609e2683-d923-43bf-a870-29ac29345d64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cae3020d-96ef-47a8-a76a-a33e6759960c",
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application to ELIGIBLE status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a6157ed0-6cc2-4b37-a48e-a74cb94eaa7f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d4d6cd84-611f-45f3-9510-e82d605564a6",
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set back to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to applicant user who resubmitted', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter quality assessment (QA)",
			"item": [
				{
					"name": "when SUBMITTED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e9131bea-ccd3-440c-87b4-3f0dab3bc86b",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1cea082c-52e5-4ff8-9550-f88f062f30e3",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1da60df-da63-4c97-b68f-f5646270a31f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50ddceb6-a0ca-4379-8a6c-fa1c63f6d06b",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0382c900-7f80-4b4c-85cc-794855dc4137",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7bcf1ec-ed3f-4c00-8a5f-e7d701b61c9f",
										"exec": [
											"pm.test('applicant should not be able to enter QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA once",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9d290ed2-536e-46a9-9a03-99bb5d07adda",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e2d18e2a-b918-4483-a48b-0d44bfaddea3",
										"exec": [
											"pm.test('program user can enter QA once', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('QA is part of the application detail', function() {\r",
											"    pm.expect(application).to.have.property(\"qualityAssessment\");\r",
											"    pm.expect(application.qualityAssessment).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test('status of the application is not changed', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
											"});\r",
											"\r",
											"pm.test('QA result is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.result)\r",
											"        .to.eql(\"RECOMMENDED_FOR_FUNDING\");\r",
											"});\r",
											"\r",
											"pm.test('QA note is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.note)\r",
											"        .to.eql(\"status set to recommended for funding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter QA twice Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67dbc651-bce2-4288-8229-f00735e548f4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b22d98be-4e3c-4023-ab97-e0f06ba3dca1",
										"exec": [
											"pm.test('program user should not be able to enter QA second time', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_WITH_CONDITIONS\",\r\n    \"note\": \"status set to recommended with conditions\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "when INELIGIBLE",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3080ea73-9fd2-436a-ab8e-58ee7d7eb7be",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "632add39-86eb-438c-be59-41eb04f35501",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ffd4a65a-4b3d-4ed9-acd0-23bc3a8cdf17",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58f6a26a-ce99-40c0-9241-b54569e11c51",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d039aad4-5f97-4a28-b931-e0dbe9901977",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83497076-2311-4ff7-9b2b-4ef2a8551e68",
										"exec": [
											"pm.test('program user can enter EA = FAILED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"FAILED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to INELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1147b3f1-87f2-4f95-b387-fbd2fd150ebc",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "001ff2c6-e647-4250-b7be-178fb4d73df6",
										"exec": [
											"pm.test('program user can change status to INELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to INELIGIBLE', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('INELIGIBLE');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"INELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA when INELIGIBLE already",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7d811d6b-0d1d-4c6b-abea-eb885feca034",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fa44af58-0c50-4cd4-a46a-00bc2a92e235",
										"exec": [
											"pm.test('applicant should not be able to enter QA when INELIGIBLE state already', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter funding decision (FD)",
			"item": [
				{
					"name": "with QA and ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68fcb10f-3c7c-438d-b27a-95d1653e6829",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49763651-6f5d-4a18-bc41-76cb1b13a166",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f8907b7e-7199-4e07-9ccc-57b0194a199a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4102abef-74a6-4c44-962e-670114b83d85",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b27fd717-4149-4941-916a-ec652886ae1a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2862941-d130-47f3-9879-9ff98c027561",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "38e444be-92d7-4d30-abea-57ec5dc0daf7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70aaa846-6914-461c-8635-a78a18dd873b",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f4534855-206f-45ac-864f-4251eeb362ef",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0b2f85e-7c7b-422b-b6e9-0353b3ffa20a",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed7f4f43-7015-4ef1-85d0-c09de5757d98",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "386b2c36-f09e-4dc7-be7f-24426bff208c",
										"exec": [
											"pm.test('program user can change status to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"note\": \"changed to approved\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "without ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8c18a979-ee69-4fd1-aaf9-7eb06abd6b81",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16eeb089-e99d-462f-aeea-5819d54e3b89",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9fcb513a-c327-4df0-89ca-160b6f270f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "005fb03a-a3de-4a05-9210-6cf81d51dc98",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9581268b-d79c-4aca-a30d-af9aee713eed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f56cad2-60e4-4f94-8f77-233d3c39654b",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without ED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29f67a5f-2db3-44b6-84a8-4f2c324f8215",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7522b40-b324-4972-a98a-31b5e79d06bf",
										"exec": [
											"pm.test('program user should not be able to enter funding without ED', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "without QA",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "87860565-367d-4ac1-9c88-c788706c307c",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "baf23ce7-23f1-4eea-b6dc-8256ed857915",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0906d493-ebc9-4b48-9b4f-578a7b0fc27b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1eebc83-3d69-4654-8da7-83ca96b9f751",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e532fc58-3d85-4214-9d56-62ed1362bc49",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d3b3a79-93a2-4871-9c16-cb2e76e37d70",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc155207-3ed5-4fac-bbaa-f9aa01534118",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51ce0913-cecc-4bf9-9f03-fdd368e597e0",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ce692204-4021-466f-8be3-a1ac8c8c45bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9de8d4ad-c46e-4316-82a2-bfa8ea48ddfc",
										"exec": [
											"pm.test('program user should not be able to enter funding without QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "enter FD, return and resubmit",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7c35c80b-9c86-4eb6-9b9a-adcc35eb65fd",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8d5c2f0c-2473-4985-ae52-976e06858173",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e9ace359-7796-4325-a34c-52bc9d52bc5f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "204879d6-31d2-4d65-9949-554d3596eaad",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c8bc25f-9729-45ab-88d4-de7f3b12f6d4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da6aaaab-1c50-4225-8de0-a78920e54351",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "051f44b6-9065-4172-8b7d-d1ab7dabee5a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89c13f7f-b66d-41b5-aed7-e08321a6387d",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10135e34-ec97-4d33-9b03-4d965f239d05",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ed52dfc-33a6-4449-bf99-9e70a03fbd1a",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD - APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da0f42fc-388d-4f56-a768-2a844dca741f",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f537b282-06ca-4e3e-b524-1891d40f2f2c",
										"exec": [
											"pm.test('program user can change status to APPROVED_WC', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved with conditions\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED_WITH_CONDITIONS\",\r\n    \"note\": \"changed to approved with conditions\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can return application after FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "775fe88a-a588-47fb-827d-0251ce8f1ced",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a1ec805-29ac-41ba-9e8f-1303ad1cb96d",
										"exec": [
											"pm.test('program user can return application back to user', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant can resubmit back to APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4d7eee73-747c-4e3c-bbf3-dbc77feb57b5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65990ac2-a66f-4fdc-8868-d1264d5465c1",
										"exec": [
											"pm.test('applicant should be able to resubmit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be back to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application).to.have.property('lastResubmission');\r",
											"    pm.expect(application).to.have.property('projectStatus');\r",
											"    pm.expect(application.lastResubmission)\r",
											"        .deep.eql(application.projectStatus);\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to applicant who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "programm user can set final funding to APPROVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "278cf626-7473-4908-99c9-65c03605a2dd",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 2);\r",
											"pm.variables.set('funding_decision_date_minus_2', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7247e3f0-e7e3-490b-a86f-c239e4713e1e",
										"exec": [
											"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to day-5', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_2\"));\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application.fundingDecision).to.have.property('id');\r",
											"    pm.expect(application.projectStatus).to.have.property('id');\r",
											"    // fundingDecision is still referring to the first funding attempt\r",
											"    pm.expect(application.fundingDecision.id)\r",
											"        .not.eql(application.projectStatus.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"date\": \"{{funding_decision_date_minus_2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Partner and Associated Organization",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b16fd831-8ca8-4b11-a020-5bae0807c5dd",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a93206b5-cbe7-49ed-aefe-a27176e56b82",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17237ad6-d17c-4070-a4f2-51b8ce40c32d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca6a62a6-fe98-4d75-babf-477fd60a9bd9",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdA', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner A\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75b1423e-55a2-4194-8cb4-5f7267fb7d7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "204aa51c-f892-4c94-a085-4612584c8494",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner B', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdB', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner B\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner B\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner A LeadPartner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50671778-5107-4393-a830-7d59abbba612",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "808afbab-7b92-4477-a3fd-bc8f57c9bc39",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can update project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A LEAD\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdA}}\",\r\n    \"abbreviation\": \"Partner A LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e0a277c3-2f0c-4790-afe4-8a86d703b29e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5943d426-ffea-477c-b846-1e5e910f38fa",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot update Partner B to be LEAD when A already is', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									"\r",
									"pm.test('correct id is sent to FE in error response', function() {\r",
									"    pm.expect(error.i18nArguments).to.eql([pm.variables.get('partnerIdA') + \"\", \"Partner A LEAD\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - force",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "667ac4b2-b91a-4f34-8ade-996250ee50c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d8fb7c9f-a0a6-4b67-8fdd-27c315d5a1f5",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can force to update project Partner B to be LEAD', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d12d9580-fae8-48c2-9ecd-fffff8be88a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "315e3d71-8d6c-43a3-a3c8-cac90b37e93c",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot create LeadPartner C cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - force fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a8f2447d-b132-42f9-8040-fdb95c37be59",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c46b9008-fd03-4148-900f-b47ad7064b89",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot override LeadPartner A cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.oldLeadPartnerId.is.not.lead\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6bca5832-bf85-4b0b-94c8-094967b30b17",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "766aabf1-8d10-4b57-b791-1bd1611baf53",
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with address', function() {\r",
									"    pm.expect(organization.address.street).to.eql(\"test street\");\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with both contacts', function() {\r",
									"    pm.expect(organization.contacts).to.have.deep.members([\r",
									"        {\r",
									"            \"type\": \"LegalRepresentative\",\r",
									"            \"title\": null,\r",
									"            \"firstName\": \"Rafael\",\r",
									"            \"lastName\": \"Nadal\",\r",
									"            \"email\": \"rafael@atp.com\",\r",
									"            \"telephone\": \"+6 30 216 896\"\r",
									"        },\r",
									"        {\r",
									"            \"type\": \"ContactPerson\",\r",
									"            \"title\": \"Champion\",\r",
									"            \"firstName\": \"Roger\",\r",
									"            \"lastName\": \"Federer\",\r",
									"            \"email\": \"roger@atp.com\",\r",
									"            \"telephone\": \"+6 20 542 265\"\r",
									"        }\r",
									"    ]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdA}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdA}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdA}}\",\r\n    \"address\": {\r\n        \"street\": \"test street\"\r\n    },\r\n    \"contacts\": [\r\n        {\r\n            \"type\": \"ContactPerson\",\r\n            \"title\": \"Champion\",\r\n            \"firstName\": \"Roger\",\r\n            \"lastName\": \"Federer\",\r\n            \"email\": \"roger@atp.com\",\r\n            \"telephone\": \"+6 20 542 265\"\r\n        },\r\n        {\r\n            \"type\": \"LegalRepresentative\",\r\n            \"firstName\": \"Rafael\",\r\n            \"lastName\": \"Nadal\",\r\n            \"email\": \"rafael@atp.com\",\r\n            \"telephone\": \"+6 30 216 896\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea774770-51a8-4711-8e83-981335c4b406",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b008c5d-9f0f-4535-910d-70757f24c210",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdD', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner D\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb993714-f3e1-4bc1-a2df-70ed71847af7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3aff7741-5863-4c00-b3bc-73d09dc0a4d6",
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization for Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdD'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdD'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdD}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdD}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdD}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete project partner D together with AO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa86c68f-c57f-4bd1-8465-a3784481eca8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04a00034-c5bc-4b69-bd0d-fbf07f3d29ec",
								"exec": [
									"pm.test('applicant can delete project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partnerIdD}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partnerIdD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check AssociatedOrganization D deleted A stays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d898d19c-18af-432c-8e8c-26a6d0708185",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c76a1737-dbb1-4271-b00c-418c804bd70c",
								"exec": [
									"const page = pm.response.json();\r",
									"\r",
									"pm.test('applicant can fetch associated organizations for Project', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('there is now only one associated organization', function() {\r",
									"    pm.expect(page.totalElements).to.eql(1);\r",
									"    pm.expect(page.content[0].nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(page.content[0].nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('when only one associated organization, sortNumber is 1', function() {\r",
									"    pm.expect(page.content[0].sortNumber).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d43f648-7b22-4b68-b678-0be21270586b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0141e3e1-5655-42f1-831e-3b5c2de9ae1f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Partner - Details",
			"item": [
				{
					"name": "just create project application",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0833b27f-f111-4eec-a01e-41799cd96045",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc5e2c8f-740c-4b3a-b5be-7c5c4e523263",
										"exec": [
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Partner 1 - Details",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8c62adaa-4157-4a57-84ad-b3d6628a177b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6cd82ca4-5ec3-46d3-a32a-0881d2c3cbca",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner"
									]
								}
							},
							"response": []
						},
						{
							"name": "set both addresses to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8429a70-f38e-4017-afe9-aea19f4a173d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "159de341-4796-433c-a24c-c97b5d844fff",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set addresses to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('both addresses are there', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"street\": \"test org\"\r\n    },\r\n    {\r\n        \"type\": \"Department\",\r\n        \"street\": \"test dprt\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove 1st address and update 2nd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb8f9e85-d364-4c59-8ba5-026e9331dcdb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2ca28857-3f84-4e9f-a6d9-ab32c16b2404",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"SK\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\": \"SK\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set both contacts to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d78a7c91-c2c3-4029-b17c-d09dcfe43012",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a349cbdd-2749-4e6b-9cb1-adf1452c5bd3",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set contacts to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('both contacts are there', function() {\r",
											"    pm.expect(partner.contacts.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"firstName\": \"test LR\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"firstName\": \"test CP\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove 1st contact and update 2nd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b86f64b8-06bd-46da-bd0c-e01dcf279fe7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0d3ff234-c4cc-4783-9099-9acffb47149b",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove contacts from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one contact is now returned', function() {\r",
											"    pm.expect(partner.contacts.length).to.eql(1);\r",
											"}); \r",
											"\r",
											"pm.test('contact is saved correctly', function() {\r",
											"    const contact = partner.contacts[0];\r",
											"    pm.expect(contact.type).to.eql(\"ContactPerson\");\r",
											"    pm.expect(contact.title).to.eql(\"Bachelor\");\r",
											"    pm.expect(contact.firstName).to.eql(\"Donald\");\r",
											"    pm.expect(contact.lastName).to.eql(\"Trump\");\r",
											"    pm.expect(contact.email).to.eql(\"mc.donald@whitehouse.gov\");\r",
											"    pm.expect(contact.telephone).to.eql(\"202-456-6213\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"Bachelor\",\r\n        \"firstName\": \"Donald\",\r\n        \"lastName\": \"Trump\",\r\n        \"email\": \"mc.donald@whitehouse.gov\",\r\n        \"telephone\": \"202-456-6213\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "set motivation to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa91c918-5b0b-467e-b631-e620539f9044",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "114039c8-1784-488b-afd2-86e3adb01bbb",
										"exec": [
											"const motivation = pm.response.json().motivation;\r",
											"\r",
											"pm.test('applicant can set motivation to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('motivation is set correctly', function() {\r",
											"    pm.expect(motivation.organizationRelevance).to.eql('This project is definitely relevant enough to be founded.');\r",
											"    pm.expect(motivation.organizationRole).to.eql('test latin àâçéèêëîïôùûüÿ');\r",
											"    pm.expect(motivation.organizationExperience).to.eql('We have 16 millions years of experience in this particular area.');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"organizationRelevance\": \"This project is definitely relevant enough to be founded.\",\r\n    \"organizationRole\": \"test latin àâçéèêëîïôùûüÿ\",\r\n    \"organizationExperience\": \"We have 16 millions years of experience in this particular area.\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/motivation",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id}}",
										"motivation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eab8bdfb-b7ee-4fcd-9f29-72fe771b5df1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "82730d4e-33dd-4a27-b8ad-b431e326772d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Partner 2 - Budget 1",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "77312422-ebe8-424c-8c6b-f391121dff26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ed99cb1c-76b5-4824-80dc-335ff2301aea",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10b7ee5e-4558-4040-8dc7-8587a8bc59b9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66560f73-5de3-4e5b-b782-83a5fe340ed9",
										"exec": [
											"const staffCosts = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(48800);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Project Manager\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 10,\r\n        \"pricePerUnit\": 4500\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Doctor\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 1,\r\n        \"pricePerUnit\": 3800\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/staffcost",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"staffcost"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - travel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9169799-083d-465b-aae8-091b9ae7e1d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "621e6bfd-2dbe-433a-ad39-365a438f8699",
										"exec": [
											"pm.test('applicant can set budgettravel', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('travel is set correctly', function() {\r",
											"    const travel = pm.response.json();\r",
											"    pm.expect(travel.length).to.eql(1);\r",
											"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
											"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
											"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Gran Canaria');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/travel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"travel"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - infrastructure",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0b83c3b-920d-4afe-adf6-428e9ce482c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a4a71b2-613a-4d91-b059-f878878801e6",
										"exec": [
											"pm.test('applicant can set infrastructure budget', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('infrastructure budget is set correctly', function() {\r",
											"    const infrastructure = pm.response.json();\r",
											"    pm.expect(infrastructure.length).to.eql(1);\r",
											"    pm.expect(infrastructure[0].numberOfUnits).to.eql(2);\r",
											"    pm.expect(infrastructure[0].pricePerUnit).to.eql(0.5);\r",
											"    pm.expect(infrastructure[0].rowSum).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Dell Aspiron');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Dell Aspiron\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 0.5\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/infrastructure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"infrastructure"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5069af66-70f2-4cd9-9fa7-4ada74162c2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5e81c74d-da9e-4337-9c90-6af9556edfcc",
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc97a677-e7f0-48b2-b032-0b42c49826e5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05084ffd-23e8-49e0-8c6e-b2f344575d3b",
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(53681.18);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "set staff costs flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d601115a-1d90-4736-8992-9c76e0cefa6c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fdbec71c-1f2e-47cf-80c7-c8b6e2c805cb",
										"exec": [
											"pm.test('applicant can set staffCosts flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75876d13-7fcb-4952-a170-b5bf67298c5a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df64c886-1849-447d-a612-e01f3ea169ff",
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(1.29);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f27ce355-0e5c-460e-beb3-c54eb7867e6b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98556c85-5ff7-4131-9833-49d2fd0ce846",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Partner 3 - Budget 2 (Lead)",
					"item": [
						{
							"name": "create project Lead partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "81782c14-868e-47e4-9995-7235ebe42a8e",
										"exec": [
											"const partnerAbbr = pm.variables.replaceIn('{{$randomAbbreviation}}')\r",
											"pm.variables.set(\r",
											"    'partner_abbreviation',\r",
											"    partnerAbbr\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1630e975-2aea-4764-8ae0-55d1cce26312",
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_lead', partner.id);\r",
											"});\r",
											"\r",
											"pm.test('project partner has correct abbreviation', function() {\r",
											"    pm.expect(partner.abbreviation).to.eql(pm.variables.get('partner_abbreviation'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{partner_abbreviation}}\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs to Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "22b394b4-9513-401d-88bf-8990c629ec0c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbe8f488-e533-4500-b3c9-7ca3b086e87c",
										"exec": [
											"const staffCosts = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(22000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Teachers\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 8800\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Students\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 22,\r\n        \"pricePerUnit\": 200\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/staffcost",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"staffcost"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate to Lead Partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff5514de-799a-4c3e-9d14-dc0b7b7354e6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d47153ff-13d4-4642-825e-a50c2e4bd7fd",
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total for Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16626d5f-a022-41fe-8567-e962e2ff36ac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d57fd8e-05a8-4230-8960-3be013d190d2",
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(24200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ea72d4b-ba58-48a8-9093-95bc17b1704c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c270d369-f78f-446a-a7d4-7e87888822d7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "check project budget for all partners",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea2a3f3b-8560-46f7-8a3f-518e5b230f62",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0bcc891-c746-4d8f-92a3-ad816c7b81f8",
								"exec": [
									"pm.test('project budget can be retrieved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both partners are returned', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    pm.expect(res).to.have.length(3);\r",
									"});\r",
									"\r",
									"pm.test('partners are sorted', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.id).to.eql(pm.variables.get('partner_id_lead'));\r",
									"    pm.expect(res[2].partner.id).to.eql(pm.variables.get('partner_id'));\r",
									"});\r",
									"\r",
									"pm.test('partners have correct sort numbers', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.sortNumber).to.eql(1);\r",
									"    pm.expect(res[1].partner.sortNumber).to.eql(2);\r",
									"    pm.expect(res[2].partner.sortNumber).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test('partners have correct data filled in', function() {\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    pm.expect(res[0].staffCosts).to.eql(22000.0);\r",
									"    pm.expect(res[0].travelCosts).to.eql(0);\r",
									"    pm.expect(res[0].externalCosts).to.eql(0);\r",
									"    pm.expect(res[0].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[0].infrastructureCosts).to.eql(0);\r",
									"    pm.expect(res[0].officeAndAdministrationCosts).to.eql(2200.0);\r",
									"    pm.expect(res[0].totalSum).to.eql(24200);\r",
									"\r",
									"    pm.expect(res[1].partner.country).to.eql('SK');\r",
									"\r",
									"    pm.expect(res[2].staffCosts).to.eql(0.11);\r",
									"    pm.expect(res[2].travelCosts).to.eql(0.18);\r",
									"    pm.expect(res[2].externalCosts).to.eql(0);\r",
									"    pm.expect(res[2].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[2].infrastructureCosts).to.eql(1);\r",
									"    pm.expect(res[2].officeAndAdministrationCosts).to.eql(0);\r",
									"    pm.expect(res[2].totalSum).to.eql(1.29);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/budget",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"budget"
							]
						}
					},
					"response": []
				},
				{
					"name": "set co-financing to Lead Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f195e26-2013-4d17-a32d-c8dbb777c716",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c4fb9cc4-c905-431b-ab32-4f458f375d57",
								"exec": [
									"const finances = pm.response.json().finances;\r",
									"const contributions = pm.response.json().partnerContributions;\r",
									"\r",
									"pm.test('applicant can set Co-Finaning', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('financing and funds are correct', function() {\r",
									"    pm.expect(finances[0].percentage).to.eql(75);\r",
									"    pm.expect(finances[0].fund).to.not.be.empty;\r",
									"    pm.expect(finances[1].percentage).to.eql(25);\r",
									"    pm.expect(finances[1].fund).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test('1st contribution is correct', function() {\r",
									"    pm.expect(contributions[0].name).to.eql(pm.variables.get('partner_abbreviation'));\r",
									"    pm.expect(contributions[0].status).to.eql('Private');\r",
									"    pm.expect(contributions[0].isPartner).to.be.true;\r",
									"    pm.expect(contributions[0].amount).to.eql(6200);\r",
									"});\r",
									"\r",
									"pm.test('2nd contribution is correct', function() {\r",
									"    pm.expect(contributions[1].name).to.eql('Source of money 01');\r",
									"    pm.expect(contributions[1].status).to.eql('Public');\r",
									"    pm.expect(contributions[1].isPartner).to.be.false;\r",
									"    pm.expect(contributions[1].amount).to.eql(10000);\r",
									"});\r",
									"\r",
									"pm.test('3rd contribution is correct', function() {\r",
									"    pm.expect(contributions[2].name).to.eql('Source of money 02');\r",
									"    pm.expect(contributions[2].status).to.eql('AutomaticPublic');\r",
									"    pm.expect(contributions[2].isPartner).to.be.false;\r",
									"    pm.expect(contributions[2].amount).to.eql(5000);\r",
									"});\r",
									"\r",
									"pm.test('4th contribution is correct', function() {\r",
									"    pm.expect(contributions[3].name).to.eql('Source of money 03');\r",
									"    pm.expect(contributions[3].status).to.eql('Private');\r",
									"    pm.expect(contributions[3].isPartner).to.be.false;\r",
									"    pm.expect(contributions[3].amount).to.eql(3000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"finances\": [\r\n        {\r\n            \"percentage\": 25\r\n        },\r\n        {\r\n            \"percentage\": 75,\r\n            \"fundId\": {{programmeFundId}}\r\n        }\r\n    ],\r\n    \"partnerContributions\": [\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 01\",\r\n            \"status\": \"Public\",\r\n            \"amount\": 10000\r\n        },\r\n        {\r\n            \"isPartner\": true,\r\n            \"name\": \"THIS NAME SHOULD BE IGNORED\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 6200\r\n        },\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 02\",\r\n            \"status\": \"AutomaticPublic\",\r\n            \"amount\": 5000\r\n        },\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 03\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 3000\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/cofinancing",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"cofinancing"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "657ea539-9752-4822-9fa5-3dbd840fe8f0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "30622d9b-2d13-43fd-a8de-9941a8264c4c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{admin_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{admin_email}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f64cfdbe-1022-4648-b8df-97a963a5a566",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "feb2301e-66a4-4095-a127-2206a9e3fba6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7e81a1c9-e994-47e0-be4c-916c2e6cc013",
			"key": "url",
			"value": "specify_url_here"
		}
	],
	"protocolProfileBehavior": {}
}