{
	"info": {
		"_postman_id": "f74ade6a-a434-4329-8579-9acedd483319",
		"name": "ems-rest-test",
		"description": "Check EMS application for common use-cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "create users for following tests",
					"item": [
						{
							"name": "create admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const username = pm.variables.get(\"admin_user_name\")",
											"const response = pm.response.json()",
											"",
											"pm.test('should be created with correct credentials', function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(response.email).to.equal(pm.variables.get(\"admin_user_email_to_create\"));",
											"",
											"    pm.environment.set(\"admin_email\", response.email);",
											"    pm.environment.set(\"admin_password\", response.email);",
											"});",
											"",
											"pm.test('should be created with correct name and surname', function () {",
											"    pm.expect(response.name).to.equal(pm.variables.get(\"admin_name\"));",
											"    pm.expect(response.surname).to.equal(pm.variables.get(\"admin_surname\"));",
											"});",
											"",
											"pm.test('should be created with correct role', function () {",
											"    pm.expect(response.userRole.name).to.contain('admin');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"const randomIdentifier = uuid.v4().substring(24, 32);",
											"",
											"pm.variables.set('admin_user_email_to_create', randomIdentifier + \"@admin.eu\");",
											"pm.variables.set('admin_name', pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set('admin_surname', pm.variables.replaceIn('{{$randomLastName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{admin_user_email_to_create}}\",\n\t\"name\": \"{{admin_name}}\",\n\t\"surname\": \"{{admin_surname}}\",\n    \"userRoleId\": 1\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "register applicant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('applicant_email', randomIdentifier + \"@applicant.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can register', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('applicant_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{applicant_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"password\": \"{{applicant_email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/registration",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "create programme user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('programme_user_email', randomIdentifier + \"@programme-user.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programme user can be created', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('programme_user_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{programme_user_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"userRoleId\": \"2\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "retrieve and save available input language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme languages', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have input language available', function() {\r",
									"    const languages = pm.response.json();\r",
									"    pm.expect(languages).to.be.an('array');\r",
									"    const inputLanguage = languages.find(lang => lang.input);\r",
									"    pm.expect(inputLanguage).to.not.be.undefined;\r",
									"    console.log('There is input language ' + inputLanguage.code + ' enabled, we will use this during test');\r",
									"    pm.environment.set('inputLanguage', inputLanguage.code);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmelanguage",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmelanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme priorities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme priority or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('totalElements');\r",
									"    if (response.totalElements > 0) {\r",
									"        const policies = response.content[0].programmePriorityPolicies;\r",
									"        if (policies.length) {\r",
									"            const policy = policies[0].programmeObjectivePolicy\r",
									"            console.log('There is already a policy ' + policy + ', which we will use for calls during this test');\r",
									"            pm.environment.set('programmePriorityPolicy', policy);\r",
									"        } else {\r",
									"            console.log('There is already a programme priority, but no policy. We have to create one.');\r",
									"            pm.environment.set('programmePriorityPolicy', null);\r",
									"        }\r",
									"    } else {\r",
									"        console.log('There are no any programme priorities yet. We need to create one.');\r",
									"        pm.environment.set('programmePriorityPolicy', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create programme priority with policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function zeroPrefixedNum(num, size) {\r",
									"    var s = \"000000000\" + num;\r",
									"    return s.substr(s.length-size);\r",
									"}\r",
									"\r",
									"const programmeCode = zeroPrefixedNum(Math.floor(Math.random() * 1000), 4)\r",
									"pm.variables.set('programmeCode', programmeCode)\r",
									"\r",
									"if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"    console.log('There is no any programme priority policy we can use, so we need to create one.');\r",
									"    pm.variables.set(\r",
									"        'programmePriorityPolicies',\r",
									"        JSON.stringify([{\r",
									"            \"programmeObjectivePolicy\": \"AdvancedTechnologies\",\r",
									"            \"code\": \"AT\"\r",
									"        }])\r",
									"    );\r",
									"} else {\r",
									"    console.log('There is already a programme priority with policy, so we will use that one.');\r",
									"    pm.variables.set('programmePriorityPolicies', null);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme priority was created if needed', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme priority.')\r",
									"        pm.environment.set('programmePriorityPolicy', 'AdvancedTechnologies');\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT create new programme priority, no variable is changing.');\r",
									"        // pm.expect(pm.response.json().i18nFieldErrors.programmePriorityPolicies.i18nKey)\r",
									"        //     .to.eql(\"programme.priority.priorityPolicies.should.not.be.null\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{programmeCode}}\",\r\n    \"title\": \"API test Programme Priority {{programmeCode}}\",\r\n    \"objective\": \"PO1\",\r\n    \"programmePriorityPolicies\": {{programmePriorityPolicies}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme funds', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme fund or we need to enable first one', function() {\r",
									"    const funds = pm.response.json().filter(f => f.selected);\r",
									"    if (funds.length > 0) {\r",
									"        const fundId = funds[0].id;\r",
									"        console.log('There is fund wth id ' + fundId);\r",
									"        pm.environment.set('programmeFundId', fundId);\r",
									"    } else {\r",
									"        console.log('There are no any programme funds yet enabled. We need to enable one.');\r",
									"        pm.environment.set('programmeFundId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then enable programme fund 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('programmeFundId') == null) {\r",
									"    console.log('There is no any programme fund enabled we can use, so we need to enable one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', 1);\r",
									"} else {\r",
									"    console.log('There is already a programme fund enabled, so we will use that one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', \"not-existing\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme fund was enabled', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmeFundId') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We enabled programme fund id=1');\r",
									"        pm.environment.set('programmeFundId', 1);\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT enable new programme funds, no variable is changing.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"funds\": [\r\n        {\r\n            \"id\": {{programmeFundIdToBeEnabled}},\r\n            \"selected\": true\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme lumpSum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('we can retrieve programme lump sums', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme lump sum or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    if (response.length > 0) {\r",
									"        console.log('There is already a lumpSum ' + response[0].name + ' with id=' + response[0].id + ', which we will use for calls during this test');\r",
									"        pm.environment.set('programmeLumpSumId', response[0].id);\r",
									"    } else {\r",
									"        console.log('There are no any programme lumpSums yet. We need to create one.');\r",
									"        pm.environment.set('programmeLumpSumId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/costOption/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create splittable programme lumpSum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get('programmeLumpSumId') == null) {\r",
									"    console.log('There is no any programme lump sum we can use, so we need to create one.');\r",
									"    pm.variables.set('lumpSumName', '\\\"[API test] splittable\\\"');\r",
									"} else {\r",
									"    console.log('There is already a programme lump sum, so we will use that one.');\r",
									"    pm.variables.set('lumpSumName', null);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme lump sum was created (as it was needed)', function() {\r",
									"    if (pm.environment.get('programmeLumpSumId') == null) {\r",
									"        const response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme lump sum with id=' + response.id);\r",
									"        pm.environment.set('programmeLumpSumId', response.id);\r",
									"    } else {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"        console.log('We did an invalid POST to NOT create new lump sum.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": {{lumpSumName}},\r\n    \"cost\": 10000,\r\n    \"splittingAllowed\": true,\r\n    \"phase\": \"Preparation\",\r\n    \"categories\": [\"StaffCosts\", \"OfficeAndAdministrationCosts\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costOption/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "unify data in splittable programme lumpSum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme lump sum was created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('programme lump sum was created', function() {\r",
									"    const lumpSum = pm.response.json();\r",
									"    pm.expect(lumpSum.name).to.eql(\"[API test] splittable\");\r",
									"    pm.expect(lumpSum.cost).to.eql(10000);\r",
									"    pm.expect(lumpSum.splittingAllowed).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{programmeLumpSumId}},\r\n    \"name\": \"[API test] splittable\",\r\n    \"cost\": 10000,\r\n    \"splittingAllowed\": true,\r\n    \"phase\": \"Preparation\",\r\n    \"categories\": [\"StaffCosts\", \"OfficeAndAdministrationCosts\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costOption/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costOption",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "create call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const callName = pm.variables.replaceIn('{{$randomCatchPhrase}}')\r",
									"pm.variables.set(\r",
									"    'call_name_to_create',\r",
									"    callName.substr(0,150)\r",
									");\r",
									"\r",
									"var callDateStart = new Date();\r",
									"callDateStart.setDate(callDateStart.getDate() - 1);\r",
									"pm.variables.set('callDateStart', callDateStart.toISOString());\r",
									"\r",
									"var callDateEnd = new Date();\r",
									"callDateEnd.setDate(callDateEnd.getDate() + 10);\r",
									"pm.variables.set('callDateEnd', callDateEnd.toISOString());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call can be created', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"callId\", pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{call_name_to_create}}\",\n\t\"priorityPolicies\": [ \"{{programmePriorityPolicy}}\" ],\n    \"funds\": [{{programmeFundId}}],\n\t\"startDate\": \"{{callDateStart}}\",\n\t\"endDate\": \"{{callDateEnd}}\",\n    \"lengthOfPeriod\": 12\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/call",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup possible flatRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call flatrate setup is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffCostFlatRateSetup\": {\r\n        \"rate\": 20,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"officeAndAdministrationOnStaffCostsFlatRateSetup\": {\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"officeAndAdministrationOnDirectCostsFlatRateSetup\": {\r\n        \"rate\": 25,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"travelAndAccommodationOnStaffCostsFlatRateSetup\": {\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    \"otherCostsOnStaffCostsFlatRateSetup\": {\r\n        \"rate\": 40,\r\n        \"isAdjustable\": true\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/flatrate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"flatrate"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup lump sums to call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call lump sum is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{{programmeLumpSumId}}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "publish call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('call is published successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/publish",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"publish"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"\",\n\t\"surname\": \"\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.should.not.be.empty');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userRoleId\": null\n}"
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.size.too.long');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"test-proj-this-is-a-very-long-name\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.should.not.be.empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"\",\n\t\"projectCallId\": null\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json()\r",
									"\r",
									"pm.test('project should be created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application).to.have.property(\"id\");\r",
									"    pm.expect(application.id).not.eql(null);\r",
									"    pm.variables.set(\"projectId\", application.id);\r",
									"});\r",
									"\r",
									"pm.test('acronym should fit', function() {\r",
									"    pm.expect(application).to.have.property(\"acronym\");\r",
									"    pm.expect(application.acronym).to.eql(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('submission should be empty', function() {\r",
									"    pm.expect(application).to.have.property(\"firstSubmission\");\r",
									"    pm.expect(application.firstSubmission).to.eql(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"projectCallId\": {{callId}}\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"\r",
									"const projectDuration = pm.variables.replaceIn('{{$randomInt}}')\r",
									"pm.variables.set(\r",
									"    'project_duration',\r",
									"    (projectDuration % 999 + 1)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project data should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ],\n\t\"duration\": {{project_duration}},\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"id should fit\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"    pm.expect(response.id).to.equal(pm.variables.get(\"projectId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"acronym should fit\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"acronym\");\r",
									"    pm.expect(response.acronym).to.equal(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('title should fit', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"title\");\r",
									"    const title = pm.response.json().projectData.title.find(title => title.language === pm.variables.get('inputLanguage')).translation;\r",
									"    pm.expect(title).to.eql(pm.variables.get(\"project_title\"));\r",
									"});\r",
									"\r",
									"pm.test('specificObjective should fit', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"specificObjective\");\r",
									"    pm.expect(response.projectData.specificObjective).to.have.property(\"programmeObjectivePolicy\");\r",
									"    pm.expect(response.projectData.specificObjective.programmeObjectivePolicy)\r",
									"        .to.eql(pm.variables.get(\"programmePriorityPolicy\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"-1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "file upload to DRAFT",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve the uploaded file list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const file = pm.response.json().content[0];\r",
									"\r",
									"pm.test('applicant can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.variables.set('file_id',file.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "set description to uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const file = pm.response.json();\r",
									"\r",
									"pm.test('applicant can specify description to a file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.id).to.equal(pm.variables.get('file_id'));\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.expect(file.description).to.equal('API test description');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "download uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can download previously-uploaded file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot create application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user should not be able to create project application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"should-not-create\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user should not be able to see files when application is DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user should not be able to see files because he cannot see project in DRAFT', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot upload file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user should not be able to upload APPLICANT file when he cannot read project itself', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot see project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot set description",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user should not be able to set description, when he cannot see DRAFT project', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot download file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('programme user should not be able to download file, cause he cannot see application in DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "submit and resubmit application",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check submitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should be filled in', function() {\r",
									"    pm.expect(application.firstSubmission.updated).not.eql(null);\r",
									"    pm.variables.set('application_submission_time', application.firstSubmission.updated);\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be empty after first submission', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('submission and status should be equal', function() {\r",
									"    pm.expect(application.firstSubmission)\r",
									"        .deep.equal(application.projectStatus);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to SUBMITTED application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant should not be able to upload file to SUBMITTED application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('programme user can see files, when application is SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.content[0].name).to.equal('file.txt');\r",
									"    pm.expect(response.totalElements).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check returned application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be RETURNED_TO_APPLICANT', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should still be empty', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to resubmit application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check resubmitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be now filled in', function() {\r",
									"    pm.expect(application.lastResubmission).not.equal(null);\r",
									"    pm.expect(application.lastResubmission.updated).not.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "enter eligibility assessment (EA) and decision",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "aplicant cannot enter EA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant should not be able to enter EA', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"this should not be processed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter EA once",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can enter EA once', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('EA is part of the application detail', function() {\r",
									"    pm.expect(application).to.have.property(\"eligibilityAssessment\");\r",
									"    pm.expect(application.eligibilityAssessment).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('status of the application is not changed', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('EA result is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.result)\r",
									"        .to.eql(\"PASSED\");\r",
									"});\r",
									"\r",
									"pm.test('EA note is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.note)\r",
									"        .to.eql(\"status set to passed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"status set to passed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot enter EA twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to enter EA second time', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"FAILED\",\r\n    \"note\": \"status set to failed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE without date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE without date', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nKey).to.eql('project.decision.date.unknown')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE with date in future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 5);\r",
									"pm.variables.set('date_plus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE with date in future', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nFieldErrors.date.i18nKey)\r",
									"        .to.eql('project.status.date.should.be.in.past.or.present')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{date_plus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can change status to ELIGIBLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5);\r",
									"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can change status to ELIGIBLE', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status decision date is set to date -5days', function() {\r",
									"    pm.expect(application.projectStatus.decisionDate)\r",
									"        .to.eql(pm.variables.get(\"eligibility_decision_date_minus_5\"));\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application to ELIGIBLE status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set back to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to applicant user who resubmitted', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "enter quality assessment (QA)",
			"item": [
				{
					"name": "when SUBMITTED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should not be able to enter QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA once",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA once', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('QA is part of the application detail', function() {\r",
											"    pm.expect(application).to.have.property(\"qualityAssessment\");\r",
											"    pm.expect(application.qualityAssessment).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test('status of the application is not changed', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
											"});\r",
											"\r",
											"pm.test('QA result is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.result)\r",
											"        .to.eql(\"RECOMMENDED_FOR_FUNDING\");\r",
											"});\r",
											"\r",
											"pm.test('QA note is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.note)\r",
											"        .to.eql(\"status set to recommended for funding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter QA twice Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user should not be able to enter QA second time', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_WITH_CONDITIONS\",\r\n    \"note\": \"status set to recommended with conditions\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when INELIGIBLE",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA = FAILED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"FAILED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to INELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to INELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to INELIGIBLE', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('INELIGIBLE');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"INELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA when INELIGIBLE already",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should not be able to enter QA when INELIGIBLE state already', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "enter funding decision (FD)",
			"item": [
				{
					"name": "with QA and ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"note\": \"changed to approved\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "without ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without ED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user should not be able to enter funding without ED', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "without QA",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user should not be able to enter funding without QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "enter FD, return and resubmit",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD - APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can change status to APPROVED_WC', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved with conditions\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED_WITH_CONDITIONS\",\r\n    \"note\": \"changed to approved with conditions\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can return application after FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('program user can return application back to user', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant can resubmit back to APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant should be able to resubmit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be back to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application).to.have.property('lastResubmission');\r",
											"    pm.expect(application).to.have.property('projectStatus');\r",
											"    pm.expect(application.lastResubmission)\r",
											"        .deep.eql(application.projectStatus);\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to applicant who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "programm user can set final funding to APPROVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 2);\r",
											"pm.variables.set('funding_decision_date_minus_2', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to day-5', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_2\"));\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application.fundingDecision).to.have.property('id');\r",
											"    pm.expect(application.projectStatus).to.have.property('id');\r",
											"    // fundingDecision is still referring to the first funding attempt\r",
											"    pm.expect(application.fundingDecision.id)\r",
											"        .not.eql(application.projectStatus.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"date\": \"{{funding_decision_date_minus_2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project Partner and Associated Organization",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdA', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner A\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner B', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdB', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner B\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner B\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner A LeadPartner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can update project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A LEAD\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdA}}\",\r\n    \"abbreviation\": \"Partner A LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot update Partner B to be LEAD when A already is', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									"\r",
									"pm.test('correct id is sent to FE in error response', function() {\r",
									"    pm.expect(error.i18nArguments).to.eql([pm.variables.get('partnerIdA') + \"\", \"Partner A LEAD\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - force",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can force to update project Partner B to be LEAD', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot create LeadPartner C cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - force fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot override LeadPartner A cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.oldLeadPartnerId.is.not.lead\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with address', function() {\r",
									"    pm.expect(organization.address.street).to.eql(\"test street\");\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with both contacts', function() {\r",
									"    pm.expect(organization.contacts).to.have.deep.members([\r",
									"        {\r",
									"            \"type\": \"LegalRepresentative\",\r",
									"            \"title\": null,\r",
									"            \"firstName\": \"Rafael\",\r",
									"            \"lastName\": \"Nadal\",\r",
									"            \"email\": \"rafael@atp.com\",\r",
									"            \"telephone\": \"+6 30 216 896\"\r",
									"        },\r",
									"        {\r",
									"            \"type\": \"ContactPerson\",\r",
									"            \"title\": \"Champion\",\r",
									"            \"firstName\": \"Roger\",\r",
									"            \"lastName\": \"Federer\",\r",
									"            \"email\": \"roger@atp.com\",\r",
									"            \"telephone\": \"+6 20 542 265\"\r",
									"        }\r",
									"    ]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdA}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdA}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdA}}\",\r\n    \"address\": {\r\n        \"street\": \"test street\"\r\n    },\r\n    \"contacts\": [\r\n        {\r\n            \"type\": \"ContactPerson\",\r\n            \"title\": \"Champion\",\r\n            \"firstName\": \"Roger\",\r\n            \"lastName\": \"Federer\",\r\n            \"email\": \"roger@atp.com\",\r\n            \"telephone\": \"+6 20 542 265\"\r\n        },\r\n        {\r\n            \"type\": \"LegalRepresentative\",\r\n            \"firstName\": \"Rafael\",\r\n            \"lastName\": \"Nadal\",\r\n            \"email\": \"rafael@atp.com\",\r\n            \"telephone\": \"+6 30 216 896\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdD', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner D\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization for Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdD'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdD'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdD}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdD}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdD}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete project partner D together with AO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can delete project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partnerIdD}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partnerIdD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check AssociatedOrganization D deleted A stays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const page = pm.response.json();\r",
									"\r",
									"pm.test('applicant can fetch associated organizations for Project', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('there is now only one associated organization', function() {\r",
									"    pm.expect(page.totalElements).to.eql(1);\r",
									"    pm.expect(page.content[0].nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(page.content[0].nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('when only one associated organization, sortNumber is 1', function() {\r",
									"    pm.expect(page.content[0].sortNumber).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Project Partner - Details",
			"item": [
				{
					"name": "just create project application",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project duration to have periods",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project duration is saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().projectData.duration).to.eql(50);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{application_acronym}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ],\n\t\"duration\": 50,\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partner 1 - Details",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_1', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}} {{$randomCompanySuffix}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner"
									]
								}
							},
							"response": []
						},
						{
							"name": "set both addresses to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set addresses to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('both addresses are there', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"street\": \"test org\"\r\n    },\r\n    {\r\n        \"type\": \"Department\",\r\n        \"street\": \"test dprt\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id_1}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id_1}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove 1st address and update 2nd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can remove addresses from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one address is now returned', function() {\r",
											"    pm.expect(partner.addresses.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('address is saved correctly', function() {\r",
											"    const addr = partner.addresses[0];\r",
											"    pm.expect(addr.type).to.eql(\"Organization\");\r",
											"    pm.expect(addr.country).to.eql(\"SK\");\r",
											"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
											"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
											"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
											"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
											"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\": \"SK\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id_1}}/address",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id_1}}",
										"address"
									]
								}
							},
							"response": []
						},
						{
							"name": "set both contacts to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set contacts to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('both contacts are there', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.expect(partner.contacts.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"firstName\": \"test LR\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"firstName\": \"test CP\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id_1}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id_1}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove 1st contact and update 2nd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can remove contacts from partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('just one contact is now returned', function() {\r",
											"    const partner = pm.response.json();\r",
											"    pm.expect(partner.contacts.length).to.eql(1);\r",
											"}); \r",
											"\r",
											"pm.test('contact is saved correctly', function() {\r",
											"    const contact = pm.response.json().contacts[0];\r",
											"    pm.expect(contact.type).to.eql(\"ContactPerson\");\r",
											"    pm.expect(contact.title).to.eql(\"Bachelor\");\r",
											"    pm.expect(contact.firstName).to.eql(\"Donald\");\r",
											"    pm.expect(contact.lastName).to.eql(\"Trump\");\r",
											"    pm.expect(contact.email).to.eql(\"mc.donald@whitehouse.gov\");\r",
											"    pm.expect(contact.telephone).to.eql(\"202-456-6213\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"Bachelor\",\r\n        \"firstName\": \"Donald\",\r\n        \"lastName\": \"Trump\",\r\n        \"email\": \"mc.donald@whitehouse.gov\",\r\n        \"telephone\": \"202-456-6213\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id_1}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id_1}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "set motivation to partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set motivation to partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('motivation is set correctly', function() {\r",
											"    const motivation = pm.response.json().motivation;\r",
											"    pm.expect(motivation.organizationRelevance[0].translation).to.eql('This project is definitely relevant enough to be founded.');\r",
											"    pm.expect(motivation.organizationRole[0].translation).to.eql('test latin àâçéèêëîïôùûüÿ');\r",
											"    pm.expect(motivation.organizationExperience[0].translation).to.eql('We have 16 millions years of experience in this particular area.');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"organizationRelevance\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"This project is definitely relevant enough to be founded.\"\r\n            }\r\n        ],\r\n    \"organizationRole\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"test latin àâçéèêëîïôùûüÿ\"\r\n            }\r\n        ],\r\n    \"organizationExperience\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"We have 16 millions years of experience in this particular area.\"\r\n            }\r\n        ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id_1}}/motivation",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner",
										"{{partner_id_1}}",
										"motivation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Partner 2 - Budget 1",
					"item": [
						{
							"name": "create project partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_2', partner.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}} {{$randomCompanySuffix}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    const staffCosts = pm.response.json();\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    const staffCosts = pm.response.json();\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(48800);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Project Manager\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 10,\r\n        \"pricePerUnit\": 4500,\r\n        \"rowSum\": 45000\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Doctor\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 1,\r\n        \"pricePerUnit\": 3800,\r\n        \"rowSum\": 3800\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/staffcosts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"staffcosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - travel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budgettravel', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('travel is set correctly', function() {\r",
											"    const travel = pm.response.json();\r",
											"    pm.expect(travel.length).to.eql(1);\r",
											"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
											"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
											"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Gran Canaria');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99,\r\n        \"rowSum\": 0.18\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/travel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"travel"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - infrastructure",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set infrastructure budget', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('infrastructure budget is set correctly', function() {\r",
											"    const infrastructure = pm.response.json();\r",
											"    pm.expect(infrastructure.length).to.eql(1);\r",
											"    pm.expect(infrastructure[0].numberOfUnits).to.eql(2);\r",
											"    pm.expect(infrastructure[0].pricePerUnit).to.eql(0.5);\r",
											"    pm.expect(infrastructure[0].rowSum).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Dell Aspiron');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Dell Aspiron\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 0.5,\r\n        \"rowSum\": 1\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/infrastructure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"infrastructure"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRateSetup\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(53681.18);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "set officeAndAdm + travel flatRates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate with travel flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRateSetup\": 10,\r\n    \"travelAndAccommodationOnStaffCostsFlatRate\": 15\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total after travel auto-deleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(61001);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						},
						{
							"name": "set staff costs flatRate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set staffCosts flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffCostsFlatRate\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore budget - travel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set budgettravel', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('travel is set correctly', function() {\r",
											"    const travel = pm.response.json();\r",
											"    pm.expect(travel.length).to.eql(1);\r",
											"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
											"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
											"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
											"});\r",
											"\r",
											"pm.test('description translation is persisted correctly', function() {\r",
											"    const description = pm.response.json()[0].description.find(desc => desc.language === pm.variables.get('inputLanguage')).translation;\r",
											"    pm.expect(description).to.eql('Gran Canaria');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99,\r\n        \"rowSum\": 0.18\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/travel",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"travel"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(1.29);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_2}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_2}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Partner 3 - Budget 2 (Lead)",
					"item": [
						{
							"name": "create project Lead partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const partnerAbbr = pm.variables.replaceIn('{{$randomAbbreviation}}') + ' ' + pm.variables.replaceIn('{{$randomCompanySuffix}}')\r",
											"pm.variables.set(\r",
											"    'partner_abbreviation',\r",
											"    partnerAbbr.substr(0, 15)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const partner = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project partner', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('partner_id_lead', partner.id);\r",
											"});\r",
											"\r",
											"pm.test('project partner has correct abbreviation', function() {\r",
											"    pm.expect(partner.abbreviation).to.eql(pm.variables.get('partner_abbreviation'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"abbreviation\": \"{{partner_abbreviation}}\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/partner",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"partner"
									]
								}
							},
							"response": []
						},
						{
							"name": "set budget - staff costs to Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const staffCosts = pm.response.json();\r",
											"\r",
											"pm.test('applicant can set budget staff costs', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts are set correctly', function() {\r",
											"    pm.expect(staffCosts.length).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test('staffcosts sums are calculated correctly', function() {\r",
											"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(22000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Teachers\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 8800,\r\n        \"rowSum\": 17600\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Students\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 22,\r\n        \"pricePerUnit\": 200,\r\n        \"rowSum\": 4400\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/staffcosts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"staffcosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "set office and administration flatRate to Lead Partner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can set officeadministration flatRate', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"officeAndAdministrationOnStaffCostsFlatRateSetup\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/options",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate total for Lead",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('total is calculated correctly', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(24200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/total",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"partner",
										"{{partner_id_lead}}",
										"budget",
										"total"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "fill in project lump sums",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can fill in project lump sum and their respective partner contribution', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"programmeLumpSumId\": {{programmeLumpSumId}},\r\n        \"period\": 0,\r\n        \"lumpSumContributions\": [\r\n            {\r\n                \"partnerId\": {{partner_id_1}},\r\n                \"amount\": 2000\r\n            },\r\n            {\r\n                \"partnerId\": {{partner_id_2}},\r\n                \"amount\": 8000\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"programmeLumpSumId\": {{programmeLumpSumId}},\r\n        \"period\": 2,\r\n        \"lumpSumContributions\": [\r\n            {\r\n                \"partnerId\": {{partner_id_2}},\r\n                \"amount\": 3956\r\n            },\r\n            {\r\n                \"partnerId\": {{partner_id_1}},\r\n                \"amount\": 4044\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/lumpSum",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"lumpSum"
							]
						}
					},
					"response": []
				},
				{
					"name": "check project budget for all partners",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('project budget can be retrieved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both partners are returned', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    pm.expect(res).to.have.length(3);\r",
									"});\r",
									"\r",
									"pm.test('partners are sorted', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.id).to.eql(pm.variables.get('partner_id_lead'));\r",
									"    pm.expect(res[1].partner.id).to.eql(pm.variables.get('partner_id_1'));\r",
									"    pm.expect(res[2].partner.id).to.eql(pm.variables.get('partner_id_2'));\r",
									"});\r",
									"\r",
									"pm.test('partners have correct sort numbers', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.sortNumber).to.eql(1);\r",
									"    pm.expect(res[1].partner.sortNumber).to.eql(2);\r",
									"    pm.expect(res[2].partner.sortNumber).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test('partners have correct data filled in', function() {\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    pm.expect(res[0].staffCosts).to.eql(22000.0);\r",
									"    pm.expect(res[0].travelCosts).to.eql(0);\r",
									"    pm.expect(res[0].externalCosts).to.eql(0);\r",
									"    pm.expect(res[0].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[0].infrastructureCosts).to.eql(0);\r",
									"    pm.expect(res[0].officeAndAdministrationCosts).to.eql(2200.0);\r",
									"    pm.expect(res[0].totalSum).to.eql(24200);\r",
									"\r",
									"    pm.expect(res[1].partner.country).to.eql('SK');\r",
									"    pm.expect(res[1].totalSum).to.eql(6044);\r",
									"    pm.expect(res[1].lumpSumContribution).to.eql(6044);\r",
									"\r",
									"    pm.expect(res[2].staffCosts).to.eql(0.11);\r",
									"    pm.expect(res[2].travelCosts).to.eql(0.18);\r",
									"    pm.expect(res[2].externalCosts).to.eql(0);\r",
									"    pm.expect(res[2].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[2].infrastructureCosts).to.eql(1);\r",
									"    pm.expect(res[2].officeAndAdministrationCosts).to.eql(0);\r",
									"    pm.expect(res[2].totalSum).to.eql(11957.29);\r",
									"    pm.expect(res[2].lumpSumContribution).to.eql(11956);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/budget",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"budget"
							]
						}
					},
					"response": []
				},
				{
					"name": "set co-financing to Lead Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can set Co-Finaning', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('financing and funds are correct', function() {\r",
									"    const finances = pm.response.json().finances;\r",
									"    pm.expect(finances[0].percentage).to.eql(25);\r",
									"    pm.expect(finances[0].fund).to.not.be.empty;\r",
									"    pm.expect(finances[1].percentage).to.eql(75);\r",
									"    pm.expect(finances[1].fund).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test('1st contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[0].name).to.eql(pm.variables.get('partner_abbreviation'));\r",
									"    pm.expect(contributions[0].status).to.eql('Private');\r",
									"    pm.expect(contributions[0].isPartner).to.be.true;\r",
									"    pm.expect(contributions[0].amount).to.eql(5100);\r",
									"});\r",
									"\r",
									"pm.test('2nd contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[1].name).to.eql('Source of money 01');\r",
									"    pm.expect(contributions[1].status).to.eql('Public');\r",
									"    pm.expect(contributions[1].isPartner).to.be.false;\r",
									"    pm.expect(contributions[1].amount).to.eql(8000);\r",
									"});\r",
									"\r",
									"pm.test('3rd contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[2].name).to.eql('Source of money 02');\r",
									"    pm.expect(contributions[2].status).to.eql('AutomaticPublic');\r",
									"    pm.expect(contributions[2].isPartner).to.be.false;\r",
									"    pm.expect(contributions[2].amount).to.eql(3000);\r",
									"});\r",
									"\r",
									"pm.test('4th contribution is correct', function() {\r",
									"    const contributions = pm.response.json().partnerContributions;\r",
									"    pm.expect(contributions[3].name).to.eql('Source of money 03');\r",
									"    pm.expect(contributions[3].status).to.eql('Private');\r",
									"    pm.expect(contributions[3].isPartner).to.be.false;\r",
									"    pm.expect(contributions[3].amount).to.eql(2050);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"finances\": [\r\n        {\r\n            \"percentage\": 75\r\n        },\r\n        {\r\n            \"percentage\": 25,\r\n            \"fundId\": {{programmeFundId}}\r\n        }\r\n    ],\r\n    \"partnerContributions\": [\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 01\",\r\n            \"status\": \"Public\",\r\n            \"amount\": 8000\r\n        },\r\n        {\r\n            \"isPartner\": true,\r\n            \"name\": \"THIS NAME SHOULD BE IGNORED\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 5100\r\n        },\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 02\",\r\n            \"status\": \"AutomaticPublic\",\r\n            \"amount\": 3000\r\n        },\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 03\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 2050\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/cofinancing",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"cofinancing"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Project Work Package",
			"item": [
				{
					"name": "just create project application",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "fill in project duration to have periods",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
											"pm.variables.set(\r",
											"    'project_title',\r",
											"    projectName.substr(0,250)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('project duration is saved', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().projectData.duration).to.eql(50);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"acronym\": \"{{application_acronym}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": [\n        {\n            \"language\": \"{{inputLanguage}}\",\n            \"translation\": \"{{project_title}}\"\n        }\n    ],\n\t\"duration\": 50,\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create project work package",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workPackage = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"pm.variables.set(\r",
									"    'workPackage_name',\r",
									"    workPackage.substr(0, 100)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can create project workPackage', function() {\r",
									"    const workPackage = pm.response.json();\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('workPackage_id_1', workPackage.id);\r",
									"});\r",
									"\r",
									"pm.test('workPackage has correct name (translated)', function() {\r",
									"    const name = pm.response.json().name.find(x => x.language === pm.variables.get('inputLanguage')).translation;\r",
									"    pm.expect(name).to.be.eql(pm.variables.get('workPackage_name'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{workPackage_name}}\"\r\n        }\r\n    ],\r\n    \"specificObjective\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomDepartment}}\"\r\n        }\r\n    ],\r\n    \"objectiveAndAudience\": [\r\n        {\r\n            \"language\": \"{{inputLanguage}}\",\r\n            \"translation\": \"{{$randomLoremParagraph}}\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/workPackage/forProject/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"workPackage",
								"forProject",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project work package activities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const activityName = pm.variables.replaceIn('{{$randomProduct}}') + ' - ' + pm.variables.replaceIn('{{$randomWords}}')\r",
									"pm.variables.set(\r",
									"    'activity_name',\r",
									"    activityName.substr(0, 200)\r",
									");\r",
									"\r",
									"const activityDescription = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"pm.variables.set(\r",
									"    'activity_description',\r",
									"    activityDescription.substr(0, 500)\r",
									");\r",
									"\r",
									"pm.variables.set('deliverable_1', pm.variables.replaceIn('{{$randomProduct}}'));\r",
									"pm.variables.set('deliverable_2', pm.variables.replaceIn('{{$randomProduct}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('applicant can update workPackage activities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('activities are correctly sorted', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    pm.expect(activities[0].startPeriod).to.eql(1);\r",
									"    pm.expect(activities[0].endPeriod).to.eql(3);\r",
									"\r",
									"    pm.expect(activities[1].startPeriod).to.eql(4);\r",
									"    pm.expect(activities[1].endPeriod).to.eql(5);\r",
									"});\r",
									"\r",
									"pm.test('deliverables are correctly sorted', function() {\r",
									"    const deliverables = pm.response.json()[0].deliverables;\r",
									"\r",
									"    pm.expect(deliverables[0].period).to.eql(1);\r",
									"    pm.expect(deliverables[1].period).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('activities have correct names', function() {\r",
									"    const activities = pm.response.json();\r",
									"\r",
									"    pm.expect(activities[0].title.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('activity_name'));\r",
									"    pm.expect(activities[0].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('activity_description'));\r",
									"});\r",
									"\r",
									"pm.test('deliverables have correct names', function() {\r",
									"    const deliverables = pm.response.json()[0].deliverables;\r",
									"\r",
									"    pm.expect(deliverables[0].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('deliverable_1'));\r",
									"    pm.expect(deliverables[1].description.find(tr => tr.language === pm.variables.get('inputLanguage')).translation).to.eql(pm.variables.get('deliverable_2'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"title\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_name}}\"\r\n            }\r\n        ],\r\n        \"startPeriod\": 1,\r\n        \"endPeriod\": 3,\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"{{activity_description}}\"\r\n            }\r\n        ],\r\n        \"deliverables\": [\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_1}}\"\r\n                    }\r\n                ],\r\n                \"period\": 1\r\n            },\r\n            {\r\n                \"description\": [\r\n                    {\r\n                        \"language\": \"{{inputLanguage}}\",\r\n                        \"translation\": \"{{deliverable_2}}\"\r\n                    }\r\n                ],\r\n                \"period\": 2\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"startPeriod\": 4,\r\n        \"endPeriod\": 5\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/workPackage/activity/forWorkPackage/{{workPackage_id_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"workPackage",
								"activity",
								"forWorkPackage",
								"{{workPackage_id_1}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{admin_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{admin_email}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "specify_url_here"
		}
	]
}
