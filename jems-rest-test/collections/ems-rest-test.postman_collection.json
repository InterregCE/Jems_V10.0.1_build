{
	"info": {
		"_postman_id": "a6deeb15-ba62-422c-8c3e-4b5f63ba4f6d",
		"name": "ems-rest-test",
		"description": "Check EMS application for common use-cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "create users for following tests",
					"item": [
						{
							"name": "create admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a3e7ddd-6ca1-40f9-891f-a1a78fa96330",
										"exec": [
											"const username = pm.variables.get(\"admin_user_name\")",
											"const response = pm.response.json()",
											"",
											"pm.test('should be created with correct credentials', function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(response.email).to.equal(pm.variables.get(\"admin_user_email_to_create\"));",
											"",
											"    pm.environment.set(\"admin_email\", response.email);",
											"    pm.environment.set(\"admin_password\", response.email);",
											"});",
											"",
											"pm.test('should be created with correct name and surname', function () {",
											"    pm.expect(response.name).to.equal(pm.variables.get(\"admin_name\"));",
											"    pm.expect(response.surname).to.equal(pm.variables.get(\"admin_surname\"));",
											"});",
											"",
											"pm.test('should be created with correct role', function () {",
											"    pm.expect(response.userRole.name).to.contain('admin');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31f1b460-decc-4622-97c0-f4535a6902d0",
										"exec": [
											"var uuid = require('uuid');",
											"const randomIdentifier = uuid.v4().substring(24, 32);",
											"",
											"pm.variables.set('admin_user_email_to_create', randomIdentifier + \"@admin.eu\");",
											"pm.variables.set('admin_name', pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set('admin_surname', pm.variables.replaceIn('{{$randomLastName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{admin_user_email_to_create}}\",\n\t\"name\": \"{{admin_name}}\",\n\t\"surname\": \"{{admin_surname}}\",\n    \"userRoleId\": 1\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "register applicant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a6d364fc-d1f6-4d79-a2e9-237dedaa04dc",
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('applicant_email', randomIdentifier + \"@applicant.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "80ed86e8-b85e-4e17-99d5-6d98ee08a5f5",
										"exec": [
											"pm.test('applicant can register', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('applicant_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{applicant_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"password\": \"{{applicant_email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/registration",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "create programme user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b42bb115-e197-42e3-a4d7-1e6270ff5c0b",
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('programme_user_email', randomIdentifier + \"@programme-user.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a14c17ee-80e8-43a4-ab3b-0fba51b8b6d4",
										"exec": [
											"pm.test('programme user can be created', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('programme_user_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{programme_user_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"userRoleId\": \"2\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2625de5d-ff78-4456-90b1-6d6b195daafe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f5b267f-1e5d-460e-8adb-4ac5a5ab7fb0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "retrieve some existing programme policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "814f036e-5990-4be9-b1ee-ac2179ad12fd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "67b9c694-300c-4319-a4be-128503418ca3",
								"exec": [
									"pm.test('we can retrieve programme priorities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme priority or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('totalElements');\r",
									"    if (response.totalElements > 0) {\r",
									"        const policies = response.content[0].programmePriorityPolicies;\r",
									"        if (policies.length) {\r",
									"            const policy = policies[0].programmeObjectivePolicy\r",
									"            console.log('There is already a policy ' + policy + ', which we will use for calls during this test');\r",
									"            pm.environment.set('programmePriorityPolicy', policy);\r",
									"        } else {\r",
									"            console.log('There is already a programme priority, but no policy. We have to create one.');\r",
									"            pm.environment.set('programmePriorityPolicy', null);\r",
									"        }\r",
									"    } else {\r",
									"        console.log('There are no any programme priorities yet. We need to create one.');\r",
									"        pm.environment.set('programmePriorityPolicy', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve and save available input language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8357ae3f-cc6f-4602-8a32-74f10c583b34",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7179cc4-989c-4703-8562-fb0a5394387a",
								"exec": [
									"pm.test('we can retrieve programme languages', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have input language available', function() {\r",
									"    const languages = pm.response.json();\r",
									"    pm.expect(languages).to.be.an('array');\r",
									"    const inputLanguage = languages.find(lang => lang.input);\r",
									"    pm.expect(inputLanguage).to.not.be.undefined;\r",
									"    console.log('There is input language ' + inputLanguage.code + ' enabled, we will use this during test');\r",
									"    pm.environment.set('inputLanguage', inputLanguage.code);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmelanguage",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmelanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create programme priority with policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c951adf9-a247-4f67-bef6-e1966fbcf609",
								"exec": [
									"function zeroPrefixedNum(num, size) {\r",
									"    var s = \"000000000\" + num;\r",
									"    return s.substr(s.length-size);\r",
									"}\r",
									"\r",
									"const programmeCode = zeroPrefixedNum(Math.floor(Math.random() * 1000), 4)\r",
									"pm.variables.set('programmeCode', programmeCode)\r",
									"\r",
									"if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"    console.log('There is no any programme priority policy we can use, so we need to create one.');\r",
									"    pm.variables.set(\r",
									"        'programmePriorityPolicies',\r",
									"        JSON.stringify([{\r",
									"            \"programmeObjectivePolicy\": \"AdvancedTechnologies\",\r",
									"            \"code\": \"AT\"\r",
									"        }])\r",
									"    );\r",
									"} else {\r",
									"    console.log('There is already a programme priority with policy, so we will use that one.');\r",
									"    pm.variables.set('programmePriorityPolicies', null);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b8b2d0e-254e-42e1-96b4-7397d5b426a3",
								"exec": [
									"pm.test('programme priority was created if needed', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme priority.')\r",
									"        pm.environment.set('programmePriorityPolicy', 'AdvancedTechnologies');\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT create new programme priority, no variable is changing.');\r",
									"        // pm.expect(pm.response.json().i18nFieldErrors.programmePriorityPolicies.i18nKey)\r",
									"        //     .to.eql(\"programme.priority.priorityPolicies.should.not.be.null\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{programmeCode}}\",\r\n    \"title\": \"API test Programme Priority {{programmeCode}}\",\r\n    \"objective\": \"PO1\",\r\n    \"programmePriorityPolicies\": {{programmePriorityPolicies}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "346dc0eb-f481-4990-8fc3-a065c22261f5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab0a9bf0-9d2e-42ad-b95d-4d4d8e9625c0",
								"exec": [
									"pm.test('we can retrieve programme funds', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme fund or we need to enable first one', function() {\r",
									"    const funds = pm.response.json().filter(f => f.selected);\r",
									"    if (funds.length > 0) {\r",
									"        const fundId = funds[0].id;\r",
									"        console.log('There is fund wth id ' + fundId);\r",
									"        pm.environment.set('programmeFundId', fundId);\r",
									"    } else {\r",
									"        console.log('There are no any programme funds yet enabled. We need to enable one.');\r",
									"        pm.environment.set('programmeFundId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then enable programme fund 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81742f37-0398-4581-91a8-6270a39dc30b",
								"exec": [
									"if (pm.environment.get('programmeFundId') == null) {\r",
									"    console.log('There is no any programme fund enabled we can use, so we need to enable one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', 1);\r",
									"} else {\r",
									"    console.log('There is already a programme fund enabled, so we will use that one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', \"not-existing\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1bd5618a-23bd-4d18-b4ef-f912f7249b0c",
								"exec": [
									"pm.test('programme fund was enabled', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmeFundId') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We enabled programme fund id=1');\r",
									"        pm.environment.set('programmeFundId', 1);\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT enable new programme funds, no variable is changing.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"funds\": [\r\n        {\r\n            \"id\": {{programmeFundIdToBeEnabled}},\r\n            \"selected\": true\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "create call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "734c9f11-ff15-4b16-8ae4-88d169f3ec3f",
								"exec": [
									"const callName = pm.variables.replaceIn('{{$randomCatchPhrase}}')\r",
									"pm.variables.set(\r",
									"    'call_name_to_create',\r",
									"    callName.substr(0,150)\r",
									");\r",
									"\r",
									"var callDateStart = new Date();\r",
									"callDateStart.setDate(callDateStart.getDate() - 1);\r",
									"pm.variables.set('callDateStart', callDateStart.toISOString());\r",
									"\r",
									"var callDateEnd = new Date();\r",
									"callDateEnd.setDate(callDateEnd.getDate() + 10);\r",
									"pm.variables.set('callDateEnd', callDateEnd.toISOString());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a92b3ae6-c4bb-4902-8909-a424f6d886d7",
								"exec": [
									"pm.test('call can be created', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"callId\", pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{call_name_to_create}}\",\n\t\"priorityPolicies\": [ \"{{programmePriorityPolicy}}\" ],\n    \"funds\": [{{programmeFundId}}],\n\t\"startDate\": \"{{callDateStart}}\",\n\t\"endDate\": \"{{callDateEnd}}\",\n    \"lengthOfPeriod\": 12\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/call",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup possible flatRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd2c646c-2895-443c-b911-e0c8fdb84abd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "068806b4-41fd-4b49-b90e-35a2fb5242e3",
								"exec": [
									"pm.test('call flatrate setup is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"StaffCost\",\r\n        \"rate\": 20,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"OfficeOnStaff\",\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"OfficeOnOther\",\r\n        \"rate\": 25,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"TravelOnStaff\",\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"OtherOnStaff\",\r\n        \"rate\": 40,\r\n        \"isAdjustable\": true\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/flatrate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"flatrate"
							]
						}
					},
					"response": []
				},
				{
					"name": "publish call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc09ed2b-0a49-48d7-b7c3-fe615d3176ea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf5bf2d8-74ec-41f9-8131-b046b21afb56",
								"exec": [
									"pm.test('call is published successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/publish",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"publish"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "572f7a97-0eec-4739-8aa6-6b43c996de19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "70673f14-80ee-468a-bf43-fd69f4ad3b0c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ab74aa4-118f-4237-b7a8-49ba06c90645",
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0af610e4-7400-4045-863d-88e276cd92ff",
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "099a8501-5598-4a79-baa8-0bb9e428a0fa",
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3dbf4237-15f1-4fcb-be9d-94d3e06545bd",
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "674c7271-0191-4458-82db-f90133527314",
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7bc113d0-8ecd-46dd-9e64-022222edec7d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b9fdbb6d-d7a8-4897-a135-ac2bdc6bebdc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "455303d0-37a2-4133-9e51-e6b43f1136fd",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d13c85d-a89f-41d6-8f70-d0b692315c5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"\",\n\t\"surname\": \"\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2245164-65c1-479d-b706-9a0a8116187c",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.should.not.be.empty');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b90c9bb1-b1c6-4bf6-9461-f5cb0a66aebb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userRoleId\": null\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a54c16c-6f6a-4e8a-b13e-43a1e13bb90e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "92ab57ef-a364-4db8-94c4-135799199360",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "090931a7-d77b-47eb-9659-af36bfe0170d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "93a75914-1399-47ca-9773-68c8dac4fd05",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1fa1b34f-c5e8-40c3-8272-cce378112b28",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8597aace-3b42-4c9a-b32a-7d26e35c4f25",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.size.too.long');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"test-proj-this-is-a-very-long-name\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "141f228a-e90d-4611-ade6-99651203ec1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88fe01a0-a0ed-401e-99d7-932916b066de",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.should.not.be.empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"\",\n\t\"projectCallId\": null\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e8ffd0d-db0b-4714-8586-c4ca442f3388",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2347996-b0e3-45aa-9a78-ef47c1b3389d",
								"exec": [
									"const application = pm.response.json()\r",
									"\r",
									"pm.test('project should be created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application).to.have.property(\"id\");\r",
									"    pm.expect(application.id).not.eql(null);\r",
									"    pm.variables.set(\"projectId\", application.id);\r",
									"});\r",
									"\r",
									"pm.test('acronym should fit', function() {\r",
									"    pm.expect(application).to.have.property(\"acronym\");\r",
									"    pm.expect(application.acronym).to.eql(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('submission should be empty', function() {\r",
									"    pm.expect(application).to.have.property(\"firstSubmission\");\r",
									"    pm.expect(application.firstSubmission).to.eql(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"projectCallId\": {{callId}}\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17dd833f-efac-48c6-ac7a-b9522f1bbd0d",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"\r",
									"const projectDuration = pm.variables.replaceIn('{{$randomInt}}')\r",
									"pm.variables.set(\r",
									"    'project_duration',\r",
									"    (projectDuration % 999 + 1)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ce184b-08c9-4d5c-9cf9-b05cd9320a0e",
								"exec": [
									"pm.test('project data should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": \"{{project_title}}\",\n\t\"duration\": {{project_duration}},\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c7b8a5a1-8712-4382-b83c-a9f52221d7e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38f88deb-0165-4b07-bc6c-ab299ec424b4",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f47da1d-b791-4de4-b162-d64478a524e2",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"id should fit\", function () {\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"    pm.expect(response.id).to.equal(pm.variables.get(\"projectId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"acronym should fit\", function () {\r",
									"    pm.expect(response).to.have.property(\"acronym\");\r",
									"    pm.expect(response.acronym).to.equal(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('title should fit', function() {\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"title\");\r",
									"    pm.expect(response.projectData.title).to.eql(pm.variables.get(\"project_title\"));\r",
									"});\r",
									"\r",
									"pm.test('specificObjective should fit', function() {\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"specificObjective\");\r",
									"    pm.expect(response.projectData.specificObjective).to.have.property(\"programmeObjectivePolicy\");\r",
									"    pm.expect(response.projectData.specificObjective.programmeObjectivePolicy)\r",
									"        .to.eql(pm.variables.get(\"programmePriorityPolicy\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99501feb-5a64-457a-80e6-869c50a3d1ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62a5e6ed-d081-4d4e-8077-f325212c9352",
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"-1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4dfd836d-2e21-441f-be16-449d62697ec0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa6a86e7-383d-40ed-95ef-ce03532da14c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "file upload to DRAFT",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99820e44-14ff-41b3-adab-118d695af8f6",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac73afe5-7db6-4e8e-bda5-cb9068aad26a",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4a872a17-8148-40f9-bfe3-2bdc23d13292",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd386097-f110-447a-b0cd-3e63d19271c1",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve the uploaded file list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04a3a3b1-a01d-42c2-9092-f6ed66a1b043",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "128f365c-a4e1-4c22-b56b-2bafc1610f8a",
								"exec": [
									"const file = pm.response.json().content[0];\r",
									"\r",
									"pm.test('applicant can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.variables.set('file_id',file.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "set description to uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3470f6dc-b84d-42c8-a338-740c01f5c970",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8acb0b4-f274-4ad8-a5f2-a71bbdfff274",
								"exec": [
									"const file = pm.response.json();\r",
									"\r",
									"pm.test('applicant can specify description to a file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.id).to.equal(pm.variables.get('file_id'));\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.expect(file.description).to.equal('API test description');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "download uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dac0f448-c397-4c52-aada-f55745f298f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3b73715-50f7-4793-a688-2fbae65cbcb1",
								"exec": [
									"pm.test('applicant can download previously-uploaded file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot create application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29b8581e-02e8-4708-befa-3f96facca7b6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f7b699a-59ef-4aef-9b8e-c515f7036941",
								"exec": [
									"pm.test('programme user should not be able to create project application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"should-not-create\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99d748cd-0f2a-412a-bd07-f3ebebed723e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa1464e5-9748-4312-878c-b9d67fadb10a",
								"exec": [
									"pm.test('programme user should not be able to see files when application is DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user should not be able to see files because he cannot see project in DRAFT', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot upload file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eff36afe-5609-473b-9a4d-34e01ae0301c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e69da58e-1cd2-4396-a159-a759fe5eabbd",
								"exec": [
									"pm.test('programme user should not be able to upload APPLICANT file when he cannot read project itself', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot see project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot set description",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "afc5bba9-7240-4da1-aae5-d99bd92d24ea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "07bfd54f-c76c-4627-923d-b2ad38186fd5",
								"exec": [
									"pm.test('programme user should not be able to set description, when he cannot see DRAFT project', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot download file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a32ab32a-042a-4ee6-a800-1c30aa6f603e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "765bfb3f-3f72-4dbf-bc2c-5e415fbd66b4",
								"exec": [
									"pm.test('programme user should not be able to download file, cause he cannot see application in DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "submit and resubmit application",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ca04bcb-6325-4d28-a6b5-3369c9db6acc",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dfd3bb20-03ec-474c-9da5-b48e6c80fe90",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f57f100c-f39c-412a-9e0f-a8a026d30596",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f0e4b45-e244-4ba3-b3a9-ff72c79b8b36",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5a45b0eb-5a31-43b5-ab6c-953c37708368",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8601f49-f874-42e3-aa92-55728176b5f4",
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check submitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c1356d66-dad6-4eef-a3ea-9127db3ba079",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ffdd8519-a45b-40e4-80a7-b314fff30b89",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should be filled in', function() {\r",
									"    pm.expect(application.firstSubmission.updated).not.eql(null);\r",
									"    pm.variables.set('application_submission_time', application.firstSubmission.updated);\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be empty after first submission', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('submission and status should be equal', function() {\r",
									"    pm.expect(application.firstSubmission)\r",
									"        .deep.equal(application.projectStatus);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to SUBMITTED application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd7c93c5-3a5e-4044-a220-e462389c6de8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90f546eb-3546-4a4b-8e98-de8f07e9d5f9",
								"exec": [
									"pm.test('applicant should not be able to upload file to SUBMITTED application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49902530-4060-4423-8b66-320f9f190e9b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5cfcdfe4-702f-4162-b75e-f8069490e397",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('programme user can see files, when application is SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.content[0].name).to.equal('file.txt');\r",
									"    pm.expect(response.totalElements).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03c6caba-7fd8-493a-8730-2ce0f2fe681f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34b26b1b-b8fe-4909-9ebd-39e1cba87795",
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check returned application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40bd2877-be2f-48a6-9a8d-95ca2255b8db",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a676911-aff4-4e3a-973c-cb35817af6da",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be RETURNED_TO_APPLICANT', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should still be empty', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2bc67b71-ce39-4b4f-a67a-6cf491ee1b6d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3b2f4fa-c844-4f67-b6d7-9f2beb46e4d8",
								"exec": [
									"pm.test('program user should not be able to resubmit application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c6c5fda-76d4-4670-bcdd-7e82b748528d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a3ffd52d-82ff-4e10-a57e-d37646d7a8b3",
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check resubmitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae7400fb-72d5-4e07-8f11-68b2fdb833e8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f764cfbe-ebf4-48e7-8455-751d2422c5da",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be now filled in', function() {\r",
									"    pm.expect(application.lastResubmission).not.equal(null);\r",
									"    pm.expect(application.lastResubmission.updated).not.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter eligibility assessment (EA) and decision",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b629790-bd85-43a8-b110-e944ae57dfb7",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "690915ac-d4c0-4c58-a979-7439550f289b",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd957840-9830-45ac-b659-8a5c9f4705a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "220954bf-2ed6-4672-9b1a-46be344b2440",
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "aplicant cannot enter EA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8923d842-319a-43ed-a7bd-52a05b8daf66",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a6254160-36d7-4308-90d5-637036188260",
								"exec": [
									"pm.test('applicant should not be able to enter EA', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"this should not be processed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter EA once",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6499da72-f620-4af4-ac42-8c1137630480",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ab118b9-b862-4fef-9321-b833831f89ee",
								"exec": [
									"pm.test('program user can enter EA once', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('EA is part of the application detail', function() {\r",
									"    pm.expect(application).to.have.property(\"eligibilityAssessment\");\r",
									"    pm.expect(application.eligibilityAssessment).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('status of the application is not changed', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('EA result is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.result)\r",
									"        .to.eql(\"PASSED\");\r",
									"});\r",
									"\r",
									"pm.test('EA note is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.note)\r",
									"        .to.eql(\"status set to passed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"status set to passed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot enter EA twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5da3eba1-2612-419e-ae05-c590cba434bb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32fbb9bd-e581-4916-948c-51e651c92f01",
								"exec": [
									"pm.test('program user should not be able to enter EA second time', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"FAILED\",\r\n    \"note\": \"status set to failed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE without date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e3d96df-d8e4-45db-acc4-72a9a305f188",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dbeb361b-1b09-48b1-b29f-155e5164987c",
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE without date', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nKey).to.eql('project.decision.date.unknown')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE with date in future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a873f01d-f0fc-4cd6-b92f-f2ce7610c174",
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 5);\r",
									"pm.variables.set('date_plus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d124c2a-07e8-4242-9d47-1d3bf04a850b",
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE with date in future', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nFieldErrors.date.i18nKey)\r",
									"        .to.eql('project.status.date.should.be.in.past.or.present')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{date_plus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can change status to ELIGIBLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f9f18f5-c1c4-49e9-9508-9ed396f6724d",
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5);\r",
									"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12c7d227-6b71-4ab0-bc43-4fc5f92f479c",
								"exec": [
									"pm.test('program user can change status to ELIGIBLE', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status decision date is set to date -5days', function() {\r",
									"    pm.expect(application.projectStatus.decisionDate)\r",
									"        .to.eql(pm.variables.get(\"eligibility_decision_date_minus_5\"));\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b80db03-cb24-4457-8245-745e2d4f8fee",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f913c6e-77fa-44d5-8a6b-c96970c46a0e",
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application to ELIGIBLE status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "088627f7-c547-47b1-9652-055356d81b9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56cc5ed5-4836-4f72-a5e6-d8285790e504",
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set back to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to applicant user who resubmitted', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter quality assessment (QA)",
			"item": [
				{
					"name": "when SUBMITTED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b60a2e24-8d0c-4553-b8b2-fb328573cfb1",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cbdc240a-3765-45ec-8986-6469b7caab5b",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7354336-8112-4ec5-a655-2ffc6e83d0a1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e171f507-2d56-4971-9bac-cc1a482e13f6",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6a62689-371e-4d6e-80fe-e13212077a14",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a49f805-4ba0-4b3a-bbec-6f1babd01f59",
										"exec": [
											"pm.test('applicant should not be able to enter QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA once",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86b9e6ec-1f45-4190-b420-d1176e2a7449",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7f7810-98e9-4a12-9359-74738e67aaaf",
										"exec": [
											"pm.test('program user can enter QA once', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('QA is part of the application detail', function() {\r",
											"    pm.expect(application).to.have.property(\"qualityAssessment\");\r",
											"    pm.expect(application.qualityAssessment).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test('status of the application is not changed', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
											"});\r",
											"\r",
											"pm.test('QA result is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.result)\r",
											"        .to.eql(\"RECOMMENDED_FOR_FUNDING\");\r",
											"});\r",
											"\r",
											"pm.test('QA note is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.note)\r",
											"        .to.eql(\"status set to recommended for funding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter QA twice Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ba048dd-fdec-4243-abf8-022c1e6b8e73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de31cecd-126e-4434-a8f4-8d4799ac5056",
										"exec": [
											"pm.test('program user should not be able to enter QA second time', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_WITH_CONDITIONS\",\r\n    \"note\": \"status set to recommended with conditions\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "when INELIGIBLE",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "88458a9c-73f9-40e1-b36b-ed5bba9dae46",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b5f23b00-2a1d-448f-be6e-c368e744cc47",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10eb8a36-e6bf-46b6-8467-fe9294e88f0f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a29d3e2e-b5d9-4cd7-84f7-42d377c71a50",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51391238-6b61-4ad3-be75-ea5cf9836a61",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cfc2c623-73fa-42e0-8cb2-31ce431fd8d0",
										"exec": [
											"pm.test('program user can enter EA = FAILED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"FAILED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to INELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b910b83d-8e4b-4628-a71c-81b3effe09fb",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a328a1d-5dfa-461a-910c-05e23ddfa118",
										"exec": [
											"pm.test('program user can change status to INELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to INELIGIBLE', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('INELIGIBLE');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"INELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA when INELIGIBLE already",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "904a3cad-8710-4620-be82-6ba0cbacf4b5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd3cd98a-df20-43e2-bd15-da31ebcb0a41",
										"exec": [
											"pm.test('applicant should not be able to enter QA when INELIGIBLE state already', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter funding decision (FD)",
			"item": [
				{
					"name": "with QA and ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e1714e13-6537-4604-a6ee-25a7ac186f16",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7fd1825e-2d0b-4522-88a6-7f78df4cc828",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00464ae6-2f34-4197-b4c2-4883ebd169e9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e75fc0cf-c31a-407c-88a8-c603483a2278",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c351b6fe-b3fe-4d1f-bfd4-3b665ae067e8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30f52ac1-1334-4eee-ada4-6bacfdaadc49",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "578078bc-4343-47d4-90a2-59eb89b2e256",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24db5fc6-50ff-476c-b433-98a8da6adb44",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "df84aa8a-263b-4dfd-af6a-76f41a5a4497",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c91f2502-4a7b-498c-98c8-f045bba50418",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2e329c3-4d46-4105-9ca5-bdaf9513b0ae",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "069fcc07-eedc-41fd-8b75-752a87ec1c24",
										"exec": [
											"pm.test('program user can change status to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"note\": \"changed to approved\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "without ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1ce8adf-db7d-4a11-990b-569a4943d9e4",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4979aaec-6568-4357-97fe-39e1a4259636",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "28e34f61-4283-44e9-83d2-880c7da2e17b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a6dcba8c-9c70-4d35-b1a2-26b052a2f1a1",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "515888cb-2f3e-40a4-bf45-ffa21bb5be04",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "11e01183-c4bd-48bc-bd0b-656544bf4327",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without ED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c47ec87-0a4c-41d7-a86e-c57b3b023f94",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8874560b-942b-414f-9251-f771255aa2a4",
										"exec": [
											"pm.test('program user should not be able to enter funding without ED', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "without QA",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9df667b5-0aed-4dac-9482-fe3df4844597",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b999ffff-ce4f-471e-a0b1-760053a3fb22",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee938031-d32f-4fc9-b9ba-8703f8fa7e52",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c61919e-c50e-46f4-8b61-3175f4c2b021",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9cb99139-c41a-4580-9e5c-a07fb894083d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9429b73b-ba07-428f-8c9d-cbd90e131778",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d05c2893-4abb-4c39-8ef4-0fdd0a7b454a",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ab5bf7d-957f-4fe2-8b75-d881a56dd718",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a95d67b3-a572-4fc9-8e44-dce68da58f48",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f3b27bb-d2eb-4537-9bf3-132ad5a37ca2",
										"exec": [
											"pm.test('program user should not be able to enter funding without QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "enter FD, return and resubmit",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03ebb6f5-cdd2-4a2c-86d5-1c71e4bf37ac",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8a0c784c-e237-4262-873c-632172726e73",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc3d7bb2-bfff-4a49-b303-aff840f582d3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97daa7ba-161b-4c3b-9cf4-942954556a63",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3a8c5e2-d069-4d9c-9f34-15aae7fb6d80",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d75a609-ded1-4dcc-902c-beb61cc3f9aa",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d7e02ef9-c0b8-490c-9519-4b93d50842bc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d535af3-03b7-4355-950b-4d885cfb88a7",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f25af53-a3b8-4663-9e5e-4d0508554953",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df5bd796-8017-427e-b9a1-700c4868ece0",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD - APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c92399e5-97a7-4ff1-9dad-87c39682de16",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "09d512f9-c564-499f-872c-82776953b163",
										"exec": [
											"pm.test('program user can change status to APPROVED_WC', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved with conditions\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED_WITH_CONDITIONS\",\r\n    \"note\": \"changed to approved with conditions\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can return application after FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bbf92cc3-eb25-4911-9b64-02d34c4609ec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d3d86ec5-1b25-4735-978f-4e2b13ce5535",
										"exec": [
											"pm.test('program user can return application back to user', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant can resubmit back to APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1e09d16f-79a2-4b1a-82d8-424b33a1fadd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca1a9d24-95e3-4497-bf1d-2758e0e2397b",
										"exec": [
											"pm.test('applicant should be able to resubmit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be back to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application).to.have.property('lastResubmission');\r",
											"    pm.expect(application).to.have.property('projectStatus');\r",
											"    pm.expect(application.lastResubmission)\r",
											"        .deep.eql(application.projectStatus);\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to applicant who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "programm user can set final funding to APPROVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b94ce160-8d32-43bb-a057-9b9b2fa5f0ce",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 2);\r",
											"pm.variables.set('funding_decision_date_minus_2', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8621d99-f6be-4c84-9fa4-11ddaf44fef0",
										"exec": [
											"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to day-5', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_2\"));\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application.fundingDecision).to.have.property('id');\r",
											"    pm.expect(application.projectStatus).to.have.property('id');\r",
											"    // fundingDecision is still referring to the first funding attempt\r",
											"    pm.expect(application.fundingDecision.id)\r",
											"        .not.eql(application.projectStatus.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"date\": \"{{funding_decision_date_minus_2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Partner and Associated Organization",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe9763d4-cac2-472b-98df-eba2b9b9d846",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5248faba-647c-470e-aad5-73148b78bf5d",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74dd672d-6a7b-4d61-ae8e-fdd4123de602",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "071e4346-a4c6-4950-a9e7-92461e96271b",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdA', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner A\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4f367cc1-1c73-4cca-b42f-b43a148c8cf7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b92ff0c4-78cc-4e4e-b7fe-862c1b40ff33",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner B', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdB', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner B\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner B\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner A LeadPartner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c6dead3-c456-4129-8057-2dca6c47872d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e9b9d47-a408-4cbb-9858-05971d9a48b2",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can update project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A LEAD\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdA}}\",\r\n    \"abbreviation\": \"Partner A LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eceb19d9-b467-4a7d-b62b-64a400ae22ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7cf535ae-7af9-491d-9a41-610980ce153b",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot update Partner B to be LEAD when A already is', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									"\r",
									"pm.test('correct id is sent to FE in error response', function() {\r",
									"    pm.expect(error.i18nArguments).to.eql([pm.variables.get('partnerIdA') + \"\", \"Partner A LEAD\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - force",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b18cd3a-7979-48d9-b5f9-5186470afb2a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a1c8e562-9fc0-4266-9f82-10ebe6faa699",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can force to update project Partner B to be LEAD', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "767e9b24-d7f5-4d34-b50b-e78118b7ad78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9442f66e-4db4-4b41-b6d2-bd234dea75e3",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot create LeadPartner C cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - force fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c19f25a6-5e0e-4302-97a7-46f4af452eb2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b45ba378-b625-4b3f-9fd7-ad6a66b2f446",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot override LeadPartner A cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.oldLeadPartnerId.is.not.lead\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "318cc19c-d3b6-4c72-96dc-4d33eef574da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b41042c8-f571-4271-a7fc-b0d5e2ca0bc6",
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with address', function() {\r",
									"    pm.expect(organization.address.street).to.eql(\"test street\");\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with both contacts', function() {\r",
									"    pm.expect(organization.contacts).to.have.deep.members([\r",
									"        {\r",
									"            \"type\": \"LegalRepresentative\",\r",
									"            \"title\": null,\r",
									"            \"firstName\": \"Rafael\",\r",
									"            \"lastName\": \"Nadal\",\r",
									"            \"email\": \"rafael@atp.com\",\r",
									"            \"telephone\": \"+6 30 216 896\"\r",
									"        },\r",
									"        {\r",
									"            \"type\": \"ContactPerson\",\r",
									"            \"title\": \"Champion\",\r",
									"            \"firstName\": \"Roger\",\r",
									"            \"lastName\": \"Federer\",\r",
									"            \"email\": \"roger@atp.com\",\r",
									"            \"telephone\": \"+6 20 542 265\"\r",
									"        }\r",
									"    ]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdA}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdA}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdA}}\",\r\n    \"address\": {\r\n        \"street\": \"test street\"\r\n    },\r\n    \"contacts\": [\r\n        {\r\n            \"type\": \"ContactPerson\",\r\n            \"title\": \"Champion\",\r\n            \"firstName\": \"Roger\",\r\n            \"lastName\": \"Federer\",\r\n            \"email\": \"roger@atp.com\",\r\n            \"telephone\": \"+6 20 542 265\"\r\n        },\r\n        {\r\n            \"type\": \"LegalRepresentative\",\r\n            \"firstName\": \"Rafael\",\r\n            \"lastName\": \"Nadal\",\r\n            \"email\": \"rafael@atp.com\",\r\n            \"telephone\": \"+6 30 216 896\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e5574cf6-95e7-4f1e-8658-8e9baac8d37e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d1c34dc8-ddd0-4879-a9fe-35f9f3450ea5",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdD', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner D\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "926fb6cf-23e2-4623-9020-dd3ed887ef2f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3101c674-6820-405f-803d-91c90870aeaa",
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization for Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdD'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdD'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdD}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdD}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdD}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete project partner D together with AO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b2d0916-ba6b-4d80-b5e1-1c71b59744f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0fe39e3c-6703-451c-b690-e382b07a897a",
								"exec": [
									"pm.test('applicant can delete project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partnerIdD}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partnerIdD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check AssociatedOrganization D deleted A stays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "63230a24-d96b-4307-b219-9a7e47632c14",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "509ad2e4-b47c-45b2-8bb2-c4ad2b270532",
								"exec": [
									"const page = pm.response.json();\r",
									"\r",
									"pm.test('applicant can fetch associated organizations for Project', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('there is now only one associated organization', function() {\r",
									"    pm.expect(page.totalElements).to.eql(1);\r",
									"    pm.expect(page.content[0].nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(page.content[0].nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('when only one associated organization, sortNumber is 1', function() {\r",
									"    pm.expect(page.content[0].sortNumber).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4a6d6f92-634f-43c4-acaf-1dabe8bfaec6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9a652971-ef74-4728-9db4-a3c98688c7c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Partner - Details",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea41db04-09d1-4a51-99b7-3cb8de1e0baa",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9c51088-8fc3-4334-96b0-49d59ab053df",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b8e9a95-5df9-436c-9cf7-3f3603ca7cf8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e6c9f94-f63e-46ab-b253-b484f120a78c",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partner_id', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "set both addresses to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1591e0a5-aeac-4116-96d3-f736b54476a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c53debf7-3a39-457a-9513-1920dca3b922",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set addresses to partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both addresses are there', function() {\r",
									"    pm.expect(partner.addresses.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"street\": \"test org\"\r\n    },\r\n    {\r\n        \"type\": \"Department\",\r\n        \"street\": \"test dprt\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/address",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove 1st address and update 2nd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b66f9bec-4591-4ea6-8965-41fb9409345d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "40afb0d8-326a-41e1-a70b-a943400662c8",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can remove addresses from partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('just one address is now returned', function() {\r",
									"    pm.expect(partner.addresses.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('address is saved correctly', function() {\r",
									"    const addr = partner.addresses[0];\r",
									"    pm.expect(addr.type).to.eql(\"Organization\");\r",
									"    pm.expect(addr.country).to.eql(\"SK\");\r",
									"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
									"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
									"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
									"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
									"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\": \"SK\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/address",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "set both contacts to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a137e8a3-83aa-46ce-a9e9-452f7c8c887c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2bb8616d-b165-478a-adab-8480ac63fb31",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set contacts to partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both contacts are there', function() {\r",
									"    pm.expect(partner.contacts.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"firstName\": \"test LR\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"firstName\": \"test CP\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/contact",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove 1st contact and update 2nd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2de2718-a730-4a1a-ad0f-e04a48d3b594",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d662c513-37ee-4346-a8ba-a6d0ba25e768",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can remove contacts from partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('just one contact is now returned', function() {\r",
									"    pm.expect(partner.contacts.length).to.eql(1);\r",
									"}); \r",
									"\r",
									"pm.test('contact is saved correctly', function() {\r",
									"    const contact = partner.contacts[0];\r",
									"    pm.expect(contact.type).to.eql(\"ContactPerson\");\r",
									"    pm.expect(contact.title).to.eql(\"Bachelor\");\r",
									"    pm.expect(contact.firstName).to.eql(\"Donald\");\r",
									"    pm.expect(contact.lastName).to.eql(\"Trump\");\r",
									"    pm.expect(contact.email).to.eql(\"mc.donald@whitehouse.gov\");\r",
									"    pm.expect(contact.telephone).to.eql(\"202-456-6213\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"Bachelor\",\r\n        \"firstName\": \"Donald\",\r\n        \"lastName\": \"Trump\",\r\n        \"email\": \"mc.donald@whitehouse.gov\",\r\n        \"telephone\": \"202-456-6213\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/contact",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "set motivation to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64b2b0e6-b513-47fa-9b2e-10c3a6353bba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6cad8422-f9a2-4822-a3f1-498dccec20b9",
								"exec": [
									"const motivation = pm.response.json().motivation;\r",
									"\r",
									"pm.test('applicant can set motivation to partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('motivation is set correctly', function() {\r",
									"    pm.expect(motivation.organizationRelevance).to.eql('This project is definitely relevant enough to be founded.');\r",
									"    pm.expect(motivation.organizationRole).to.eql('test latin àâçéèêëîïôùûüÿ');\r",
									"    pm.expect(motivation.organizationExperience).to.eql('We have 16 millions years of experience in this particular area.');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"organizationRelevance\": \"This project is definitely relevant enough to be founded.\",\r\n    \"organizationRole\": \"test latin àâçéèêëîïôùûüÿ\",\r\n    \"organizationExperience\": \"We have 16 millions years of experience in this particular area.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/motivation",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"motivation"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - staff costs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da9b52b4-f839-499f-bcce-5cbea9b3c20d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4dc243db-9eba-4c47-b18f-68b688c59e43",
								"exec": [
									"const staffCosts = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set budget staff costs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts are set correctly', function() {\r",
									"    pm.expect(staffCosts.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts sums are calculated correctly', function() {\r",
									"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(48800);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Project Manager\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 10,\r\n        \"pricePerUnit\": 4500\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Doctor\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 1,\r\n        \"pricePerUnit\": 3800\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/staffcost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"staffcost"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - travel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18c9cf1b-b34f-4ec9-8d30-d969df883dd6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "768731a9-75bb-4e32-8d00-8a4d3296f2ae",
								"exec": [
									"const travel = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set budgettravel', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('travel is set correctly', function() {\r",
									"    pm.expect(travel.length).to.eql(1);\r",
									"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
									"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
									"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Gran Canaria\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/travel",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"travel"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - infrastructure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "739d2974-996b-427a-b176-547ffa2df728",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b9a5156-449f-4f1f-bd6b-af4932b0341f",
								"exec": [
									"const infrastructure = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set infrastructure budget', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('infrastructure budget is set correctly', function() {\r",
									"    pm.expect(infrastructure.length).to.eql(1);\r",
									"    pm.expect(infrastructure[0].numberOfUnits).to.eql(2);\r",
									"    pm.expect(infrastructure[0].pricePerUnit).to.eql(550);\r",
									"    pm.expect(infrastructure[0].rowSum).to.eql(1100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Dell Aspiron\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 550\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/infrastructure",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"infrastructure"
							]
						}
					},
					"response": []
				},
				{
					"name": "set office and administration flatRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9437b463-68e4-4b3b-ab6b-72a0617be4a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf768f58-ad55-49d1-84d9-4338fe3e7c20",
								"exec": [
									"pm.test('applicant can set officeadministration flatRate', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"officeAdministrationFlatRate\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/options",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b37c57d-7881-497c-849b-364099d55dc7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9eeb839-62a0-4bb7-931f-7c34d4287955",
								"exec": [
									"pm.test('total is calculated correctly', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(54780.18);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/total",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "set staff costs flatRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7814ee3-cd04-43ec-9677-dee39235949d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4235edf4-f1b2-4c72-82fd-626b45f23d80",
								"exec": [
									"pm.test('applicant can set staffCosts flatRate', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffCostsFlatRate\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/options",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bad4d954-41e5-4760-b6ef-d8030d340d70",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "01fde1da-bd1e-49a0-be01-cefda35444c6",
								"exec": [
									"pm.test('total is calculated correctly', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(1210.19);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/total",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project Lead partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2db4f138-e2bf-4997-956b-55d353a6007a",
								"exec": [
									"const partnerAbbr = pm.variables.replaceIn('{{$randomAbbreviation}}')\r",
									"pm.variables.set(\r",
									"    'partner_abbreviation',\r",
									"    partnerAbbr\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6af2e4e0-3da8-48bc-b20c-8361baddab50",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partner_id_lead', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('project partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(pm.variables.get('partner_abbreviation'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"{{partner_abbreviation}}\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - staff costs to Lead",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a2dd618-e695-4507-8567-f3d1ff158af7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e32524b-d9d3-4172-b2a4-12b5076e0a51",
								"exec": [
									"const staffCosts = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set budget staff costs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts are set correctly', function() {\r",
									"    pm.expect(staffCosts.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts sums are calculated correctly', function() {\r",
									"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(22000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Teachers\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 8800\r\n    },\r\n    {\r\n        \"description\": [\r\n            {\r\n                \"language\": \"{{inputLanguage}}\",\r\n                \"translation\": \"Students\"\r\n            }\r\n        ],\r\n        \"numberOfUnits\": 22,\r\n        \"pricePerUnit\": 200\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/staffcost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"staffcost"
							]
						}
					},
					"response": []
				},
				{
					"name": "set office and administration flatRate to Lead Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca3c1bfd-762e-4b7b-8dd3-42c0e061c705",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2d1d016d-42e4-492a-9c89-c6b97ab8a42e",
								"exec": [
									"pm.test('applicant can set officeadministration flatRate', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"officeAdministrationFlatRate\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/options",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate total for Lead",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e62a3d34-74b6-497f-9c8c-876b679379e7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19f1a1fa-d310-45ba-8a7c-db526366bf94",
								"exec": [
									"pm.test('total is calculated correctly', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(24200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/total",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "check project budget for both partners",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f2a61d0-2c73-4bb5-bd0e-5b16c860d332",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8db41fd9-d121-4f70-8732-cfe37b1454d8",
								"exec": [
									"pm.test('project budget can be retrieved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both partners are returned', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    pm.expect(res).to.have.length(2);\r",
									"});\r",
									"\r",
									"pm.test('partners are sorted', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.id).to.eql(pm.variables.get('partner_id_lead'));\r",
									"    pm.expect(res[1].partner.id).to.eql(pm.variables.get('partner_id'));\r",
									"});\r",
									"\r",
									"pm.test('partners have correct data filled in', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.sortNumber).to.eql(1);\r",
									"    pm.expect(res[1].partner.sortNumber).to.eql(2);\r",
									"\r",
									"    pm.expect(res[0].staffCosts).to.eql(22000.0);\r",
									"    pm.expect(res[0].travelCosts).to.eql(0);\r",
									"    pm.expect(res[0].externalCosts).to.eql(0);\r",
									"    pm.expect(res[0].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[0].infrastructureCosts).to.eql(0);\r",
									"    pm.expect(res[0].officeAndAdministrationCosts).to.eql(2200.0);\r",
									"    pm.expect(res[0].totalSum).to.eql(24200);\r",
									"\r",
									"    pm.expect(res[1].partner.country).to.eql('SK');\r",
									"    pm.expect(res[1].staffCosts).to.eql(110.01);\r",
									"    pm.expect(res[1].travelCosts).to.eql(0.18);\r",
									"    pm.expect(res[1].externalCosts).to.eql(0);\r",
									"    pm.expect(res[1].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[1].infrastructureCosts).to.eql(1100);\r",
									"    pm.expect(res[1].officeAndAdministrationCosts).to.eql(0);\r",
									"    pm.expect(res[1].totalSum).to.eql(1210.19);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/budget",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"budget"
							]
						}
					},
					"response": []
				},
				{
					"name": "set co-financing to Lead Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19d03d01-635f-4047-88ff-a8f9655f2f9c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d05028e-46a1-4e90-8fb4-f404d7ae8ddf",
								"exec": [
									"const finances = pm.response.json().finances;\r",
									"const contributions = pm.response.json().partnerContributions;\r",
									"\r",
									"pm.test('applicant can set Co-Finaning', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('financing and funds are correct', function() {\r",
									"    pm.expect(finances[0].percentage).to.eql(75);\r",
									"    pm.expect(finances[0].fund).to.not.be.empty;\r",
									"    pm.expect(finances[1].percentage).to.eql(25);\r",
									"    pm.expect(finances[1].fund).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test('1st contribution is correct', function() {\r",
									"    pm.expect(contributions[0].name).to.eql(pm.variables.get('partner_abbreviation'));\r",
									"    pm.expect(contributions[0].status).to.eql('Private');\r",
									"    pm.expect(contributions[0].isPartner).to.be.true;\r",
									"    pm.expect(contributions[0].amount).to.eql(6200);\r",
									"});\r",
									"\r",
									"pm.test('2nd contribution is correct', function() {\r",
									"    pm.expect(contributions[1].name).to.eql('Source of money 01');\r",
									"    pm.expect(contributions[1].status).to.eql('Public');\r",
									"    pm.expect(contributions[1].isPartner).to.be.false;\r",
									"    pm.expect(contributions[1].amount).to.eql(10000);\r",
									"});\r",
									"\r",
									"pm.test('3rd contribution is correct', function() {\r",
									"    pm.expect(contributions[2].name).to.eql('Source of money 02');\r",
									"    pm.expect(contributions[2].status).to.eql('AutomaticPublic');\r",
									"    pm.expect(contributions[2].isPartner).to.be.false;\r",
									"    pm.expect(contributions[2].amount).to.eql(5000);\r",
									"});\r",
									"\r",
									"pm.test('4th contribution is correct', function() {\r",
									"    pm.expect(contributions[3].name).to.eql('Source of money 03');\r",
									"    pm.expect(contributions[3].status).to.eql('Private');\r",
									"    pm.expect(contributions[3].isPartner).to.be.false;\r",
									"    pm.expect(contributions[3].amount).to.eql(3000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"finances\": [\r\n        {\r\n            \"percentage\": 25\r\n        },\r\n        {\r\n            \"percentage\": 75,\r\n            \"fundId\": {{programmeFundId}}\r\n        }\r\n    ],\r\n    \"partnerContributions\": [\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 01\",\r\n            \"status\": \"Public\",\r\n            \"amount\": 10000\r\n        },\r\n        {\r\n            \"isPartner\": true,\r\n            \"name\": \"THIS NAME SHOULD BE IGNORED\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 6200\r\n        },\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 02\",\r\n            \"status\": \"AutomaticPublic\",\r\n            \"amount\": 5000\r\n        },\r\n        {\r\n            \"isPartner\": false,\r\n            \"name\": \"Source of money 03\",\r\n            \"status\": \"Private\",\r\n            \"amount\": 3000\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/cofinancing",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"cofinancing"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6141da60-cd69-474c-825d-d574a6447c54",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf1fa074-83ee-4cfe-a998-557d8351833e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{admin_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{admin_email}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0c01d963-4d87-49f3-a7f3-1c8e0e462bce",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "91632305-4a8d-4d4e-b74b-337f807d39a0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7e81a1c9-e994-47e0-be4c-916c2e6cc013",
			"key": "url",
			"value": "specify_url_here"
		}
	],
	"protocolProfileBehavior": {}
}