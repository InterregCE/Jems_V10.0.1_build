{
	"info": {
		"_postman_id": "b8bc7295-e6bc-4aac-a954-b5e441edcfc1",
		"name": "ems-rest-test",
		"description": "Check EMS application for common use-cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "create users for following tests",
					"item": [
						{
							"name": "create admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "168e8a17-3f2b-4e71-8999-3a13ae59246f",
										"exec": [
											"const username = pm.variables.get(\"admin_user_name\")",
											"const response = pm.response.json()",
											"",
											"pm.test('should be created with correct credentials', function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(response.email).to.equal(pm.variables.get(\"admin_user_email_to_create\"));",
											"",
											"    pm.environment.set(\"admin_email\", response.email);",
											"    pm.environment.set(\"admin_password\", response.email);",
											"});",
											"",
											"pm.test('should be created with correct name and surname', function () {",
											"    pm.expect(response.name).to.equal(pm.variables.get(\"admin_name\"));",
											"    pm.expect(response.surname).to.equal(pm.variables.get(\"admin_surname\"));",
											"});",
											"",
											"pm.test('should be created with correct role', function () {",
											"    pm.expect(response.userRole.name).to.contain('admin');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "803c415f-d807-4891-b43e-1c68023fb406",
										"exec": [
											"var uuid = require('uuid');",
											"const randomIdentifier = uuid.v4().substring(24, 32);",
											"",
											"pm.variables.set('admin_user_email_to_create', randomIdentifier + \"@admin.eu\");",
											"pm.variables.set('admin_name', pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set('admin_surname', pm.variables.replaceIn('{{$randomLastName}}'));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{admin_user_email_to_create}}\",\n\t\"name\": \"{{admin_name}}\",\n\t\"surname\": \"{{admin_surname}}\",\n    \"userRoleId\": 1\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "register applicant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26bbf306-2f59-493d-badd-f2e11184c5ad",
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('applicant_email', randomIdentifier + \"@applicant.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1bc67fea-e7a2-4692-95a2-8382b09899ca",
										"exec": [
											"pm.test('applicant can register', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('applicant_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{applicant_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"password\": \"{{applicant_email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/registration",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "create programme user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c9edc75-4a9e-434b-8caa-d9ee8ba949cc",
										"exec": [
											"var uuid = require('uuid');\r",
											"const randomIdentifier = uuid.v4().substring(24, 32);\r",
											"pm.variables.set('programme_user_email', randomIdentifier + \"@programme-user.eu\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5f17db18-e853-4093-8fb5-ffdb2ec9f671",
										"exec": [
											"pm.test('programme user can be created', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.environment.set('programme_user_email', pm.response.json().email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{programme_user_email}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"userRoleId\": \"2\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6cf6972d-0ef5-4fca-a5e2-2b518917b54b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "320fe56c-465c-4017-86d4-2153c9cc692b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "retrieve some existing programme policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06e54ab8-23bc-4e3c-8a7f-2fcb373bab3f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e7b20294-0432-45fc-940f-baf781c5c301",
								"exec": [
									"pm.test('we can retrieve programme priorities', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme priority or we need to create one', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('totalElements');\r",
									"    if (response.totalElements > 0) {\r",
									"        const policies = response.content[0].programmePriorityPolicies;\r",
									"        if (policies.length) {\r",
									"            const policy = policies[0].programmeObjectivePolicy\r",
									"            console.log('There is already a policy ' + policy + ', which we will use for calls during this test');\r",
									"            pm.environment.set('programmePriorityPolicy', policy);\r",
									"        } else {\r",
									"            console.log('There is already a programme priority, but no policy. We have to create one.');\r",
									"            pm.environment.set('programmePriorityPolicy', null);\r",
									"        }\r",
									"    } else {\r",
									"        console.log('There are no any programme priorities yet. We need to create one.');\r",
									"        pm.environment.set('programmePriorityPolicy', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then create programme priority with policy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2daa5766-8b29-487a-9aa6-ad4c3ccaad4d",
								"exec": [
									"function zeroPrefixedNum(num, size) {\r",
									"    var s = \"000000000\" + num;\r",
									"    return s.substr(s.length-size);\r",
									"}\r",
									"\r",
									"const programmeCode = zeroPrefixedNum(Math.floor(Math.random() * 1000), 4)\r",
									"pm.variables.set('programmeCode', programmeCode)\r",
									"\r",
									"if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"    console.log('There is no any programme priority policy we can use, so we need to create one.');\r",
									"    pm.variables.set(\r",
									"        'programmePriorityPolicies',\r",
									"        JSON.stringify([{\r",
									"            \"programmeObjectivePolicy\": \"AdvancedTechnologies\",\r",
									"            \"code\": \"AT\"\r",
									"        }])\r",
									"    );\r",
									"} else {\r",
									"    console.log('There is already a programme priority with policy, so we will use that one.');\r",
									"    pm.variables.set('programmePriorityPolicies', null);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13a25934-6038-495e-b266-e5eea7ecd863",
								"exec": [
									"pm.test('programme priority was created if needed', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmePriorityPolicy') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We created new programme priority.')\r",
									"        pm.environment.set('programmePriorityPolicy', 'AdvancedTechnologies');\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT create new programme priority, no variable is changing.');\r",
									"        // pm.expect(pm.response.json().i18nFieldErrors.programmePriorityPolicies.i18nKey)\r",
									"        //     .to.eql(\"programme.priority.priorityPolicies.should.not.be.null\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{programmeCode}}\",\r\n    \"title\": \"API test Programme Priority {{programmeCode}}\",\r\n    \"objective\": \"PO1\",\r\n    \"programmePriorityPolicies\": {{programmePriorityPolicies}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmepriority",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmepriority"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve some existing programme funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d385f525-79da-4a99-a67a-0e1fa8c82123",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b88ab92d-f7be-4001-b67a-2221bed4c822",
								"exec": [
									"pm.test('we can retrieve programme funds', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('we have programme fund or we need to enable first one', function() {\r",
									"    const funds = pm.response.json().filter(f => f.selected);\r",
									"    if (funds.length > 0) {\r",
									"        const fundId = funds[0].id;\r",
									"        console.log('There is fund wth id ' + fundId);\r",
									"        pm.environment.set('programmeFundId', fundId);\r",
									"    } else {\r",
									"        console.log('There are no any programme funds yet enabled. We need to enable one.');\r",
									"        pm.environment.set('programmeFundId', null);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "[IF] not exists, then enable programme fund 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9bbf6f08-111d-4354-85d4-ede244601330",
								"exec": [
									"if (pm.environment.get('programmeFundId') == null) {\r",
									"    console.log('There is no any programme fund enabled we can use, so we need to enable one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', 1);\r",
									"} else {\r",
									"    console.log('There is already a programme fund enabled, so we will use that one.');\r",
									"    pm.variables.set('programmeFundIdToBeEnabled', \"not-existing\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3aaf4a5d-0760-4b7f-a3be-3a61be67d39c",
								"exec": [
									"pm.test('programme fund was enabled', function() {\r",
									"    console.log('programmePriorityPolicy is set to ' + pm.environment.get('programmePriorityPolicy'));\r",
									"    if (pm.environment.get('programmeFundId') == null) {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log('We enabled programme fund id=1');\r",
									"        pm.environment.set('programmeFundId', 1);\r",
									"    } else {\r",
									"        pm.response.to.have.status(400);\r",
									"        console.log('We did an invalid POST to NOT enable new programme funds, no variable is changing.');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"funds\": [\r\n        {\r\n            \"id\": {{programmeFundIdToBeEnabled}},\r\n            \"selected\": true\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/programmefund",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"programmefund"
							]
						}
					},
					"response": []
				},
				{
					"name": "create call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d9e2ab8-3ab5-4b95-8242-640210b496c3",
								"exec": [
									"const callName = pm.variables.replaceIn('{{$randomCatchPhrase}}')\r",
									"pm.variables.set(\r",
									"    'call_name_to_create',\r",
									"    callName.substr(0,150)\r",
									");\r",
									"\r",
									"var callDateStart = new Date();\r",
									"callDateStart.setDate(callDateStart.getDate() - 1);\r",
									"pm.variables.set('callDateStart', callDateStart.toISOString());\r",
									"\r",
									"var callDateEnd = new Date();\r",
									"callDateEnd.setDate(callDateEnd.getDate() + 10);\r",
									"pm.variables.set('callDateEnd', callDateEnd.toISOString());\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edb0a728-d0c2-40d3-91df-f839427ed6e1",
								"exec": [
									"pm.test('call can be created', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"callId\", pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{call_name_to_create}}\",\n\t\"priorityPolicies\": [ \"{{programmePriorityPolicy}}\" ],\n    \"funds\": [{{programmeFundId}}],\n\t\"startDate\": \"{{callDateStart}}\",\n\t\"endDate\": \"{{callDateEnd}}\",\n    \"lengthOfPeriod\": 12\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/call",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call"
							]
						}
					},
					"response": []
				},
				{
					"name": "setup possible flatRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "640e5a40-6211-43fe-92b9-72a306fd5129",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9ba38d0-41f9-4940-905b-c17d504d7eef",
								"exec": [
									"pm.test('call flatrate setup is saved successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"StaffCost\",\r\n        \"rate\": 20,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"OfficeOnStaff\",\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"OfficeOnOther\",\r\n        \"rate\": 25,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"TravelOnStaff\",\r\n        \"rate\": 15,\r\n        \"isAdjustable\": true\r\n    },\r\n    {\r\n        \"type\": \"OtherOnStaff\",\r\n        \"rate\": 40,\r\n        \"isAdjustable\": true\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/flatrate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"flatrate"
							]
						}
					},
					"response": []
				},
				{
					"name": "publish call",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15fdd486-1139-44df-9635-011c5b1c89fa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2821c7e-d623-4eb9-ad7d-3ab35b8f7c7f",
								"exec": [
									"pm.test('call is published successfully', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/call/{{callId}}/publish",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"call",
								"{{callId}}",
								"publish"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a42d0bc4-84f4-43fd-81b3-8f05e8b779f5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "86ee5aba-657f-46aa-82db-996ca7eeb369",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7100951-94b6-4111-be14-c0acb93b916e",
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f3285cd-b8e7-433e-8693-91a4b5ce445f",
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105955b0-248f-426a-9586-b370209c2f1a",
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c516f34d-e589-4faa-a3ed-b0b19ec6916c",
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a00bca5-020e-4801-990b-dc5bef7025a1",
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25277490-14ed-421e-9c1f-92ffc5cd95e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "97c6d426-7fc8-4793-b71d-227796db1657",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d3ae38-a17b-424a-9767-cf09078f67c3",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f7f4c32-6d81-439c-908c-6158c404419d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"\",\n\t\"surname\": \"\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c670e13e-7cd1-4064-84bc-38451733f3a8",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.should.not.be.empty');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a2e83482-71e0-4315-8dc5-1554f3dcb47f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userRoleId\": null\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bec0583f-7991-4d9c-8f65-9a3efe9134a4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b00f34dd-989c-4549-93a2-a0a3dcdca214",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c062e5b0-3188-489b-a978-911252b2e09b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f19fcfb6-77ed-443f-9140-edcfb1c6817f",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "14f19a9d-22e1-41d6-9bc6-f02e93213e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2baeb26e-dd33-4e4f-bb12-ee405a0efc24",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.size.too.long');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"test-proj-this-is-a-very-long-name\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b21f3773-2dbe-47dc-9ebb-903ad94dc9d8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6829013a-363b-4e5c-80fd-7aafda27c7b0",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.should.not.be.empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"\",\n\t\"projectCallId\": null\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd92a5a2-3937-4d1d-b900-071ef85c893b",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'project_acronym_to_create',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0db6ac5d-fbb3-4489-9dde-4f27f20dcde3",
								"exec": [
									"const application = pm.response.json()\r",
									"\r",
									"pm.test('project should be created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application).to.have.property(\"id\");\r",
									"    pm.expect(application.id).not.eql(null);\r",
									"    pm.variables.set(\"projectId\", application.id);\r",
									"});\r",
									"\r",
									"pm.test('acronym should fit', function() {\r",
									"    pm.expect(application).to.have.property(\"acronym\");\r",
									"    pm.expect(application.acronym).to.eql(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('submission should be empty', function() {\r",
									"    pm.expect(application).to.have.property(\"firstSubmission\");\r",
									"    pm.expect(application.firstSubmission).to.eql(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"projectCallId\": {{callId}}\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "fill in project data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3a4e3a7-32a9-472f-9df3-515837f31e8f",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomBs}}')\r",
									"pm.variables.set(\r",
									"    'project_title',\r",
									"    projectName.substr(0,250)\r",
									");\r",
									"\r",
									"const projectDuration = pm.variables.replaceIn('{{$randomInt}}')\r",
									"pm.variables.set(\r",
									"    'project_duration',\r",
									"    (projectDuration % 999 + 1)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05caf39c-f59a-45c5-b5f3-ea54e05d5829",
								"exec": [
									"pm.test('project data should be saved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym_to_create}}\",\n\t\"specificObjective\": \"{{programmePriorityPolicy}}\",\n    \"title\": \"{{project_title}}\",\n\t\"duration\": {{project_duration}},\n    \"introProgrammeLanguage\": \"{{$randomLoremParagraph}}\\n{{$randomLoremParagraph}}\\n\\n{{$randomLoremParagraph}}\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69f5cd4d-9fbb-4f06-96a9-d8563e224426",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "65f0409e-fdfd-42b5-bfed-c31046927173",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "903487f8-85bf-4155-910c-672c8b713be7",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"id should fit\", function () {\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"    pm.expect(response.id).to.equal(pm.variables.get(\"projectId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"acronym should fit\", function () {\r",
									"    pm.expect(response).to.have.property(\"acronym\");\r",
									"    pm.expect(response.acronym).to.equal(pm.variables.get(\"project_acronym_to_create\"));\r",
									"});\r",
									"\r",
									"pm.test('title should fit', function() {\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"title\");\r",
									"    pm.expect(response.projectData.title).to.eql(pm.variables.get(\"project_title\"));\r",
									"});\r",
									"\r",
									"pm.test('specificObjective should fit', function() {\r",
									"    pm.expect(response).to.have.property(\"projectData\");\r",
									"    pm.expect(response.projectData).to.have.property(\"specificObjective\");\r",
									"    pm.expect(response.projectData.specificObjective).to.have.property(\"programmeObjectivePolicy\");\r",
									"    pm.expect(response.projectData.specificObjective.programmeObjectivePolicy)\r",
									"        .to.eql(pm.variables.get(\"programmePriorityPolicy\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f338a8e3-bcf4-4e22-846b-16532003b632",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66c683d5-547e-4287-8be0-57b2dd897601",
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"-1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d97233ca-9876-4896-8d6f-7a0bc80ef501",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b1eb52a-ed6c-4d69-a0af-6567cef10ad0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "file upload to DRAFT",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fd9c61a9-8184-45b9-aca9-a19514ea04ed",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a4f33d3-3dc7-43ff-a494-e4df7e91da78",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8205f3b3-6b28-435e-969f-239cf7d4dade",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "18e311c5-d8d7-47dc-8c37-f1d6335fabea",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve the uploaded file list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1afba57-80f0-41f6-8172-c0cb1c1cb3bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b1fb59e-c5c7-4525-a6b9-b5538e73a39f",
								"exec": [
									"const file = pm.response.json().content[0];\r",
									"\r",
									"pm.test('applicant can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.variables.set('file_id',file.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "set description to uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd946dc8-c29d-41ca-8de3-b425fc76d494",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "52b5a2a5-6f7f-4849-805a-1af85e3f9dcf",
								"exec": [
									"const file = pm.response.json();\r",
									"\r",
									"pm.test('applicant can specify description to a file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.id).to.equal(pm.variables.get('file_id'));\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.expect(file.description).to.equal('API test description');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "download uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6b5b6188-ea20-4b78-a582-ddfd1d79dead",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9e18d848-e87e-4e1a-93da-e1dd7225df21",
								"exec": [
									"pm.test('applicant can download previously-uploaded file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot create application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ca14133-abce-4c3e-8852-a99ef15ee931",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9288dfa9-4785-4971-a041-f3b164fa0260",
								"exec": [
									"pm.test('programme user should not be able to create project application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"should-not-create\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3aecc59c-07dc-405f-a7af-62291ac576aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05fd04d5-350c-438b-b798-2bbe1cedc254",
								"exec": [
									"pm.test('programme user should not be able to see files when application is DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user should not be able to see files because he cannot see project in DRAFT', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot upload file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "537506be-9780-4f1a-8b32-c03c6f217b35",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "950888d3-425c-46b5-871a-cd408944d0f5",
								"exec": [
									"pm.test('programme user should not be able to upload APPLICANT file when he cannot read project itself', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot see project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot set description",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29892a47-1dfd-4f2c-814b-d2b9ef6ea07b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37305c91-f17e-40c1-87f0-c995b3851df3",
								"exec": [
									"pm.test('programme user should not be able to set description, when he cannot see DRAFT project', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot download file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "baf5b2a6-23e1-4ec5-9af6-6ffab9c49897",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fec9eb38-e68c-4616-b5ca-d215819e4c70",
								"exec": [
									"pm.test('programme user should not be able to download file, cause he cannot see application in DRAFT', function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('programme user can see the error - he cannot find project itself', function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property(\"i18nKey\");\r",
									"    pm.expect(response.i18nKey).to.equal(\"project.not.exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "submit and resubmit application",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "939fd800-b844-4aa5-a318-f03417b8e13e",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e44c454e-6011-4415-ad39-3068c3ae84a9",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1c3ba65-2d8b-463f-ac91-c36f0989a9ba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "490771b7-fcec-458b-a46a-b2fbdb582c55",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef4548dc-e6aa-4294-a5ab-cc70345723ca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14b96280-6f77-4dbb-bc91-d9501e96216c",
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check submitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a7d89d2-dd69-4426-b415-ce46e2ccba29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09e13e2a-07b3-4353-83bd-ae2956181f2c",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should be filled in', function() {\r",
									"    pm.expect(application.firstSubmission.updated).not.eql(null);\r",
									"    pm.variables.set('application_submission_time', application.firstSubmission.updated);\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be empty after first submission', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('submission and status should be equal', function() {\r",
									"    pm.expect(application.firstSubmission)\r",
									"        .deep.equal(application.projectStatus);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to SUBMITTED application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26ed53d1-3f62-43fb-96e3-b135ab33ecb7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1b91f0f-2976-4d0e-a2f6-f58d3260dc35",
								"exec": [
									"pm.test('applicant should not be able to upload file to SUBMITTED application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "954f6bda-92d6-4c6a-bedf-0a0613965c21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12747230-007f-4883-8898-5438aa72c5f2",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('programme user can see files, when application is SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.content[0].name).to.equal('file.txt');\r",
									"    pm.expect(response.totalElements).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file?fileType=APPLICANT_FILE",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							],
							"query": [
								{
									"key": "fileType",
									"value": "APPLICANT_FILE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f472c036-b5e6-46ba-a9e6-a3e52cb01b60",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c385672d-36bf-413d-b112-bf93879a42a3",
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check returned application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d3eb7f4-4adb-46d1-af0a-eb3ef1aa59c2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e4b7505e-99be-4a07-91bb-b4d3f9e422e2",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be RETURNED_TO_APPLICANT', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should still be empty', function() {\r",
									"    pm.expect(application.lastResubmission).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fbc599a4-165e-4b1a-89cb-043edbcfce1a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9ea05fe-31eb-473d-8a88-9b4ab68155fb",
								"exec": [
									"pm.test('program user should not be able to resubmit application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13fc9110-ec09-4f50-9564-45cc418e7472",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85cdf8d1-98f0-4caf-8181-62959a4c8c64",
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "check resubmitted application status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "71231684-ce29-475c-b2c7-035122226f88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c4139a0b-59cd-4603-8a1e-95ff03d87787",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status should be SUBMITTED', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('submission date should stay like it was', function() {\r",
									"    pm.expect(application.firstSubmission.updated).to.eql(\r",
									"        pm.variables.get('application_submission_time')\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test('resubmission date should be now filled in', function() {\r",
									"    pm.expect(application.lastResubmission).not.equal(null);\r",
									"    pm.expect(application.lastResubmission.updated).not.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter eligibility assessment (EA) and decision",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aa43f41-acd3-4ea5-9dbf-2d142621cc0e",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f0f0229c-37b8-4a24-896b-2fdb910e6327",
								"exec": [
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test('application should not have submission date filled in', function() {\r",
									"    pm.expect(application.firstSubmission).to.eql(null);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea8e6be4-a6b5-4c84-86c4-55494bb71b9a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f491af8-7585-4942-bd65-f641eb860985",
								"exec": [
									"pm.test('applicant can submit his application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "aplicant cannot enter EA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81750a1f-593d-49cf-8f8f-d62a7626bde9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "990809b5-9222-4267-bd77-ee0cecfd9393",
								"exec": [
									"pm.test('applicant should not be able to enter EA', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"this should not be processed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can enter EA once",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9dae3f7d-c7d2-4ef1-ae62-5390debdd048",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "59e12c60-17da-4291-9e80-bff9b7cbe8e1",
								"exec": [
									"pm.test('program user can enter EA once', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('EA is part of the application detail', function() {\r",
									"    pm.expect(application).to.have.property(\"eligibilityAssessment\");\r",
									"    pm.expect(application.eligibilityAssessment).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test('status of the application is not changed', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
									"});\r",
									"\r",
									"pm.test('EA result is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.result)\r",
									"        .to.eql(\"PASSED\");\r",
									"});\r",
									"\r",
									"pm.test('EA note is properly saved', function() {\r",
									"    pm.expect(application.eligibilityAssessment.note)\r",
									"        .to.eql(\"status set to passed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"PASSED\",\r\n    \"note\": \"status set to passed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot enter EA twice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5a00df25-d77b-4955-a59b-da214bc5d1d4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ff51da95-ce0c-44ac-a3dd-0dc6d73561e1",
								"exec": [
									"pm.test('program user should not be able to enter EA second time', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"result\": \"FAILED\",\r\n    \"note\": \"status set to failed\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status",
								"eligibility"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE without date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74df01ec-0e07-4910-9520-4f95bdd760b3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "deb7818c-4c27-49e4-af4a-5cc971562b3c",
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE without date', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nKey).to.eql('project.decision.date.unknown')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user cannot change to ELIGIBLE with date in future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b244b9b-d8f7-4462-ab8f-8bf4c264c72b",
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 5);\r",
									"pm.variables.set('date_plus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a8297d9-d6b6-496b-a6a0-8df48ef35234",
								"exec": [
									"pm.test('program user should not be able to change status to ELIGIBLE with date in future', function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('correct translation key returned for this error', function() {\r",
									"    pm.expect(pm.response.json().i18nFieldErrors.date.i18nKey)\r",
									"        .to.eql('project.status.date.should.be.in.past.or.present')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{date_plus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can change status to ELIGIBLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "72034709-8f32-434c-9c5f-27870b337fc8",
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5);\r",
									"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08f174d3-3681-49e8-ba8a-df8edf6c759c",
								"exec": [
									"pm.test('program user can change status to ELIGIBLE', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status decision date is set to date -5days', function() {\r",
									"    pm.expect(application.projectStatus.decisionDate)\r",
									"        .to.eql(pm.variables.get(\"eligibility_decision_date_minus_5\"));\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "program user can return application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe1028a9-95b2-4ce8-8260-667dd3a2bca4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6a5db78-9a53-471e-80e2-3afa65a98d50",
								"exec": [
									"pm.test('program user can return application back to user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to program user who triggered change', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "applicant can resubmit application to ELIGIBLE status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2e9ca1b-ce09-4b51-88f9-1e1bef5f9375",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6ee85fd0-aec9-4c7b-be6b-0756aa84aaee",
								"exec": [
									"pm.test('applicant can resubmit application that was returned to him', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const application = pm.response.json();\r",
									"\r",
									"pm.test('status of project is set back to ELIGIBLE', function() {\r",
									"    pm.expect(application.projectStatus.status).to.eql('ELIGIBLE');\r",
									"});\r",
									"\r",
									"pm.test('status change is assigned to applicant user who resubmitted', function() {\r",
									"    pm.expect(application.projectStatus.user.email)\r",
									"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter quality assessment (QA)",
			"item": [
				{
					"name": "when SUBMITTED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "328eab95-dc4f-4413-93b0-3b3f5e425559",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4399ccc-f847-499c-864c-0c7f4adce8bf",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "22a585f8-3859-4b0a-b94f-02a4dd4fd675",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "556be607-e9de-4413-86f1-ded65c31fa72",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f4f6f2e7-d0eb-4d42-af8a-0afa65e9b4a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "87fb99ef-87f6-44fe-afdb-4abcd23ac129",
										"exec": [
											"pm.test('applicant should not be able to enter QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA once",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5877fb48-a783-41f5-b954-124ba5f64b86",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "607130cd-7e5b-41a1-ac7f-8216a151613f",
										"exec": [
											"pm.test('program user can enter QA once', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('QA is part of the application detail', function() {\r",
											"    pm.expect(application).to.have.property(\"qualityAssessment\");\r",
											"    pm.expect(application.qualityAssessment).not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test('status of the application is not changed', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('SUBMITTED');\r",
											"});\r",
											"\r",
											"pm.test('QA result is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.result)\r",
											"        .to.eql(\"RECOMMENDED_FOR_FUNDING\");\r",
											"});\r",
											"\r",
											"pm.test('QA note is properly saved', function() {\r",
											"    pm.expect(application.qualityAssessment.note)\r",
											"        .to.eql(\"status set to recommended for funding\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter QA twice Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c60a9f67-618f-48ac-b26d-3d572b1364c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0a8383e6-370e-4f06-86c2-857d5210c2bf",
										"exec": [
											"pm.test('program user should not be able to enter QA second time', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_WITH_CONDITIONS\",\r\n    \"note\": \"status set to recommended with conditions\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "when INELIGIBLE",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "42c3e3d9-d1fe-4f41-886d-5b779033cd83",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7d49643-5b00-44cc-ae50-896d9b6007f2",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18c7d8b6-6893-43c6-b97a-2ac95b641512",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eac5dc4d-b6de-463a-986e-97d0a3dd1d6c",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "06289fd2-8d95-48cb-9746-6bac3b70e776",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0d8c4c4-03c5-46ee-8f6e-bed030b5382b",
										"exec": [
											"pm.test('program user can enter EA = FAILED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"FAILED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to INELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e161145-a83c-47d6-8a5a-1484ea6c59e4",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "496a2bf8-c5b5-4d83-9bd3-ac7f6b1d1523",
										"exec": [
											"pm.test('program user can change status to INELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to INELIGIBLE', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('INELIGIBLE');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"INELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant cannot enter QA when INELIGIBLE already",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51723ce7-af26-4a55-b117-b0e8755153a0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a6b5eb71-2544-4a2c-8dc5-393ad66f71c9",
										"exec": [
											"pm.test('applicant should not be able to enter QA when INELIGIBLE state already', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"NOT_RECOMMENDED\",\r\n    \"note\": \"this should not work\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "enter funding decision (FD)",
			"item": [
				{
					"name": "with QA and ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f4de46f0-eb9a-42eb-bfd3-697b33245a10",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cc6f0418-0245-448e-a767-ca5967d819d7",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bf1a579-807d-4639-aadf-9f9308710638",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e5f61791-c83b-4a2a-a123-c3d9836b2110",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40ef79e1-80f7-475f-a981-2346f460cb65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "48a12604-a161-458d-92de-6a521887cab4",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d38af210-553a-4c9b-9f22-995540739c8b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb5b71ba-106a-4a3e-bbf3-3b3724f88742",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f98a7278-a037-44c8-8e32-af76e8d668b5",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70c75ece-2878-44bb-acbc-2e447b52b939",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "681ec09b-d6fd-4664-821f-c67706a3d5cb",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "151e2447-4c95-4249-8fe9-38ccfd8e574f",
										"exec": [
											"pm.test('program user can change status to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"note\": \"changed to approved\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "without ED",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "167c337f-0575-4074-9bb4-d44f05319b27",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ee762e86-9f29-46c4-a8cd-9d822271db7b",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f5634aea-1d7a-46ce-880a-3db9baf14101",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e945e938-4e6a-4620-9f4f-edf8fce7b877",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a10ae2b4-4ea0-4182-bd04-c25b7035baf0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12b435f4-cc87-4002-98f3-354a9af00e28",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without ED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4cce8b4d-d90e-4f4f-92cc-2ec2d27b8cb6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1560c80a-8b46-4a52-b1ac-9d62d6b38351",
										"exec": [
											"pm.test('program user should not be able to enter funding without ED', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "without QA",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0004c6fb-d0a5-4746-9c64-736241d2e28d",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8d0cb20c-ad99-4ad6-9fe1-4ce8642c65da",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be2d1215-762d-43af-9209-cd76be01302a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af849f75-4227-443c-bc43-5c8705205635",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "49773389-2a46-42b5-9ed0-c44982b8fda8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c33c058-00c7-44e0-8458-bf630849dfcd",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "def170ac-2c8b-4334-a61e-8d52d50c0de3",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5348445a-8997-4e9d-b2ac-d0fa5c979814",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user cannot enter FD without QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d7fe9b9-73ed-4f41-8bf2-a212ab307cea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ff31a68-e8c3-4e89-aebf-b3d928cb9dd4",
										"exec": [
											"pm.test('program user should not be able to enter funding without QA', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "enter FD, return and resubmit",
					"item": [
						{
							"name": "create project application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3cabe03b-5b69-4d5b-849c-b53e09f8ed3f",
										"exec": [
											"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
											"pm.variables.set(\r",
											"    'application_acronym',\r",
											"    projectName.substr(0,25)\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70644cc0-6cdc-43cc-8c8a-cd2eae88be20",
										"exec": [
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('applicant can create project application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.variables.set('application_id', pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test('application should not have submission date filled in', function() {\r",
											"    pm.expect(application.firstSubmission).to.eql(null);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "submit application",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7dceac9f-bcbd-4648-bcb1-22906a2607a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95c73047-bc2b-4aec-827e-2e1738bbcd37",
										"exec": [
											"pm.test('applicant can submit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter QA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1f78489-31fa-42ff-bfdc-626fe7bb22f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f1e2b72a-f147-44e6-b1ce-acdd70fb4c53",
										"exec": [
											"pm.test('program user can enter QA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"RECOMMENDED_FOR_FUNDING\",\r\n    \"note\": \"status set to recommended for funding\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/quality",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"quality"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter EA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "674fe129-ff90-4f4e-8d08-b1bd1cb768de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bfee0a2a-799e-46d4-b872-ac1772172416",
										"exec": [
											"pm.test('program user can enter EA', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"result\": \"PASSED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status/eligibility",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status",
										"eligibility"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can change status to ELIGIBLE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b226160-cfe4-498e-8921-6d66c2eae4b4",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 5);\r",
											"pm.variables.set('eligibility_decision_date_minus_5', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ed4d6f4-22dd-4b6f-ad0f-27d4f893d33b",
										"exec": [
											"pm.test('program user can change status to ELIGIBLE', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ELIGIBLE\",\r\n    \"date\": \"{{eligibility_decision_date_minus_5}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can enter FD - APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5f95f3e1-b0be-4888-adca-c0cd58a2311c",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 3);\r",
											"pm.variables.set('funding_decision_date_minus_3', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71a0b358-cad1-4161-bdee-6e8227a8a792",
										"exec": [
											"pm.test('program user can change status to APPROVED_WC', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to tomorrow', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_3\"));\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											"\r",
											"pm.test('funding note is properly saved', function() {\r",
											"    pm.expect(application.projectStatus.note)\r",
											"        .to.eql(\"changed to approved with conditions\");\r",
											"});\r",
											"\r",
											"pm.test('funding decision is part of the project object', function() {\r",
											"    pm.expect(application).to.have.property('fundingDecision');\r",
											"    pm.expect(application.fundingDecision)\r",
											"        .deep.equal(application.projectStatus);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED_WITH_CONDITIONS\",\r\n    \"note\": \"changed to approved with conditions\",\r\n    \"date\": \"{{funding_decision_date_minus_3}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "program user can return application after FD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "830d3a1e-c86b-4190-afd8-7f751a2c66bf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6c93f7b-c84a-4d5c-b745-98b87cb65372",
										"exec": [
											"pm.test('program user can return application back to user', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status of project is set to RETURNED_TO_APPLICANT', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('RETURNED_TO_APPLICANT');\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to program user who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"programme_user_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"RETURNED_TO_APPLICANT\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "applicant can resubmit back to APPROVED_WC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "24aafac1-a834-48a0-96bf-1ef9463e72b9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75ec8c15-035b-45fb-a94d-5e85112ed807",
										"exec": [
											"pm.test('applicant should be able to resubmit his application', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be back to APPROVED_WITH_CONDITIONS', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED_WITH_CONDITIONS');\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application).to.have.property('lastResubmission');\r",
											"    pm.expect(application).to.have.property('projectStatus');\r",
											"    pm.expect(application.lastResubmission)\r",
											"        .deep.eql(application.projectStatus);\r",
											"});\r",
											"\r",
											"pm.test('status change is assigned to applicant who triggered change', function() {\r",
											"    pm.expect(application.projectStatus.user.email)\r",
											"        .to.eql(pm.variables.get(\"applicant_email\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{applicant_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{applicant_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"SUBMITTED\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "programm user can set final funding to APPROVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "47e9dee9-66a7-4359-9d0f-d2f3cc9d802d",
										"exec": [
											"var date = new Date();\r",
											"date.setDate(date.getDate() - 2);\r",
											"pm.variables.set('funding_decision_date_minus_2', date.toISOString().split('T')[0]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d52f8659-fdeb-4361-983a-0606e4081d14",
										"exec": [
											"pm.test('programm user should be able to change final funding to APPROVED', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const application = pm.response.json();\r",
											"\r",
											"pm.test('status should be set to APPROVED', function() {\r",
											"    pm.expect(application.projectStatus.status).to.eql('APPROVED');\r",
											"});\r",
											"\r",
											"pm.test('status decision date is set to day-5', function() {\r",
											"    pm.expect(application.projectStatus.decisionDate)\r",
											"        .to.eql(pm.variables.get(\"funding_decision_date_minus_2\"));\r",
											"});\r",
											"\r",
											"pm.test('project status should refer to this change', function() {\r",
											"    pm.expect(application.fundingDecision).to.have.property('id');\r",
											"    pm.expect(application.projectStatus).to.have.property('id');\r",
											"    // fundingDecision is still referring to the first funding attempt\r",
											"    pm.expect(application.fundingDecision.id)\r",
											"        .not.eql(application.projectStatus.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{programme_user_email}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{programme_user_email}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"date\": \"{{funding_decision_date_minus_2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/project/{{application_id}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"project",
										"{{application_id}}",
										"status"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Partner and Associated Organization",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb148ee5-8a40-4331-b7c6-b311ba984b48",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e240ee85-c058-4cf8-bc48-5a455ef86430",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7af68a68-aa2d-4674-b61a-795dcc04c6c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "22559ef2-c827-4544-a7cd-010c7bf97725",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdA', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner A\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2541032c-df29-4edf-9935-13ba4573ecae",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d1ed82f-833e-4703-a7dc-e7a5108517c6",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner B', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdB', partner.id);\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner B\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner B\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner A LeadPartner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9fcfc115-7ef7-408c-b23d-80b7d3fb020a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd6a80e3-a622-4fd1-a387-e3bb0b37c121",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can update project Partner A', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									"\r",
									"pm.test('partner has correct abbreviation', function() {\r",
									"    pm.expect(partner.abbreviation).to.eql(\"Partner A LEAD\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdA}}\",\r\n    \"abbreviation\": \"Partner A LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7a2acb2-3fde-451e-b9c8-3efcfe15ad0b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1474cee4-eefd-4397-ad1f-2911c14f268f",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot update Partner B to be LEAD when A already is', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									"\r",
									"pm.test('correct id is sent to FE in error response', function() {\r",
									"    pm.expect(error.i18nArguments).to.eql([pm.variables.get('partnerIdA') + \"\", \"Partner A LEAD\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "make partner B LeadPartner - force",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf815b2c-56d6-4dda-9fbc-479c275eb713",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e625361-f9e0-44db-b82e-67ec51a8642b",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can force to update project Partner B to be LEAD', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(partner.role).to.eql(\"LEAD_PARTNER\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{partnerIdB}}\",\r\n    \"abbreviation\": \"Partner B LEAD\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fdc6e484-64e5-4271-842d-eaa3bfe311be",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a6b588a0-d27a-42b6-98f1-955453380fb4",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot create LeadPartner C cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.role.lead.already.existing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create another project LeadPartner C - force fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20786ea0-1459-4261-a588-34464370c84c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13faffe0-b0b1-4131-bb1e-83367fe5c843",
								"exec": [
									"const error = pm.response.json();\r",
									"\r",
									"pm.test('applicant cannot override LeadPartner A cause B is now LeadPartner', function() {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(error.i18nKey).to.eql(\"project.partner.oldLeadPartnerId.is.not.lead\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner C\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1,\r\n    \"oldLeadPartnerId\": \"{{partnerIdA}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73c5dbfb-8977-48d7-a8ce-faf253c6e790",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3241f31a-9f6a-4836-885a-e10262748153",
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with address', function() {\r",
									"    pm.expect(organization.address.street).to.eql(\"test street\");\r",
									"});\r",
									"\r",
									"pm.test('associated organization is created with both contacts', function() {\r",
									"    pm.expect(organization.contacts).to.have.deep.members([\r",
									"        {\r",
									"            \"type\": \"LegalRepresentative\",\r",
									"            \"title\": null,\r",
									"            \"firstName\": \"Rafael\",\r",
									"            \"lastName\": \"Nadal\",\r",
									"            \"email\": \"rafael@atp.com\",\r",
									"            \"telephone\": \"+6 30 216 896\"\r",
									"        },\r",
									"        {\r",
									"            \"type\": \"ContactPerson\",\r",
									"            \"title\": \"Champion\",\r",
									"            \"firstName\": \"Roger\",\r",
									"            \"lastName\": \"Federer\",\r",
									"            \"email\": \"roger@atp.com\",\r",
									"            \"telephone\": \"+6 20 542 265\"\r",
									"        }\r",
									"    ]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdA}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdA}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdA}}\",\r\n    \"address\": {\r\n        \"street\": \"test street\"\r\n    },\r\n    \"contacts\": [\r\n        {\r\n            \"type\": \"ContactPerson\",\r\n            \"title\": \"Champion\",\r\n            \"firstName\": \"Roger\",\r\n            \"lastName\": \"Federer\",\r\n            \"email\": \"roger@atp.com\",\r\n            \"telephone\": \"+6 20 542 265\"\r\n        },\r\n        {\r\n            \"type\": \"LegalRepresentative\",\r\n            \"firstName\": \"Rafael\",\r\n            \"lastName\": \"Nadal\",\r\n            \"email\": \"rafael@atp.com\",\r\n            \"telephone\": \"+6 30 216 896\"\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb2e5240-87b5-4342-acdb-61190c6f66bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8225973f-3148-4e94-902b-29d6f80684d1",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partnerIdD', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"Partner D\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "create associated organization for Partner D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a79fe805-7a45-45b5-a116-22944417a411",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f082eaef-cfa6-44cd-b071-51c89fbce099",
								"exec": [
									"const organization = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create associated organization for Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('associated organization has correct name', function() {\r",
									"    pm.expect(organization.nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdD'));\r",
									"    pm.expect(organization.nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdD'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partnerId\": \"{{partnerIdD}}\",\r\n    \"nameInOriginalLanguage\": \"Name Original for {{partnerIdD}}\",\r\n    \"nameInEnglish\": \"Name EN for {{partnerIdD}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete project partner D together with AO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c65ed9ec-c450-4745-8ef2-16e19d6be553",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84e015b6-75dc-403c-9c67-a63dd62a578d",
								"exec": [
									"pm.test('applicant can delete project Partner D', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partnerIdD}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partnerIdD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check AssociatedOrganization D deleted A stays",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b470739f-ad3d-4699-8c96-e7af00f36722",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d629a4f3-1dcf-41ba-9155-11946c03019d",
								"exec": [
									"const page = pm.response.json();\r",
									"\r",
									"pm.test('applicant can fetch associated organizations for Project', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('there is now only one associated organization', function() {\r",
									"    pm.expect(page.totalElements).to.eql(1);\r",
									"    pm.expect(page.content[0].nameInEnglish).to.eql(\"Name EN for \" + pm.variables.get('partnerIdA'));\r",
									"    pm.expect(page.content[0].nameInOriginalLanguage).to.eql(\"Name Original for \" + pm.variables.get('partnerIdA'));\r",
									"});\r",
									"\r",
									"pm.test('when only one associated organization, sortNumber is 1', function() {\r",
									"    pm.expect(page.content[0].sortNumber).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/organization",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"organization"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8db1cce9-67ed-4c35-8581-0507fa5c3061",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "32302d30-85f1-420d-9aae-c01e22354893",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Partner - Details",
			"item": [
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6cebbf0a-d060-49d0-b4cd-840d3a7a565a",
								"exec": [
									"const projectName = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.variables.set(\r",
									"    'application_acronym',\r",
									"    projectName.substr(0,25)\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5b6daaa-72ee-4546-8631-7e5eef00d9b3",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"projectCallId\": {{callId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68180e38-4275-45ef-b3b7-74540327e055",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d119f7f3-c5cf-42a2-b9c2-eb9968c88100",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partner_id', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}}\",\r\n    \"role\": \"PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "set both addresses to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e765b4bf-8255-4671-bc95-f3c32eeb8699",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f13d606-0a63-4538-a300-a261612a69a3",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set addresses to partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both addresses are there', function() {\r",
									"    pm.expect(partner.addresses.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"street\": \"test org\"\r\n    },\r\n    {\r\n        \"type\": \"Department\",\r\n        \"street\": \"test dprt\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/address",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove 1st address and update 2nd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2c74c5b-59bc-4b98-b1dc-7fddeb5686e0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3f43a53-d1b7-4a14-b445-bccecf6deebf",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can remove addresses from partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('just one address is now returned', function() {\r",
									"    pm.expect(partner.addresses.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('address is saved correctly', function() {\r",
									"    const addr = partner.addresses[0];\r",
									"    pm.expect(addr.type).to.eql(\"Organization\");\r",
									"    pm.expect(addr.country).to.eql(\"SK\");\r",
									"    pm.expect(addr.street).to.eql(\"Pennsylvania Avenue\");\r",
									"    pm.expect(addr.houseNumber).to.eql(\"1600\");\r",
									"    pm.expect(addr.postalCode).to.eql(\"20500\");\r",
									"    pm.expect(addr.city).to.eql(\"Washington, DC\");\r",
									"    pm.expect(addr.homepage).to.eql(\"https://www.whitehouse.gov/\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"Organization\",\r\n        \"country\": \"SK\",\r\n        \"street\": \"Pennsylvania Avenue\",\r\n        \"houseNumber\": \"1600\",\r\n        \"postalCode\": \"20500\",\r\n        \"city\": \"Washington, DC\",\r\n        \"homepage\": \"https://www.whitehouse.gov/\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/address",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "set both contacts to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4b2a82-d2f0-4a20-970e-03380f274ca6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa4f3789-f456-40f9-ab96-eb6604cab944",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set contacts to partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both contacts are there', function() {\r",
									"    pm.expect(partner.contacts.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"LegalRepresentative\",\r\n        \"firstName\": \"test LR\"\r\n    },\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"firstName\": \"test CP\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/contact",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove 1st contact and update 2nd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbb6d2da-8fcd-4892-8893-24b6d755544d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c212644-a8e6-41d5-a573-fbabb549642d",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can remove contacts from partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('just one contact is now returned', function() {\r",
									"    pm.expect(partner.contacts.length).to.eql(1);\r",
									"}); \r",
									"\r",
									"pm.test('contact is saved correctly', function() {\r",
									"    const contact = partner.contacts[0];\r",
									"    pm.expect(contact.type).to.eql(\"ContactPerson\");\r",
									"    pm.expect(contact.title).to.eql(\"Bachelor\");\r",
									"    pm.expect(contact.firstName).to.eql(\"Donald\");\r",
									"    pm.expect(contact.lastName).to.eql(\"Trump\");\r",
									"    pm.expect(contact.email).to.eql(\"mc.donald@whitehouse.gov\");\r",
									"    pm.expect(contact.telephone).to.eql(\"202-456-6213\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"ContactPerson\",\r\n        \"title\": \"Bachelor\",\r\n        \"firstName\": \"Donald\",\r\n        \"lastName\": \"Trump\",\r\n        \"email\": \"mc.donald@whitehouse.gov\",\r\n        \"telephone\": \"202-456-6213\"\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/contact",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "set motivation to partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77e34bec-64e3-4c40-a570-ea32517b203f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8785c796-689a-40b6-889b-218d8384b7e4",
								"exec": [
									"const motivation = pm.response.json().motivation;\r",
									"\r",
									"pm.test('applicant can set motivation to partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('motivation is set correctly', function() {\r",
									"    pm.expect(motivation.organizationRelevance).to.eql('This project is definitely relevant enough to be founded.');\r",
									"    pm.expect(motivation.organizationRole).to.eql('test latin àâçéèêëîïôùûüÿ');\r",
									"    pm.expect(motivation.organizationExperience).to.eql('We have 16 millions years of experience in this particular area.');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"organizationRelevance\": \"This project is definitely relevant enough to be founded.\",\r\n    \"organizationRole\": \"test latin àâçéèêëîïôùûüÿ\",\r\n    \"organizationExperience\": \"We have 16 millions years of experience in this particular area.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner/{{partner_id}}/motivation",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner",
								"{{partner_id}}",
								"motivation"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - staff costs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5c473bc-8ca4-49c0-aedb-60a3f572326d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1c69d1fa-258b-4a86-887b-92ac2d943fa9",
								"exec": [
									"const staffCosts = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set budget staff costs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts are set correctly', function() {\r",
									"    pm.expect(staffCosts.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts sums are calculated correctly', function() {\r",
									"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(48800);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": \"Project Manager\",\r\n        \"numberOfUnits\": 10,\r\n        \"pricePerUnit\": 4500\r\n    },\r\n    {\r\n        \"description\": \"Doctor\",\r\n        \"numberOfUnits\": 1,\r\n        \"pricePerUnit\": 3800\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/staffcost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"staffcost"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - travel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6101599-08c1-4bbd-9cd9-2d3c896983ea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21cb5759-cab3-479d-ab63-91db6a0271e3",
								"exec": [
									"const travel = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set budgettravel', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('travel is set correctly', function() {\r",
									"    pm.expect(travel.length).to.eql(1);\r",
									"    pm.expect(travel[0].numberOfUnits).to.eql(0.19);\r",
									"    pm.expect(travel[0].pricePerUnit).to.eql(0.99);\r",
									"    pm.expect(travel[0].rowSum).to.eql(0.18);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": \"Gran Canaria\",\r\n        \"numberOfUnits\": 0.19,\r\n        \"pricePerUnit\": 0.99\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/travel",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"travel"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - infrastructure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "721915d8-387b-40cb-a0d7-90219f387756",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a009955-187d-4b12-887f-36981bf7a406",
								"exec": [
									"const infrastructure = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set infrastructure budget', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('infrastructure budget is set correctly', function() {\r",
									"    pm.expect(infrastructure.length).to.eql(1);\r",
									"    pm.expect(infrastructure[0].numberOfUnits).to.eql(2);\r",
									"    pm.expect(infrastructure[0].pricePerUnit).to.eql(550);\r",
									"    pm.expect(infrastructure[0].rowSum).to.eql(1100);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": \"Dell Aspiron\",\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 550\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/infrastructure",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"infrastructure"
							]
						}
					},
					"response": []
				},
				{
					"name": "set office and administration flatRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1bc2ccb6-7a8d-48e7-b602-4d1ab10c1c38",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8757a68-a1b2-44b7-b46c-3dce1e5821f6",
								"exec": [
									"pm.test('applicant can set officeadministration flatRate', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"officeAdministrationFlatRate\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/options",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3fab6fb3-57e1-48b3-831a-71eded24d75b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8dcbae42-cb74-4915-b2ba-f09b6a25b1ca",
								"exec": [
									"pm.test('total is calculated correctly', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(54780.18);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/total",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "set staff costs flatRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da063936-460a-41d3-892a-b3f4125cf7c8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a076e9a4-9299-4ef7-9ef1-0a71c05fff1a",
								"exec": [
									"pm.test('applicant can set staffCosts flatRate', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffCostsFlatRate\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/options",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d2e3e8c-ff8f-417f-af1a-a9a7d441f71e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7bb2ea92-745b-4ab6-8434-373e3313a2d9",
								"exec": [
									"pm.test('total is calculated correctly', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(1210.19);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id}}/budget/total",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id}}",
								"budget",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project Lead partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ed97c13-22d4-41b7-9097-1882640124d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3084327b-e465-4d7d-9ee1-291bb076372a",
								"exec": [
									"const partner = pm.response.json();\r",
									"\r",
									"pm.test('applicant can create project partner', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('partner_id_lead', partner.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abbreviation\": \"{{$randomAbbreviation}}\",\r\n    \"role\": \"LEAD_PARTNER\",\r\n    \"legalStatusId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/partner",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"partner"
							]
						}
					},
					"response": []
				},
				{
					"name": "set budget - staff costs to Lead",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bc4e1c27-df7e-4070-9370-564f9a09d6a1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5da5195-4e62-48be-92ab-094f9851deb8",
								"exec": [
									"const staffCosts = pm.response.json();\r",
									"\r",
									"pm.test('applicant can set budget staff costs', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts are set correctly', function() {\r",
									"    pm.expect(staffCosts.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('staffcosts sums are calculated correctly', function() {\r",
									"    pm.expect(staffCosts[0].rowSum + staffCosts[1].rowSum).to.eql(22000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"description\": \"Teachers\",\r\n        \"numberOfUnits\": 2,\r\n        \"pricePerUnit\": 8800\r\n    },\r\n    {\r\n        \"description\": \"Students\",\r\n        \"numberOfUnits\": 22,\r\n        \"pricePerUnit\": 200\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/staffcost",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"staffcost"
							]
						}
					},
					"response": []
				},
				{
					"name": "set office and administration flatRate to Lead Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69674e65-5235-470d-b311-a3de739ef06f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45c1c8d7-2aa9-4a35-ab54-dace67ce7a35",
								"exec": [
									"pm.test('applicant can set officeadministration flatRate', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"officeAdministrationFlatRate\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/options",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate total for Lead",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b50c95b-401c-49ce-98b1-9b9abbdf3f20",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "248d347d-aec8-4df6-b6a7-17f36f86f5ec",
								"exec": [
									"pm.test('total is calculated correctly', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.eql(24200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/partner/{{partner_id_lead}}/budget/total",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"partner",
								"{{partner_id_lead}}",
								"budget",
								"total"
							]
						}
					},
					"response": []
				},
				{
					"name": "check project budget for both partners",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "554041f9-1817-4727-b73b-dc38d9e39c81",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8be82f61-ffcf-4d1d-9e84-03c1ab7df0c1",
								"exec": [
									"pm.test('project budget can be retrieved', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('both partners are returned', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    pm.expect(res).to.have.length(2);\r",
									"});\r",
									"\r",
									"pm.test('partners are sorted', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.id).to.eql(pm.variables.get('partner_id_lead'));\r",
									"    pm.expect(res[1].partner.id).to.eql(pm.variables.get('partner_id'));\r",
									"});\r",
									"\r",
									"pm.test('partners have correct data filled in', function() {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res[0].partner.sortNumber).to.eql(1);\r",
									"    pm.expect(res[1].partner.sortNumber).to.eql(2);\r",
									"\r",
									"    pm.expect(res[0].staffCosts).to.eql(22000.0);\r",
									"    pm.expect(res[0].travelCosts).to.eql(0);\r",
									"    pm.expect(res[0].externalCosts).to.eql(0);\r",
									"    pm.expect(res[0].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[0].infrastructureCosts).to.eql(0);\r",
									"    pm.expect(res[0].officeAndAdministrationCosts).to.eql(2200.0);\r",
									"    pm.expect(res[0].totalSum).to.eql(24200);\r",
									"\r",
									"    pm.expect(res[1].partner.country).to.eql('SK');\r",
									"    pm.expect(res[1].staffCosts).to.eql(110.01);\r",
									"    pm.expect(res[1].travelCosts).to.eql(0.18);\r",
									"    pm.expect(res[1].externalCosts).to.eql(0);\r",
									"    pm.expect(res[1].equipmentCosts).to.eql(0);\r",
									"    pm.expect(res[1].infrastructureCosts).to.eql(1100);\r",
									"    pm.expect(res[1].officeAndAdministrationCosts).to.eql(0);\r",
									"    pm.expect(res[1].totalSum).to.eql(1210.19);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/budget",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"budget"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "83b2e485-51dc-44f5-9542-cc7c45cb12b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5883ea42-15a7-4f24-ad2f-35a203a253ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{admin_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{admin_email}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "40cb3d78-39b8-4909-b4dc-38ecc10e9929",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b8ed81ff-97e4-478e-88b1-b0d03e25bbc2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "28ebbf4c-9109-40a1-aee0-189cde418f48",
			"key": "url",
			"value": "specify_url_here"
		}
	],
	"protocolProfileBehavior": {}
}