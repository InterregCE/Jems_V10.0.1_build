/////////////////////////////////////////////////////////
@use "sass:math";

$container-max-widths: (
        sm: 540px,
        md: 720px,
        lg: 960px,
        xl: 1140px
) !default;

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

$navbar-nav-link-padding-x: .75rem !default;
$grid-breakpoints: (
        xs: 0,
        sm: 42rem,
        md: 60rem,
        lg: 60rem,
        xl: 60rem
) !default;
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}


@mixin hover-focus() {
  &:hover,
  &:focus {
    @content;
  }
}

// Base font size
$rfs-base-font-size: 1.25rem !default;
$rfs-font-size-unit: rem !default;

// Breakpoint at where font-size starts decreasing if screen width is smaller
$rfs-breakpoint: 1200px !default;
$rfs-breakpoint-unit: px !default;

// Resize font-size based on screen height and width
$rfs-two-dimensional: false !default;

// Factor of decrease
$rfs-factor: 10 !default;

@if type-of($rfs-factor) != "number" or $rfs-factor <= 1 {
  @error "`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.";
}

// Generate enable or disable classes. Possibilities: false, "enable" or "disable"
$rfs-class: false !default;

// 1 rem = $rfs-rem-value px
$rfs-rem-value: 16 !default;

// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14
$rfs-safari-iframe-resize-bug-fix: false !default;

// Disable RFS by setting $enable-responsive-font-sizes to false
$enable-responsive-font-sizes: true !default;

// Cache $rfs-base-font-size unit
$rfs-base-font-size-unit: unit($rfs-base-font-size);

// Remove px-unit from $rfs-base-font-size for calculations
@if $rfs-base-font-size-unit == "px" {
  $rfs-base-font-size: math.div($rfs-base-font-size, $rfs-base-font-size * 0 + 1);
} @else if $rfs-base-font-size-unit == "rem" {
  $rfs-base-font-size: math.div($rfs-base-font-size, $rfs-base-font-size * 0 + math.div(1, $rfs-rem-value));
}

// Cache $rfs-breakpoint unit to prevent multiple calls
$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);

// Remove unit from $rfs-breakpoint for calculations
@if $rfs-breakpoint-unit-cache == "px" {
  $rfs-breakpoint: math.div($rfs-breakpoint, $rfs-breakpoint * 0 + 1);
} @else if $rfs-breakpoint-unit-cache == "rem" or $rfs-breakpoint-unit-cache == "em" {
  $rfs-breakpoint: math.div($rfs-breakpoint, $rfs-breakpoint * 0 + math.div(1, $rfs-rem-value));
}

// Responsive font-size mixin
@mixin rfs($fs, $important: false) {
  // Cache $fs unit
  $fs-unit: if(type-of($fs) == "number", unit($fs), false);

  // Add !important suffix if needed
  $rfs-suffix: if($important, " !important", "");

  // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
  @if not $fs-unit or $fs-unit != "" and $fs-unit != "px" and $fs-unit != "rem" or $fs == 0 {
    font-size: #{$fs}#{$rfs-suffix};
  } @else {
    // Variables for storing static and fluid rescaling
    $rfs-static: null;
    $rfs-fluid: null;

    // Remove px-unit from $fs for calculations
    @if $fs-unit == "px" {
      $fs: math.div($fs, $fs * 0 + 1);
    } @else if $fs-unit == "rem" {
      $fs: math.div($fs, $fs * 0 + math.div(1, $rfs-rem-value));
    }

    // Set default font-size
    @if $rfs-font-size-unit == rem {
      $rfs-static: #{math.div($fs, $rfs-rem-value)}rem#{$rfs-suffix};
    } @else if $rfs-font-size-unit == px {
      $rfs-static: #{$fs}px#{$rfs-suffix};
    } @else {
      @error "`#{$rfs-font-size-unit}` is not a valid unit for $rfs-font-size-unit. Use `px` or `rem`.";
    }

    // Only add media query if font-size is bigger as the minimum font-size
    // If $rfs-factor == 1, no rescaling will take place
    @if $fs > $rfs-base-font-size and $enable-responsive-font-sizes {
      $min-width: null;
      $variable-unit: null;

      // Calculate minimum font-size for given font-size
      $fs-min: $rfs-base-font-size + math.div($fs - $rfs-base-font-size, $rfs-factor);

      // Calculate difference between given font-size and minimum font-size for given font-size
      $fs-diff: $fs - $fs-min;

      // Base font-size formatting
      // No need to check if the unit is valid, because we did that before
      $min-width: if($rfs-font-size-unit == rem, #{math.div($fs-min, $rfs-rem-value)}rem, #{$fs-min}px);

      // If two-dimensional, use smallest of screen width and height
      $variable-unit: if($rfs-two-dimensional, vmin, vw);

      // Calculate the variable width between 0 and $rfs-breakpoint
      $variable-width: #{math.div($fs-diff * 100, $rfs-breakpoint)}#{$variable-unit};

      // Set the calculated font-size.
      $rfs-fluid: calc(#{$min-width} + #{$variable-width}) #{$rfs-suffix};
    }

    // Rendering
    @if $rfs-fluid == null {
      // Only render static font-size if no fluid font-size is available
      font-size: $rfs-static;
    } @else {
      $mq-value: null;

      // RFS breakpoint formatting
      @if $rfs-breakpoint-unit == em or $rfs-breakpoint-unit == rem {
        $mq-value: #{math.div($rfs-breakpoint, $rfs-rem-value)}#{$rfs-breakpoint-unit};
      } @else if $rfs-breakpoint-unit == px {
        $mq-value: #{$rfs-breakpoint}px;
      } @else {
        @error "`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.";
      }

      @if $rfs-class == "disable" {
        // Adding an extra class increases specificity,
        // which prevents the media query to override the font size
        &,
        .disable-responsive-font-size &,
        &.disable-responsive-font-size {
          font-size: $rfs-static;
        }
      } @else {
        font-size: $rfs-static;
      }

      @if $rfs-two-dimensional {
        @media (max-width: #{$mq-value}), (max-height: #{$mq-value}) {
          @if $rfs-class == "enable" {
            .enable-responsive-font-size &,
            &.enable-responsive-font-size {
              font-size: $rfs-fluid;
            }
          } @else {
            font-size: $rfs-fluid;
          }

          @if $rfs-safari-iframe-resize-bug-fix {
            // stylelint-disable-next-line length-zero-no-unit
            min-width: 0vw;
          }
        }
      } @else {
        @media (max-width: #{$mq-value}) {
          @if $rfs-class == "enable" {
            .enable-responsive-font-size &,
            &.enable-responsive-font-size {
              font-size: $rfs-fluid;
            }
          } @else {
            font-size: $rfs-fluid;
          }

          @if $rfs-safari-iframe-resize-bug-fix {
            // stylelint-disable-next-line length-zero-no-unit
            min-width: 0vw;
          }
        }
      }
    }
  }
}

@mixin font-size($fs, $important: false) {
  @include rfs($fs, $important);
}

  @media (max-width: 1339.9px) {
  }

  @media (min-width: 1400px) {
    .navbar-expand-lg {
      -ms-flex-flow: row nowrap;
      flex-flow: row nowrap;
      -ms-flex-pack: start;
    }
    .navbar-expand-lg .navbar-navigation-items .dropdown-menu {
      position: absolute;
    }
    .navbar-expand-lg .navbar-navigation-items .nav-link {
      padding-right: 0.5rem;
    }
    .navbar-expand-lg .navbar-collapse {
      display: flex;
      justify-content: flex-end;
    }
    .navbar-expand-lg .navbar-toggler {
      display: none;
    }
  }

  .navbar {
    position: relative;
    display: flex;
    flex-wrap: wrap; // allow us to do the line break for collapsing content
    justify-content: space-between; // space out brand from logo
    background: white;
    padding: 0;
    overflow: hidden;
    &.no-user {
      .navbar-logos {
        visibility: hidden;
      }
    }
    &.collapsed {
      height: 4.5rem;
    }
    // Because flex properties aren't inherited, we need to redeclare these first
    // few properties so that content nested within behave properly.
    %container-flex-properties {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
    }
  }

  // Button for toggling the navbar when in its collapsed state
  .navbar-toggler {
    padding: .25rem .75rem;
    font-size: 1rem;
    background-color: transparent; // remove default button style
    border: 1px solid transparent; // remove default button style
    border-radius: .25rem;
    width: 2rem;
    height: 3rem;
    margin: auto 1rem;

    @include hover-focus() {
      text-decoration: none;
    }
  }

  .navbar-collapse {
    flex-basis: 100%;
    flex-grow: 1;
  }

  .collapse {
    &:not(.show) {
      display: none;
    }
    &.show {
      .nav-item {
        margin: 0.25rem 0;
      }
    }
  }

  .navbar-right {
    position: relative;
    display: flex;
    width: 100%;
    height: 100%;
  }
  .navbar-navigation-items {
    display: flex;
    flex-direction: column; // cannot use `inherit` to get the `.navbar`s value
    padding: 0;
    margin: 0;
    list-style: none;
    border-top: none;
    align-items: center;
    justify-content: flex-end;

    button, mat-select, .nav-item {
      font-weight: 400;
    }

    &.main-navigation-items {
      margin: 0;
      flex-grow: 1;
      justify-content: stretch;
      box-shadow: none;
      button, mat-select, .nav-item {
        font-size: 0.9rem;
      }
      .nav-item {
        flex-grow: 1;
        min-width: 6.5rem;
        max-width: 12rem;
        justify-content: center;
      }
    }

    &.secondary-navigation-items {
      color: var(--font-color-primary);
      margin-right: 1rem;
      mat-select {
        border-bottom: 1px dotted var(--table-border-color);
        margin-right: 0.5rem;
        &:hover {
          border-bottom: 1px solid var(--primary-color);
        }
      }
    }

    .nav-link {
      padding-right: 0;
      padding-left: 0;
      text-decoration: none;
      mat-icon {
        margin-right: 0.5rem;
      }
    }

    .dropdown-menu {
      position: static;
      float: none;
    }
    &.divide {
      border-top: 1px solid var(--font-text-link) !important;
      margin-top: 0.5rem;
      padding-top: 0.5rem;
      flex-direction: row;
      align-items: center;
      justify-content: center;
    }
  }

  button.nav-link {
    display: block;
    padding: 0 1rem;
    text-decoration: none;
    background: none;
    border: none;
    @include hover-focus() {
      text-decoration: none;
    }

    // Disabled state lightens text
    &.disabled {
      color: var(--font-color-secondary);
      pointer-events: none;
      cursor: default;
    }
  }

  // Generate series of `.navbar-expand-*` responsive classes for configuring
  // where your navbar collapses.
  .navbar-expand {
    @each $breakpoint in map-keys($grid-breakpoints) {
      $next: breakpoint-next($breakpoint, $grid-breakpoints);
      $infix: breakpoint-infix($next, $grid-breakpoints);

      &#{$infix} {
        @include media-breakpoint-down($breakpoint) {
          %container-navbar-expand-#{$breakpoint} {
            padding-right: 0;
            padding-left: 0;
          }
        }

        @include media-breakpoint-up($next) {
          flex-flow: row nowrap;
          justify-content: flex-start;

          &.no-user {
            border: none;
            background: none;
            .navbar-navigation-items {
              margin-right: 1rem;
              margin-top: 1rem;
            }
          }
          .navbar-navigation-items {
            flex-direction: row;
            align-items: center;
            &.main-navigation-items {
              align-items: stretch;
            }
            .dropdown-menu {
              position: absolute;
            }
            .nav-link {
              padding-right: $navbar-nav-link-padding-x;
              padding-left: $navbar-nav-link-padding-x;
            }
          }

          // For nesting containers, have to redeclare for alignment purposes
          %container-nesting-#{$breakpoint} {
            flex-wrap: nowrap;
          }

          .navbar-collapse {
            display: flex !important; // stylelint-disable-line declaration-no-important
          }
          .navbar-toggler {
            display: none;
          }
        }
      }
    }
  }

  dl, ol, ul {
    margin-top: 0;
    align-items: center;
  }

*, :after, :before{
  box-sizing: border-box;
}

///////////////////////////////////////////////


:host {
  display: inline-block;
}

.language-select {
  width: 11em;
  border-radius: 0.2rem;
  padding: 0rem 0.2rem;
  background: rgba(255, 255, 255, 0.6);
  color: var(--primary-color) !important;
  &:hover {
    background: white;
  }
  &:focus {
    background: var(--background-card);
    outline: 2px solid var(--primary-color);
  }
}
.language-list {
  ::ng-deep mat-select {
    .mat-select-value-text, .mat-select-arrow {
      font-size: .8rem;
    }
  }
}

.mat-stroked-button {
  padding: 0;
}
.navbar-logos {
  height: 4.5rem;
  display: flex;
  flex-wrap: wrap;
  flex-shrink: 0;
  flex-grow: 1;
  flex-basis: 17.5rem;
  min-width: 17.5rem;
  max-width: fit-content;
  overflow-y: hidden;
}
.programme-logo-container {
  width: 17.5rem;
  max-width: 17.5rem;
  height: 4.5rem;
  max-height: 4.5rem;
  padding: .2rem .5rem .2rem .5rem;
  box-sizing: border-box;
  position: relative;
  display: flex;
  background: white;
}
.logo {
  margin: auto;
  &.fill {
    max-width: 100%;
    max-height: 100%;
  }
}
.show-pointer {
  cursor: pointer;
}
.toolbar {
  position: relative;
  box-sizing: border-box;
  display: block;
  width: 100%;
  height: 100%;
}

.nav-item {
  transition: background-color .2s ease-out;
  display: flex;
  background-color: transparent;

  &.user-name {
  }
  .mat-button-base.logout-button {
    font-weight: 700;
    margin-right: 0;
    &:hover {
      background: rgba(255, 255, 255, 0.3);
    }
  }
  .nav-link {
    display: flex;
    flex-direction: row;
    flex-grow: 1;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    color: var(--primary-dark-color);
    opacity: 0.87;
    overflow-y: hidden;
    padding: 0 0.125rem;
    border-left: 1px solid transparent;
    border-right: 1px solid transparent;
    transition: opacity 0.125s ease-out, background-color 0.125s ease-out, box-shadow 0.25s ease-out;
    .nav-text {
      line-height: 1.25em;
      text-overflow: ellipsis;
    }
    mat-icon {
      margin-right: 0.5rem;
    }
    &:hover {
      opacity: 1;
      background: var(--table-hover-color);
    }
  }
  &.active-collapsed {
    .nav-link {
      opacity: 1;
      background: var(--table-hover-color);
      box-shadow: inset 0 0.35rem 1.5rem -0.1rem rgba(135, 183, 219, 0.75);
      border-left: 1px solid rgba(0,0,0, 0.1);
      border-right: 1px solid rgba(0,0,0, 0.1);
    }
  }
  &.active-not-collapsed {
    .nav-link {
      opacity: 1;
    }
  }
}

.mat-select {
  font-weight: var(--font-weight-strong);
}

.spacer {
  flex: 1;
}

.dropdown-menu {
  margin-bottom: 1rem;
}

.logout-button {
  padding: 0.15rem;
  &.not-collapsed {
    margin: 0 0.25rem 0 0;
  }
}
