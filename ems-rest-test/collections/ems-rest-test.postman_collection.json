{
	"info": {
		"_postman_id": "759f8fd6-de6e-4ea4-80b1-0ef2e77114a5",
		"name": "ems-rest-test",
		"description": "Check creation of Project Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "edc5b635-2150-4a4d-8c7f-9d48d6cf609e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66389eb0-304e-4927-9252-ba7093a4d2f1",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3213bd67-0df2-4399-be4d-5c4d12683bfa",
								"exec": [
									"pm.variables.set('project_acronym', \"test-proj-this-is-a-very-long-name\");\r",
									"\r",
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 2);\r",
									"pm.variables.set('project_submissionDate', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce3d2deb-fe8a-4b9e-baca-b3c4526a1e89",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.size.too.long');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym}}\",\n\t\"submissionDate\": \"{{project_submissionDate}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "341114c4-c620-44d9-8df4-904c816612e2",
								"exec": [
									"pm.variables.set('project_acronym', \"\");\r",
									"pm.variables.set('project_submissionDate', \"\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "791f3304-1967-452f-8bb4-34951bce4518",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.submissionDate.i18nKey).to.contain('project.submissionDate.should.not.be.empty');\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.should.not.be.empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym}}\",\n\t\"submissionDate\": \"{{project_submissionDate}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d2490d5-4ceb-4ae2-a1a4-8a21f836f17a",
								"exec": [
									"var uuid = require('uuid');\r",
									"const randomIdentifier = uuid.v4().substring(24, 32);\r",
									"pm.variables.set('project_acronym', \"test-proj-\" + randomIdentifier);\r",
									"\r",
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 2);\r",
									"pm.variables.set('project_submissionDate', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c03936d6-6fbd-499e-9007-601578b38cb5",
								"exec": [
									"pm.test('should be OK', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"projectId\", pm.response.json().id)\r",
									"    pm.variables.set(\"projectAcronym\", pm.response.json().acronym)\r",
									"    pm.variables.set(\"projectSubmissionDate\", pm.response.json().submissionDate)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym}}\",\n\t\"submissionDate\": \"{{project_submissionDate}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d15086e-4ee0-4d11-afbc-1c70d200a03c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f4b2eee-54d7-4d39-8f6a-1696147bb06f",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ec3619-d37b-4995-8b01-651499d8daab",
								"exec": [
									"const response = pm.response.json();\r",
									"const id = pm.variables.get(\"projectId\")\r",
									"const acronym = pm.variables.get(\"projectAcronym\")\r",
									"const submissionDate = pm.variables.get(\"projectSubmissionDate\")\r",
									"\r",
									"pm.test(\"one project can be retrieved\", function () {\r",
									"    pm.expect(response.id).to.equal(id);\r",
									"    pm.expect(response.acronym).to.equal(acronym);\r",
									"    pm.expect(response.submissionDate).to.equal(submissionDate);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e6defb9-a9eb-496f-9ddb-c6044dcad712",
								"exec": [
									"pm.environment.set(\"projectIdInvalid\", '-1')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c25e34bc-fafb-4297-a5f2-f866b5fa024b",
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectIdInvalid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectIdInvalid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "Adm1",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a3081a7c-2d76-493b-979d-edf071b3c119",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "133b87ec-c82c-46d7-ac0d-24493f947191",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79b51ea1-e7a9-46a9-89f4-1ace4cffcfb3",
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Adm1",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1ab7e29-72c5-46d6-83a8-476d931528a9",
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a17bd1f4-960d-4111-ab6b-b7c5e772e7af",
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "625c89b2-8308-4a1b-9066-7bd68542f843",
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00e6a5ee-e33d-4cca-933a-978a0561f29d",
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user administrator successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb14e514-5a25-4f73-8fa7-1892affa0670",
								"exec": [
									"const username = pm.variables.get(\"user_name\")",
									"",
									"pm.test('should be OK', function () {",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set(\"id\", pm.response.json().id)",
									"",
									"    pm.expect(pm.response.json().name).to.equal(username);",
									"    pm.expect(pm.response.json().email).to.equal(username + '@example.org');",
									"    pm.expect(pm.response.json().surname).to.equal('RESTTester');",
									"    pm.expect(pm.response.json().userRole.name).to.contain('admin');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "59bb0042-1ada-4edf-8ac2-5eaecc16b19c",
								"exec": [
									"var uuid = require('uuid');",
									"const randomIdentifier = uuid.v4().substring(0, 16);",
									"pm.variables.set('user_name', \"RESTtest-\" + randomIdentifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{user_name}}@example.org\",\n\t\"name\": \"{{user_name}}\",\n\t\"surname\": \"RESTTester\",\n    \"accountRoleId\": 1\n}",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14f9528b-09c3-46c3-83bf-1a66cf2f3b0f",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors).to.have.property('surname');",
									"    pm.expect(response.i18nFieldErrors).to.have.property('name');",
									"    pm.expect(response.i18nFieldErrors.accountRoleId.i18nKey).to.contain('user.accountRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.should.not.be.empty');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a19cdf2e-f215-461c-b9ff-dad997ad512c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"accountRoleId\": null\n}",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ec804da-27e1-4bea-9aaa-0a99ee66875b",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.accountRoleId.i18nKey).to.contain('user.accountRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f28f9fe9-8b84-4561-93f1-1805d88afe7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"x\",\n\t\"surname\": \"\"\n}",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "Adm1",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c6d0044d-2daf-46db-a95a-66216ed4a5c2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "998233f4-dfc9-4df9-ad0f-88edd9fafcaa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b9ddb6ce-828b-4241-b813-c7db61f93783",
			"key": "url",
			"value": "specify_url_here",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}