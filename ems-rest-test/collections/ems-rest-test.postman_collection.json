{
	"info": {
		"_postman_id": "f573a2d4-366d-4585-9e84-11ae79ef7f83",
		"name": "ems-rest-test",
		"description": "Check EMS application for common use-cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "project-entity",
			"item": [
				{
					"name": "test project application retrieval 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "edc5b635-2150-4a4d-8c7f-9d48d6cf609e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66389eb0-304e-4927-9252-ba7093a4d2f1",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"    pm.variables.set(\"totalCount\", response.totalElements);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - invalid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3213bd67-0df2-4399-be4d-5c4d12683bfa",
								"exec": [
									"pm.variables.set('project_acronym', \"test-proj-this-is-a-very-long-name\");\r",
									"\r",
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 2);\r",
									"pm.variables.set('project_submissionDate', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce3d2deb-fe8a-4b9e-baca-b3c4526a1e89",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.size.too.long');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym}}\",\n\t\"submissionDate\": \"{{project_submissionDate}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "341114c4-c620-44d9-8df4-904c816612e2",
								"exec": [
									"pm.variables.set('project_acronym', \"\");\r",
									"pm.variables.set('project_submissionDate', \"\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "791f3304-1967-452f-8bb4-34951bce4518",
								"exec": [
									"pm.test('should fail with 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('should return validation errors', function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.i18nFieldErrors.submissionDate.i18nKey).to.contain('project.submissionDate.should.not.be.empty');\r",
									"    pm.expect(response.i18nFieldErrors.acronym.i18nKey).to.contain('project.acronym.should.not.be.empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym}}\",\n\t\"submissionDate\": \"{{project_submissionDate}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application - OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d2490d5-4ceb-4ae2-a1a4-8a21f836f17a",
								"exec": [
									"var uuid = require('uuid');\r",
									"const randomIdentifier = uuid.v4().substring(24, 32);\r",
									"pm.variables.set('project_acronym', \"test-proj-\" + randomIdentifier);\r",
									"\r",
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 2);\r",
									"pm.variables.set('project_submissionDate', date.toISOString().split('T')[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c03936d6-6fbd-499e-9007-601578b38cb5",
								"exec": [
									"pm.test('should be OK', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.environment.set(\"projectId\", pm.response.json().id)\r",
									"    pm.variables.set(\"projectAcronym\", pm.response.json().acronym)\r",
									"    pm.variables.set(\"projectSubmissionDate\", pm.response.json().submissionDate)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"acronym\": \"{{project_acronym}}\",\n\t\"submissionDate\": \"{{project_submissionDate}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d15086e-4ee0-4d11-afbc-1c70d200a03c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f4b2eee-54d7-4d39-8f6a-1696147bb06f",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"modified list can be retrieved\", function () {\r",
									"    pm.expect(response.totalElements).to.be.a('number');\r",
									"\r",
									"    const totalAmountBefore = pm.variables.get(\"totalCount\");\r",
									"    pm.expect(response.totalElements).to.equal(totalAmountBefore + 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ec3619-d37b-4995-8b01-651499d8daab",
								"exec": [
									"const response = pm.response.json();\r",
									"const id = pm.variables.get(\"projectId\")\r",
									"const acronym = pm.variables.get(\"projectAcronym\")\r",
									"const submissionDate = pm.variables.get(\"projectSubmissionDate\")\r",
									"\r",
									"pm.test(\"one project can be retrieved\", function () {\r",
									"    pm.expect(response.id).to.equal(id);\r",
									"    pm.expect(response.acronym).to.equal(acronym);\r",
									"    pm.expect(response.submissionDate).to.equal(submissionDate);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "test project application retrieval by Id - invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e6defb9-a9eb-496f-9ddb-c6044dcad712",
								"exec": [
									"pm.environment.set(\"projectIdInvalid\", '-1')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c25e34bc-fafb-4297-a5f2-f866b5fa024b",
								"exec": [
									"pm.test(\"an invalid project returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{projectIdInvalid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{projectIdInvalid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dd84e6a2-b5df-43d2-9f37-4194bbadb6f0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "388572a7-3965-44b2-9e9d-ab5fdb3fe841",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-login",
			"item": [
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f29d105-7969-4ca8-995d-c2f0aee22df7",
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"admin can login\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response.name).to.contain('admin');",
									"    pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@ems.eu",
									"type": "string"
								},
								{
									"key": "password",
									"value": "Adm1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "648a362e-ac1e-44c9-b72d-c71fdc5fe052",
								"exec": [
									"pm.test(\"logged-in user can access system\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f5f53b-1707-4853-bf91-84a0c3eee674",
								"exec": [
									"pm.test(\"user can logout\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "check access to project with invalid cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d1d22a3-8c7a-4e2b-aa84-b2d4c37abbe5",
								"exec": [
									"pm.test(\"logged-out user cannot access system\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/project?sort=id,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							],
							"query": [
								{
									"key": "sort",
									"value": "id,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login-wrong-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14d97fe3-4be9-47ed-947f-220877469c2a",
								"exec": [
									"pm.test(\"wrong user cannot login\", function () {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "wrongpwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "wronguser",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Adm12",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/auth/current",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"auth",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5095e39e-6454-46a4-81c8-30cfa281cb71",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3cc6313f-c1d8-4b14-a088-50922054c34d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user-creation",
			"item": [
				{
					"name": "create user administrator successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "157fab3e-b681-43f7-b582-d2651917f6f7",
								"exec": [
									"const username = pm.variables.get(\"user_name\")",
									"",
									"pm.test('should be OK', function () {",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set(\"id\", pm.response.json().id)",
									"",
									"    pm.expect(pm.response.json().name).to.equal(username);",
									"    pm.expect(pm.response.json().email).to.equal(username + '@example.org');",
									"    pm.expect(pm.response.json().surname).to.equal('RESTTester');",
									"    pm.expect(pm.response.json().userRole.name).to.contain('admin');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ae86e532-00d1-4f6a-b5b7-e6c002146aa5",
								"exec": [
									"var uuid = require('uuid');",
									"const randomIdentifier = uuid.v4().substring(0, 16);",
									"pm.variables.set('user_name', \"RESTtest-\" + randomIdentifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{user_name}}@example.org\",\n\t\"name\": \"{{user_name}}\",\n\t\"surname\": \"RESTTester\",\n    \"userRoleId\": 1\n}",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user empty fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "191e0efd-d340-4fde-b8ef-10beb001d509",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.should.not.be.empty');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db0a0460-63c3-4319-8dfd-7ba7eb96b4d3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"name\": \"\",\n\t\"surname\": \"\",\n    \"userRoleId\": null\n}",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user invalid data fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5eb8a7b1-2bf5-4e8a-ba11-b6e2ded03b88",
								"exec": [
									"pm.test('should fail with 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('should return validation errors', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.i18nFieldErrors.surname.i18nKey).to.contain('user.surname.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.name.i18nKey).to.contain('user.name.wrong.size');",
									"    pm.expect(response.i18nFieldErrors.userRoleId.i18nKey).to.contain('user.userRoleId.should.not.be.empty');",
									"    pm.expect(response.i18nFieldErrors.email.i18nKey).to.contain('user.email.wrong.format');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "88b6334d-e3dd-4ec3-869e-a940cdf57ad5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"test\",\n\t\"name\": \"\",\n\t\"surname\": \"\"\n}",
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f743805d-2068-45a2-aa5a-6cccf1788853",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3fd4bee3-56fd-4de8-bcdd-2ea3a415c172",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "file upload/download",
			"item": [
				{
					"name": "register applicant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50aef5f9-220b-481d-ad2a-d4d827ee71bf",
								"exec": [
									"var uuid = require('uuid');\r",
									"const randomIdentifier = uuid.v4().substring(24, 32);\r",
									"pm.variables.set('applicant_email', randomIdentifier + \"@applicant.eu\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a99df8ae-69f1-4dac-8763-2f93d1d44eb9",
								"exec": [
									"pm.test('applicant can register', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{applicant_email}}\",\r\n    \"name\": \"testName\",\r\n    \"surname\": \"testSurname\",\r\n    \"password\": \"{{applicant_email}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/registration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e3893ee2-6eeb-43bc-82a7-47b5b9a463a3",
								"exec": [
									"var uuid = require('uuid');\r",
									"const randomIdentifier = uuid.v4().substring(24, 32);\r",
									"pm.variables.set('application_acronym', \"test-proj-\" + randomIdentifier);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "507bafb5-2ff4-41cd-93e1-9152815309fe",
								"exec": [
									"pm.test('applicant can create project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.variables.set('application_id', pm.response.json().id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"{{application_acronym}}\",\r\n    \"submissionDate\": \"2020-07-06\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload file to application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9418394a-659c-4c8d-87f4-0d894b40f1a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "75157691-da58-43e1-b9c0-954755ff037e",
								"exec": [
									"pm.test('applicant can upload file to project application', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file.txt"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve the uploaded file list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d970f13e-ddb0-4c79-b46d-0a718f7de9e9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa8fdbc4-6188-4267-b4c9-434cb4c23022",
								"exec": [
									"const file = pm.response.json().content[0];\r",
									"\r",
									"pm.test('applicant can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.variables.set('file_id',file.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "set description to uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99284748-eaed-4450-a11a-873e5817bb38",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c458de73-08ac-49a6-a848-af1137223d77",
								"exec": [
									"const file = pm.response.json();\r",
									"\r",
									"pm.test('applicant can specify description to a file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(file.id).to.equal(pm.variables.get('file_id'));\r",
									"    pm.expect(file.name).to.equal('file.txt');\r",
									"    pm.expect(file.description).to.equal('API test description');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "download uploaded file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3dd69e5-cd28-4f23-82e0-5fde96fdffde",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7f7d5604-e65c-42cf-a5f7-db43dbc4433d",
								"exec": [
									"pm.test('applicant can download previously-uploaded file', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{applicant_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{applicant_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create programme user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b245872-3266-4ab7-8bb1-07e39098fb43",
								"exec": [
									"var uuid = require('uuid');\r",
									"const randomIdentifier = uuid.v4().substring(24, 32);\r",
									"pm.variables.set('programme_user_email', randomIdentifier + \"@programme-user.eu\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "952370b1-fbe5-41b8-8def-60cc0129ab48",
								"exec": [
									"pm.test('programme user can be created', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Adm1",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@ems.eu",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{programme_user_email}}\",\r\n    \"name\": \"testName\",\r\n    \"surname\": \"testSurname\",\r\n    \"userRoleId\": \"2\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot create application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d97669d-9e40-4582-a2fc-52eeada9c91f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7acd753c-11e7-49bb-a25b-ee55a6d29bc3",
								"exec": [
									"pm.test('programme user should not be able to create project application', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"acronym\": \"should-not-create\",\r\n    \"submissionDate\": \"2020-07-06\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot upload file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f73d23d-1f7f-4e31-ac1d-845dc2f33946",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e48b5bce-8a75-4502-ab03-a4b122e2f945",
								"exec": [
									"pm.test('programme user should not be able to upload file', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "collections/file_empty.txt"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can see list of files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b42a0d1a-f836-40a1-af8d-9b89ca27251a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e1a9eed-1ebd-462b-a2b4-e8e63b10b6f1",
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('programme user can retrieve list of uploaded files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.content[0].name).to.equal('file.txt');\r",
									"    pm.expect(response.totalElements).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user cannot set description",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "926dc95a-c941-48da-8185-fe8ecbf2d7ac",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed4718a2-d6a6-4b54-a4bc-669091d5fae8",
								"exec": [
									"pm.test('programme user should not be able to set description', function() {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"API test description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}/description",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}",
								"description"
							]
						}
					},
					"response": []
				},
				{
					"name": "programme user can download file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a7ec27bb-9c44-45aa-8f01-56eb10021ef4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4ffecdf9-a7d3-45ab-b0a3-1028faf5a5e9",
								"exec": [
									"pm.test('programme user can also download files', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"file.txt\"');\r",
									"    pm.response.to.have.header('Content-Type', 'application/octet-stream');\r",
									"    pm.expect(pm.response.text()).to.contain('text');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{programme_user_email}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{programme_user_email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/project/{{application_id}}/file/{{file_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"project",
								"{{application_id}}",
								"file",
								"{{file_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "admin@ems.eu",
				"type": "string"
			},
			{
				"key": "password",
				"value": "Adm1",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c7dc51e7-0bcb-4fae-a5ac-5b361a60f08a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "33f7f1e1-3f01-4fe1-aabc-1765956565af",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0f93222d-1a02-418c-872e-8bb51fd22484",
			"key": "url",
			"value": "specify_url_here"
		}
	],
	"protocolProfileBehavior": {}
}
