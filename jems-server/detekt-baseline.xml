<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:CallValidator.kt$CallValidator$call.is2StepProcedureEnabled() &amp;&amp; (call.endDateStep1 == null || call.endDateStep1!!.isBefore(call.startDate) || call.endDateStep1!!.isAfter(call.endDate))</ID>
    <ID>ComplexCondition:DeleteProjectFile.kt$DeleteProjectFile$fileCategories.isNotEmpty() &amp;&amp; fileCategories.any { it == ProjectFileCategoryType.APPLICATION || it == ProjectFileCategoryType.PARTNER || it == ProjectFileCategoryType.INVESTMENT } &amp;&amp; fileMetadata.uploadedAt.isBefore(project.projectStatus.updated)</ID>
    <ID>ComplexCondition:PartnerBudgetPerFundCalculator.kt$PartnerBudgetPerFundCalculator$toDivide == BigDecimal.ZERO || divisor == BigDecimal.ZERO || toDivide == BigDecimal(BigInteger("0"), 2) || divisor == BigDecimal(BigInteger("0"), 2)</ID>
    <ID>ComplexCondition:ProgrammeUnitCostValidation.kt$costPerUnit == null || costPerUnit &lt;= BigDecimal.ZERO || costPerUnit &gt; MAX_COST || costPerUnit.scale() &gt; 2</ID>
    <ID>ComplexCondition:ProjectAssessmentEntity.kt$ProjectAssessmentEntity$assessmentQuality == null &amp;&amp; assessmentEligibility == null &amp;&amp; eligibilityDecision == null &amp;&amp; preFundingDecision == null &amp;&amp; fundingDecision == null &amp;&amp; modificationDecision == null</ID>
    <ID>ComplexCondition:ProjectCooperationCriteriaEntity.kt$ProjectCooperationCriteriaEntity$projectJointDevelopment || projectJointImplementation || projectJointStaffing || projectJointFinancing</ID>
    <ID>ComplexCondition:ProjectFilePersistenceProvider.kt$ProjectFilePersistenceProvider$fileCategory.type == ProjectFileCategoryType.ALL &amp;&amp; projectFileCategoryRepository.existsByProjectFileProjectIdAndProjectFileName(projectId, fileName) || fileCategory.type != ProjectFileCategoryType.ALL &amp;&amp; projectFileCategoryRepository.fileNameExistsInCategory( projectId, fileName, fileCategory.getCategoryTypeString() )</ID>
    <ID>ComplexCondition:UpdateCall.kt$UpdateCall$startDateChanged || lengthOfPeriodChanged || isAdditionalFundAllowedDisabled || specificObjectivesRemoved || strategiesRemoved || fundsRemoved || stateAidsRemoved</ID>
    <ID>ComplexCondition:UpdateLumpSum.kt$UpdateLumpSum$existingLumpSum.cost?.compareTo(updatedLumpSum.cost) != 0 || existingLumpSum.splittingAllowed != updatedLumpSum.splittingAllowed || existingLumpSum.phase != updatedLumpSum.phase || existingLumpSum.categories != updatedLumpSum.categories</ID>
    <ID>ComplexCondition:UploadProjectFile.kt$UploadProjectFile$fileTypeCategory.type == ProjectFileCategoryType.ALL || fileTypeCategory.type == ProjectFileCategoryType.PARTNER &amp;&amp; fileTypeCategory.id == null || fileTypeCategory.type == ProjectFileCategoryType.INVESTMENT &amp;&amp; fileTypeCategory.id == null</ID>
    <ID>ComplexMethod:ApplicationStateFactory.kt$ApplicationStateFactory$fun getInstance(projectSummary: ProjectSummary)</ID>
    <ID>ComplexMethod:ApplicationStatus.kt$ApplicationStatus$fun isInStep2()</ID>
    <ID>ComplexMethod:CallDetail.kt$CallDetail$fun getDiff(old: CallDetail? = null): Map&lt;String, Pair&lt;Any?, Any?&gt;&gt;</ID>
    <ID>ComplexMethod:ProjectDataModelMapper.kt$PluginDataMapper$fun map(programmeStrategy: ProgrammeStrategy): ProgrammeStrategyData</ID>
    <ID>ComplexMethod:ProjectPartnerEntityMapper.kt$fun ProjectPartnerEntity.copy( projectPartner: ProjectPartner? = null, legalStatusRef: ProgrammeLegalStatusEntity? = null, newAddresses: Set&lt;ProjectPartnerAddress&gt;? = null, newContacts: Set&lt;ProjectPartnerContact&gt;? = null, newMotivation: ProjectPartnerMotivation? = null, newPartnerContributions: List&lt;ProjectPartnerContribution&gt;? = null, ): ProjectPartnerEntity</ID>
    <ID>EmptyClassBlock:ExceptionWrapper.kt$ExceptionWrapper${ }</ID>
    <ID>EmptyClassBlock:UserProjectPersistenceProviderTest.kt$UserProjectPersistenceProviderTest.Companion${ }</ID>
    <ID>EmptyDefaultConstructor:CreateLumpSumException.kt$IdHasToBeNull$()</ID>
    <ID>EmptyDefaultConstructor:CreateLumpSumException.kt$MaxAllowedLumpSumsReached$()</ID>
    <ID>EmptyDefaultConstructor:SpringConfigProperties.kt$SpringConfigProperties$()</ID>
    <ID>EmptyDefaultConstructor:UpdateAllowedRealCostsExceptions.kt$CallNotEditableException$()</ID>
    <ID>EmptyDefaultConstructor:UpdateCallUnitCostsExceptions.kt$UnitCostsRemovedAfterCallPublished$()</ID>
    <ID>EmptyKtFile:ProjectFileAuthorizationTest.kt$.ProjectFileAuthorizationTest.kt</ID>
    <ID>EmptyKtFile:ProjectPartnerBudgetMapper.kt$.ProjectPartnerBudgetMapper.kt</ID>
    <ID>FunctionOnlyReturningConstant:MockedMethodSignature.kt$MockedMethodSignature$@ExceptionWrapper(SampleWrapperException::class) fun methodWithAspectWhichReturnsNormally(): String</ID>
    <ID>FunctionOnlyReturningConstant:ProgrammeSetupAuthorization.kt$ProgrammeSetupAuthorization$ fun canReadProgrammeSetup()</ID>
    <ID>LargeClass:ProjectDataProviderImplTest.kt$ProjectDataProviderImplTest : UnitTest</ID>
    <ID>LongParameterList:BudgetCostsCalculator.kt$BudgetCostsCalculator$( officeAndAdministrationOnStaffCostsFlatRate: Int?, officeAndAdministrationOnDirectCostsFlatRate: Int?, finalStaffCosts: BigDecimal, finalTravelCosts: BigDecimal, externalCosts: BigDecimal, equipmentCosts: BigDecimal, infrastructureCosts: BigDecimal )</ID>
    <ID>LongParameterList:BudgetCostsCalculator.kt$BudgetCostsCalculator$( staffCostsFlatRate: Int, travelAndAccommodationOnStaffCostsFlatRate: Int?, externalCosts: BigDecimal, equipmentCosts: BigDecimal, infrastructureCosts: BigDecimal, travelCosts: BigDecimal )</ID>
    <ID>LongParameterList:BudgetCostsCalculator.kt$BudgetCostsCalculator$( unitCosts: BigDecimal, lumpSumsCosts: BigDecimal, externalCosts: BigDecimal, equipmentCosts: BigDecimal, infrastructureCosts: BigDecimal, finalTravelCosts: BigDecimal, finalStaffCosts: BigDecimal, finalOfficeAndAdministrationCosts: BigDecimal, finalOtherCosts: BigDecimal )</ID>
    <ID>LongParameterList:BudgetCostsCalculatorService.kt$BudgetCostsCalculatorService$( budgetOptions: ProjectPartnerBudgetOptions?, unitCosts: BigDecimal, lumpSumsCosts: BigDecimal, externalCosts: BigDecimal, equipmentCosts: BigDecimal, infrastructureCosts: BigDecimal, travelCosts: BigDecimal, staffCosts: BigDecimal )</ID>
    <ID>LongParameterList:GetPartnerFundsPerPeriodInteractorTest.kt$GetPartnerFundsPerPeriodInteractorTest$( preparation: BigDecimal, total1: BigDecimal, total2: BigDecimal, total3: BigDecimal, total4: BigDecimal, total5: BigDecimal, total6: BigDecimal, total7: BigDecimal, total8: BigDecimal, total9: BigDecimal, closure: BigDecimal, )</ID>
    <ID>LongParameterList:GetProjectBudget.kt$GetProjectBudget$( partner: ProjectPartnerSummary, unitCosts: BigDecimal, lumpSumCosts: BigDecimal, externalCosts: BigDecimal, equipmentCosts: BigDecimal, infrastructureCosts: BigDecimal )</ID>
    <ID>LongParameterList:PartnerBudgetPerPeriodCalculator.kt$PartnerBudgetPerPeriodCalculator$( partners: List&lt;ProjectPartnerSummary&gt;, budgetOptions: List&lt;ProjectPartnerBudgetOptions&gt;, budgetPerPartner: List&lt;ProjectPartnerBudget&gt;, lumpSums: List&lt;ProjectLumpSum&gt;, projectPeriods: List&lt;ProjectPeriod&gt;, partnerTotalBudget: Map&lt;Long, ProjectPartnerTotalBudget&gt; )</ID>
    <ID>LongParameterList:PartnerBudgetPerPeriodCalculatorService.kt$PartnerBudgetPerPeriodCalculatorService$( partners: List&lt;ProjectPartnerSummary&gt;, budgetOptions: List&lt;ProjectPartnerBudgetOptions&gt;, budgetPerPartner: List&lt;ProjectPartnerBudget&gt;, lumpSums: List&lt;ProjectLumpSum&gt;, projectPeriods: List&lt;ProjectPeriod&gt;, partnerTotalBudget: Map&lt;Long, ProjectPartnerTotalBudget&gt; )</ID>
    <ID>LongParameterList:ProjectDescriptionMapper.kt$( projectId: Long, projectCoordination: Set&lt;InputTranslation&gt;, projectQualityAssurance: Set&lt;InputTranslation&gt;, projectCommunication: Set&lt;InputTranslation&gt;, projectFinancialManagement: Set&lt;InputTranslation&gt;, projectJointDevelopmentDescription: Set&lt;InputTranslation&gt;, projectJointImplementationDescription: Set&lt;InputTranslation&gt;, projectJointStaffingDescription: Set&lt;InputTranslation&gt;, projectJointFinancingDescription: Set&lt;InputTranslation&gt;, sustainableDevelopmentDescription: Set&lt;InputTranslation&gt;, equalOpportunitiesDescription: Set&lt;InputTranslation&gt;, sexualEqualityDescription: Set&lt;InputTranslation&gt;, )</ID>
    <ID>LongParameterList:ProjectModelMapper.kt$( project: ProjectEntity, periods: List&lt;ProjectPeriod&gt;, assessmentStep1: ProjectAssessmentEntity, assessmentStep2: ProjectAssessmentEntity, stateAidEntities: MutableSet&lt;ProjectCallStateAidEntity&gt;, applicationFormFieldConfigurationEntities: MutableSet&lt;ApplicationFormFieldConfigurationEntity&gt;, priority: ProgrammePriorityEntity? )</ID>
    <ID>MatchingDeclarationName:AllowRealCostsEntity.kt$AllowedRealCostsEntity : Serializable</ID>
    <ID>MatchingDeclarationName:CustomFeignClientsConfiguration.kt$CustomFeignClientConfiguration : FeignClientsConfiguration</ID>
    <ID>MatchingDeclarationName:DeleteProjecPartnerInteractorTest.kt$DeleteProjectPartnerInteractorTest : UnitTest</ID>
    <ID>MatchingDeclarationName:GetBudgetTotalCostsInteractor.kt$GetBudgetTotalCostInteractor</ID>
    <ID>MatchingDeclarationName:UpdatePreSubmissionCheckSettingTest.kt$UpdatePreSubmissionCheckSettingsTest : UnitTest</ID>
    <ID>MatchingDeclarationName:UpdateProjectpartnerInteractorTest.kt$UpdateProjectPartnerInteractorTest : UnitTest</ID>
    <ID>MaxLineLength:AddWorkPackageInvestmentTestWorkPackageInvestmentBase.kt$AddWorkPackageInvestmentTestWorkPackageInvestmentBase$fun</ID>
    <ID>MaxLineLength:ApplicationState.kt$ApplicationState$protected</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$APPROVED_WITH_CONDITIONS -&gt; ApprovedApplicationWithConditionsState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$CONDITIONS_SUBMITTED -&gt; ConditionsSubmittedApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence, projectAuthorization)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$ELIGIBLE -&gt; EligibleApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence, projectAssessmentPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$MODIFICATION_PRECONTRACTING -&gt; ModificationPreContractingApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$MODIFICATION_PRECONTRACTING_SUBMITTED -&gt; ModificationPreContractingSubmittedApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence, projectAuthorization)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$MODIFICATION_REJECTED -&gt; ModificationRejectedApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$MODIFICATION_SUBMITTED -&gt;ModificationSubmittedApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence, projectAuthorization)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$RETURNED_TO_APPLICANT -&gt; ReturnedToApplicantApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$RETURNED_TO_APPLICANT_FOR_CONDITIONS -&gt; ReturnedToApplicantForConditionsApplicationState(projectSummary, projectWorkflowPersistence, auditPublisher, securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$STEP1_APPROVED_WITH_CONDITIONS -&gt; FirstStepApprovedApplicationWithConditionsState(projectSummary,projectWorkflowPersistence, auditPublisher,securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$STEP1_ELIGIBLE -&gt; FirstStepEligibleApplicationState(projectSummary,projectWorkflowPersistence, auditPublisher,securityService, projectPersistence, projectAssessmentPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$STEP1_INELIGIBLE -&gt; FirstStepIneligibleApplicationState(projectSummary,projectWorkflowPersistence, auditPublisher,securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApplicationStateFactory.kt$ApplicationStateFactory$STEP1_NOT_APPROVED -&gt; FirstStepNotApprovedApplicationState(projectSummary,projectWorkflowPersistence, auditPublisher,securityService, projectPersistence)</ID>
    <ID>MaxLineLength:ApprovedApplicationState.kt$ApprovedApplicationState$ApplicationStatus.APPROVED_WITH_CONDITIONS</ID>
    <ID>MaxLineLength:ApprovedApplicationWithConditionsStateTest.kt$ApprovedApplicationWithConditionsStateTest$every { projectWorkflowPersistence.updateProjectFundingDecision(PROJECT_ID, USER_ID, ApplicationStatus.APPROVED, any()) } returns ApplicationStatus.APPROVED</ID>
    <ID>MaxLineLength:ApprovedApplicationWithConditionsStateTest.kt$ApprovedApplicationWithConditionsStateTest$every { projectWorkflowPersistence.updateProjectFundingDecision(PROJECT_ID, USER_ID, ApplicationStatus.NOT_APPROVED, any()) } returns ApplicationStatus.NOT_APPROVED</ID>
    <ID>MaxLineLength:AssignUserToProjectTest.kt$AssignUserToProjectTest$every { userPersistence.findAllByIds(setOf(USER_ADMIN_ID, USER_PROGRAMME_ID, USER_MONITOR_ID_1, USER_MONITOR_ID_2, USER_APPLICANT_ID)) } returns listOf(admin, programmeUser, monitorUser_1, monitorUser_2, applicantUser)</ID>
    <ID>MaxLineLength:AuditBuilder.kt$AuditBuilder$fun project(project: ProjectDetail)</ID>
    <ID>MaxLineLength:AuditBuilder.kt$AuditBuilder$fun project(project: ProjectSummary)</ID>
    <ID>MaxLineLength:BudgetCostCalculatorTest.kt$BudgetCostCalculatorTest$fun</ID>
    <ID>MaxLineLength:CallDTOMapper.kt$CallDTOMapper$fun</ID>
    <ID>MaxLineLength:CallEntityMapper.kt$CallEntityMapper$abstract fun map(applicationFormFieldConfigurationEntities: MutableSet&lt;ApplicationFormFieldConfigurationEntity&gt;): MutableSet&lt;ApplicationFormFieldConfiguration&gt;</ID>
    <ID>MaxLineLength:CommonModelMapper.kt$filter { (if (languageExtractor != null) languageExtractor(it) else it.language) != null }.toHashSet().map { InputTranslation((if (languageExtractor != null) languageExtractor(it) else it.language)!!, extractFunction.invoke(it)) }</ID>
    <ID>MaxLineLength:CreateOutputIndicator.kt$CreateOutputIndicator$resultIndicatorPersistence.getResultIndicator(outputIndicator.resultIndicatorId).programmeObjectivePolicy != outputIndicator.programmeObjectivePolicy</ID>
    <ID>MaxLineLength:CreateOutputIndicatorTest.kt$CreateOutputIndicatorTest$fun</ID>
    <ID>MaxLineLength:ExceptionWrapperAspectTest.kt$ExceptionWrapperAspectTest$fun</ID>
    <ID>MaxLineLength:GetBudgetTotalCostTest.kt$GetBudgetTotalCostTest$fun</ID>
    <ID>MaxLineLength:GetPartnerFundsPerPeriod.kt$GetPartnerFundsPerPeriod$val periodFundsWithoutLastPeriod = projectPeriods.filter{ period -&gt; period.number != lastPeriodNumber }.map { getTotalFundPerPeriodForPartners(it.number, fund, partnersBudgetPerPeriod, partnersCoFinancing) }.toMutableList()</ID>
    <ID>MaxLineLength:GetProjectPartner.kt$GetProjectPartner$return PageImpl(partnerBudgets.map { ProjectBudgetPartnerSummary(partnerSummary = ProjectPartnerSummary(it.partner.id, it.partner.abbreviation, it.partner.active, it.partner.role, it.partner.sortNumber, it.partner.country, it.partner.region), totalBudget = it.totalCosts) }, page, partnerBudgets.size.toLong())</ID>
    <ID>MaxLineLength:InModificationApplicationStateTest.kt$InModificationApplicationStateTest$every { projectPersistence.getProjectCallSettings(InModificationApplicationStateTest.PROJECT_ID) } returns InModificationApplicationStateTest.projectCallSettings</ID>
    <ID>MaxLineLength:MinioStorageTest.kt$MinioStorageTest$fun</ID>
    <ID>MaxLineLength:NotApprovedApplicationState.kt$NotApprovedApplicationState$ApplicationStatus.APPROVED_WITH_CONDITIONS</ID>
    <ID>MaxLineLength:OutputIndicatorControllerTest.kt$OutputIndicatorControllerTest$fun</ID>
    <ID>MaxLineLength:OutputIndicatorRepository.kt$OutputIndicatorRepository$fun findAllByProgrammePriorityPolicyEntityProgrammeObjectivePolicyOrderById(programmeObjectivePolicy: ProgrammeObjectivePolicy): Iterable&lt;OutputIndicatorEntity&gt;</ID>
    <ID>MaxLineLength:PartnerBudgetPerFundCalculator.kt$PartnerBudgetPerFundCalculator$if</ID>
    <ID>MaxLineLength:PartnerBudgetPerFundCalculatorTest.kt$PartnerBudgetPerFundCalculatorTest$ProjectPartnerContribution(id = 1L, name = "con1", status = ProjectPartnerContributionStatusDTO.Public, amount = BigDecimal(600), isPartner = true)</ID>
    <ID>MaxLineLength:PartnerBudgetPerFundCalculatorTest.kt$PartnerBudgetPerFundCalculatorTest$ProjectPartnerContribution(id = 2L, name = "con2", status = ProjectPartnerContributionStatusDTO.Public, amount = BigDecimal(3), isPartner = true)</ID>
    <ID>MaxLineLength:PartnerBudgetPerFundCalculatorTest.kt$PartnerBudgetPerFundCalculatorTest$ProjectPartnerContribution(id = 3L, name = "con3", status = ProjectPartnerContributionStatusDTO.Private, amount = BigDecimal(580), isPartner = true)</ID>
    <ID>MaxLineLength:PartnerPersistenceProvider.kt$PartnerPersistenceProvider$)</ID>
    <ID>MaxLineLength:PartnerPersistenceProviderTest.kt$PartnerPersistenceProviderTest$every { projectPartnerRepository.findTop30ByProjectId(PROJECT_ID, any()) } returns listOf(projectPartnerEntity(id = 3), projectPartnerEntity(id = 2, role = ProjectPartnerRole.PARTNER))</ID>
    <ID>MaxLineLength:ProgrammeAuditFactory.kt$.</ID>
    <ID>MaxLineLength:ProgrammeIndicatorsEntityMapper.kt$name.filter { !it.translation.isNullOrBlank() }.plus(measurementUnit.filter { !it.translation.isNullOrBlank() }).plus(sourceOfData.filter { !it.translation.isNullOrBlank() })</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$ProjectFileCategoryType.INVESTMENT -&gt; "FAILED upload of document $fileName to project application $projectId for Investment ${projectFileCategory.id} by $userId"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$ProjectFileCategoryType.INVESTMENT -&gt; "document ${projectFileMetaData.name} uploaded to project application ${projectFileMetaData.projectId} for Investment ${projectFileCategory.id} by ${projectFileMetaData.uploadedBy.id}"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$ProjectFileCategoryType.PARTNER -&gt; "FAILED upload of document $fileName to project application $projectId for Partner ${projectFileCategory.id} by $userId"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$ProjectFileCategoryType.PARTNER -&gt; "document ${projectFileMetaData.name} uploaded to project application ${projectFileMetaData.projectId} for Partner ${projectFileCategory.id} by ${projectFileMetaData.uploadedBy.id}"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$description = "description of document ${projectFileMetadata.name} in project application ${projectFileMetadata.projectId} has changed from `$oldValue` to `${projectFileMetadata.description}` by ${projectFileMetadata.uploadedBy.id}"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$description = "document ${projectFileMetadata.name} deleted from project application ${projectFileMetadata.projectId} by ${projectFileMetadata.uploadedBy.id}"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$description = "document ${projectFileMetadata.name} downloaded from project application ${projectFileMetadata.projectId} by ${projectFileMetadata.uploadedBy.id}"</ID>
    <ID>MaxLineLength:ProjectAuditFactory.kt$else -&gt; "document ${projectFileMetaData.name} uploaded to project application ${projectFileMetaData.projectId} by ${projectFileMetaData.uploadedBy.id}"</ID>
    <ID>MaxLineLength:ProjectAuthorization.kt$CanRetrieveProject$@PreAuthorize("@projectAuthorization.hasPermission('ProjectRetrieve') || @projectAuthorization.hasPermission('ProjectFormRetrieve', #projectId) || @projectAuthorization.isUserViewCollaboratorForProjectOrThrow(#projectId)")</ID>
    <ID>MaxLineLength:ProjectAuthorization.kt$CanRetrieveProjectForm$@PreAuthorize("@projectAuthorization.hasPermission('ProjectFormRetrieve', #projectId) || @projectAuthorization.isUserViewCollaboratorForProjectOrThrow(#projectId)")</ID>
    <ID>MaxLineLength:ProjectAuthorization.kt$CanRetrieveProjectVersion$@PreAuthorize("@projectAuthorization.hasPermission('ProjectRetrieve') || @projectAuthorization.hasPermission('ProjectFormRetrieve', #projectId) || @projectAuthorization.isUserViewCollaboratorForProjectOrThrow(#projectId)")</ID>
    <ID>MaxLineLength:ProjectAuthorizationTest.kt$ProjectAuthorizationTest$val user = LocalCurrentUser(userApplicant.copy(assignedProjects = setOf(PROJECT_ID)), "hash_pass", applicantUser.authorities union setOf(SimpleGrantedAuthority(ProjectFormUpdate.name)))</ID>
    <ID>MaxLineLength:ProjectDataProviderImplTest.kt$ProjectDataProviderImplTest$partner = ProjectPartnerSummary(projectPartner.id, projectPartner.abbreviation, projectPartner.active, projectPartner.role, projectPartner.sortNumber, projectPartner.addresses.first{it.type == ProjectPartnerAddressType.Organization}.country, projectPartner.addresses.first{it.type == ProjectPartnerAddressType.Organization}.nutsRegion2)</ID>
    <ID>MaxLineLength:ProjectDataProviderImplTest.kt$ProjectDataProviderImplTest$partner = ProjectPartnerSummaryData(projectPartner.id, projectPartner.active, projectPartner.abbreviation,ProjectPartnerRoleData.valueOf(projectPartner.role.name), projectPartner.sortNumber, projectPartner.addresses.first { it.type == ProjectPartnerAddressType.Organization }.country, projectPartner.addresses.first { it.type == ProjectPartnerAddressType.Organization }.nutsRegion2)</ID>
    <ID>MaxLineLength:ProjectDataProviderImplTest.kt$ProjectDataProviderImplTest$val budgetCostsCalculationResult = BudgetCostsCalculationResult(staffCosts = BigDecimal.TEN, totalCosts = BigDecimal.TEN, travelCosts = BigDecimal.ZERO, officeAndAdministrationCosts = BigDecimal.ZERO, otherCosts = BigDecimal.ZERO)</ID>
    <ID>MaxLineLength:ProjectDescriptionControllerTest.kt$ProjectDescriptionControllerTest$every { updateProjectDescriptionInteractor.updateOverallObjective(1L, projectDescription.projectOverallObjective!!) } returns projectDescription.projectOverallObjective!!</ID>
    <ID>MaxLineLength:ProjectDescriptionControllerTest.kt$ProjectDescriptionControllerTest$every { updateProjectDescriptionInteractor.updatePartnership(1L, projectDescription.projectPartnership!!) } returns projectDescription.projectPartnership!!</ID>
    <ID>MaxLineLength:ProjectDescriptionControllerTest.kt$ProjectDescriptionControllerTest$every { updateProjectDescriptionInteractor.updateProjectLongTermPlans(1L, projectDescription.projectLongTermPlans!!) } returns projectDescription.projectLongTermPlans!!</ID>
    <ID>MaxLineLength:ProjectDescriptionControllerTest.kt$ProjectDescriptionControllerTest$every { updateProjectDescriptionInteractor.updateProjectManagement(1L, projectDescription.projectManagement!!) } returns projectDescription.projectManagement!!</ID>
    <ID>MaxLineLength:ProjectDescriptionControllerTest.kt$ProjectDescriptionControllerTest$every { updateProjectDescriptionInteractor.updateProjectRelevance(1L, projectDescription.projectRelevance!!) } returns projectDescription.projectRelevance!!</ID>
    <ID>MaxLineLength:ProjectDescriptionMapper.kt$fun</ID>
    <ID>MaxLineLength:ProjectDescriptionPersistenceTest.kt$ProjectDescriptionPersistenceTest$persistence = ProjectDescriptionPersistenceProvider(projectVersionUtils, projectOverallObjectiveRepository, projectRelevanceRepository, projectPartnershipRepository, projectManagementRepository, projectLongTermPlansRepository)</ID>
    <ID>MaxLineLength:ProjectLumpSumPersistenceTest.kt$ProjectLumpSumPersistenceTest$persistence = ProjectLumpSumPersistenceProvider(projectVersionUtils, projectRepository, projectLumpSumRepository, programmeLumpSumRepository, projectPartnerRepository)</ID>
    <ID>MaxLineLength:ProjectLumpSumRepository.kt$ProjectLumpSumRepository$ LEFT JOIN project_partner_lump_sum FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS partnerLumpSum ON partnerLumpSum.project_id = entity.project_id AND partnerLumpSum.order_nr = entity.order_nr</ID>
    <ID>MaxLineLength:ProjectPartnerAuthorization.kt$CanRetrieveProjectPartnerSummaries$@PreAuthorize("@projectAuthorization.hasPermission('ProjectFormRetrieve', #projectId) || @projectAuthorization.hasPermission('ProjectFileApplicationRetrieve', #projectId) || @projectAuthorization.isUserViewCollaboratorForProjectOrThrow(#projectId)")</ID>
    <ID>MaxLineLength:ProjectPartnerBaseBudgetRepository.kt$ProjectPartnerBaseBudgetRepository$@Query("SELECT new io.cloudflight.jems.server.project.entity.partner.budget.ProjectPartnerBudgetView(e.baseProperties.partnerId, SUM(e.baseProperties.rowSum)) FROM #{#entityName} e WHERE e.baseProperties.partnerId IN :ids GROUP BY e.baseProperties.partnerId")</ID>
    <ID>MaxLineLength:ProjectPartnerBudgetCostsPersistenceProviderTestBase.kt$ProjectPartnerBudgetCostsPersistenceProviderTestBase$protected</ID>
    <ID>MaxLineLength:ProjectPartnerLumpSumRepository.kt$ProjectPartnerLumpSumRepository$@Query("SELECT new io.cloudflight.jems.server.project.entity.lumpsum.ProjectLumpSumPerPartnerSumEntity(e.id.projectPartner, SUM(e.amount)) FROM #{#entityName} e WHERE e.id.projectPartner.id IN :ids GROUP BY e.id.projectPartner")</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN #{#entityName}_motivation_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS motivationTransl ON entity.id = motivationTransl.partner_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN #{#entityName}_motivation_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS motivationTranslation ON entity.id = motivationTranslation.partner_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN project_partner_budget_equipment FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS equipmentCosts ON equipmentCosts.id = equipmentCostsPeriod.budget_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN project_partner_budget_external FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS externalCosts ON externalCosts.id = externalCostsPeriod.budget_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN project_partner_budget_infrastructure FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS infrastructureCosts ON infrastructureCosts.id = infrastructureCostsPeriod.budget_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN project_partner_budget_staff_cost FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS staffCosts ON staffCosts.id = staffCostsPeriod.budget_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN project_partner_budget_travel FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS travelCosts ON travelCosts.id = travelCostsPeriod.budget_id</ID>
    <ID>MaxLineLength:ProjectPartnerRepository.kt$ProjectPartnerRepository$ LEFT JOIN project_partner_budget_unit_cost FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS unitCosts ON unitCosts.id = unitCostsPeriod.budget_id</ID>
    <ID>MaxLineLength:ProjectPersistenceTest.kt$ProjectPersistenceTest$UserSummary(mockRow.userId, mockRow.email, mockRow.name, mockRow.surname, UserRoleSummary(mockRow.roleId, mockRow.roleName), mockRow.userStatus)</ID>
    <ID>MaxLineLength:ProjectRepository.kt$ProjectRepository$ LEFT JOIN programme_priority_specific_objective AS programmePrioObj ON entity.programme_priority_policy_objective_policy = programmePrioObj.programme_objective_policy_code</ID>
    <ID>MaxLineLength:ProjectResultModelMapper.kt$programmeResultMeasurementUnit = groupedRows.value.extractField({ it.programmeResultIndicatorLanguage }) { it.programmeResultIndicatorMeasurementUnit }</ID>
    <ID>MaxLineLength:ProjectResultRepository.kt$ProjectResultRepository$ LEFT JOIN #{#entityName}_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS projectResultTransl ON entity.project_id = projectResultTransl.project_id AND entity.result_number = projectResultTransl.result_number</ID>
    <ID>MaxLineLength:ProjectResultRepository.kt$ProjectResultRepository$ LEFT JOIN programme_indicator_result_transl AS programmeResultIndicatorIdentifierTransl ON programmeResultIndicatorIdentifier.id = programmeResultIndicatorIdentifierTransl.source_entity_id</ID>
    <ID>MaxLineLength:ProjectStatusAuthorizationTest.kt$ProjectStatusAuthorizationTest$val user = LocalCurrentUser(userApplicant.copy(assignedProjects = setOf(PROJECT_ID)), "hash_pass", applicantUser.authorities union setOf(SimpleGrantedAuthority(ProjectCheckApplicationForm.name)))</ID>
    <ID>MaxLineLength:ProjectWorkPackageAuthorization.kt$CanRetrieveProjectWorkPackageInvestmentSummaries$@PreAuthorize("@projectAuthorization.hasPermission('ProjectFormRetrieve', #projectId) || @projectAuthorization.hasPermission('ProjectFileApplicationRetrieve', #projectId) || @projectAuthorization.isUserViewCollaboratorForProjectOrThrow(#projectId)")</ID>
    <ID>MaxLineLength:ProjectWorkPackageAuthorizationTest.kt$ProjectWorkPackageAuthorizationTest$val user = LocalCurrentUser(userApplicant.copy(assignedProjects = setOf(12L)), "hash_pass", applicantUser.authorities union setOf(SimpleGrantedAuthority(ProjectFormRetrieve.name)))</ID>
    <ID>MaxLineLength:ProjectWorkPackageAuthorizationTest.kt$ProjectWorkPackageAuthorizationTest$val user = LocalCurrentUser(userApplicant.copy(assignedProjects = setOf(PROJECT_ID)), "hash_pass", applicantUser.authorities union setOf(SimpleGrantedAuthority(ProjectFormUpdate.name)))</ID>
    <ID>MaxLineLength:ProjectWorkflowPersistenceProvider.kt$ProjectWorkflowPersistenceProvider$if</ID>
    <ID>MaxLineLength:ProjectWorkflowPersistenceTest.kt$ProjectWorkflowPersistenceTest$val userSummary = UserSummary(ProjectPartnerTestUtil.user.id, ProjectPartnerTestUtil.user.email, ProjectPartnerTestUtil.user.name, ProjectPartnerTestUtil.user.surname, UserRoleSummary(1L, "ADMIN"), UserStatus.ACTIVE)</ID>
    <ID>MaxLineLength:RefuseApplicationInteractorTest.kt$RefuseApplicationInteractorTest$assessmentStep2 = ProjectAssessment(assessmentQuality = ProjectAssessmentQuality(PROJECT_ID, 2, ProjectAssessmentQualityResult.RECOMMENDED_FOR_FUNDING))</ID>
    <ID>MaxLineLength:RestoreProjectUtils.kt$RestoreProjectUtils$"INSERT INTO ${path.first().childTable} SELECT * FROM ${path.first().childTable} FOR SYSTEM_TIME AS OF '$timestamp' WHERE ${path.first().childColumn} = :$projectIdParam"</ID>
    <ID>MaxLineLength:RestoreProjectUtils.kt$RestoreProjectUtils$"INSERT INTO ${path.first().childTable} SELECT * FROM ${path.first().childTable} FOR SYSTEM_TIME AS OF '$timestamp' WHERE (${path.first().childColumn}) IN ( "</ID>
    <ID>MaxLineLength:ResultIndicatorControllerTest.kt$ResultIndicatorControllerTest$fun</ID>
    <ID>MaxLineLength:ResultIndicatorRepository.kt$ResultIndicatorRepository$fun findAllByProgrammePriorityPolicyEntityProgrammeObjectivePolicyOrderById(programmeObjectivePolicy: ProgrammeObjectivePolicy): Iterable&lt;ResultIndicatorEntity&gt;</ID>
    <ID>MaxLineLength:SetAssessmentEligibilityInteractorTest.kt$SetAssessmentEligibilityInteractorTest$@EnumSource(value = ApplicationStatus::class, names = ["DRAFT", "RETURNED_TO_APPLICANT", "ELIGIBLE", "INELIGIBLE", "APPROVED", "APPROVED_WITH_CONDITIONS", "NOT_APPROVED"])</ID>
    <ID>MaxLineLength:SetAssessmentEligibilityInteractorTest.kt$SetAssessmentEligibilityInteractorTest$@EnumSource(value = ApplicationStatus::class, names = ["STEP1_DRAFT", "STEP1_ELIGIBLE", "STEP1_INELIGIBLE", "STEP1_APPROVED", "STEP1_APPROVED_WITH_CONDITIONS", "STEP1_NOT_APPROVED"])</ID>
    <ID>MaxLineLength:SetAssessmentQualityInteractorTest.kt$SetAssessmentQualityInteractorTest$@EnumSource(value = ApplicationStatus::class, names = ["DRAFT", "RETURNED_TO_APPLICANT", "INELIGIBLE", "APPROVED", "APPROVED_WITH_CONDITIONS", "NOT_APPROVED"])</ID>
    <ID>MaxLineLength:SetAssessmentQualityInteractorTest.kt$SetAssessmentQualityInteractorTest$@EnumSource(value = ApplicationStatus::class, names = ["STEP1_DRAFT", "STEP1_INELIGIBLE", "STEP1_APPROVED", "STEP1_APPROVED_WITH_CONDITIONS", "STEP1_NOT_APPROVED"])</ID>
    <ID>MaxLineLength:SetProjectFileDescriptionTest.kt$SetProjectFileDescriptionTest$"description of document $FILE_NAME in project application $PROJECT_ID has changed from `${fileMetadata.description}` to `$newDescription` by $USER_ID"</ID>
    <ID>MaxLineLength:TranslationFilePersistenceProvider.kt$TranslationFilePersistenceProvider$minioStorage.moveFile(TRANSLATION_FILE_BUCKET_NAME, fileType.getFileNameFor(language), TRANSLATION_FILE_ARCHIVE_BUCKET_NAME, fileType.getFileNameFor(language).plus("_").plus(Timestamp.from(ZonedDateTime.now().toInstant())))</ID>
    <ID>MaxLineLength:TranslationFilePersistenceProviderTest.kt$TranslationFilePersistenceProviderTest$assertThat(translationFilePersistenceProvider.listTranslationFiles()).containsAll(listOf(fileMetaData.copy(lastModified = fileMetaDataEntity.lastModified)))</ID>
    <ID>MaxLineLength:UpdateApplicationFormFieldConfigurationsTest.kt$UpdateApplicationFormFieldConfigurationsTest$fun</ID>
    <ID>MaxLineLength:UpdateBaseBudgetPropertiesOptionsTest.kt$UpdateBaseBudgetPropertiesOptionsTest$fun</ID>
    <ID>MaxLineLength:UpdateBudgetOptionsValidation.kt$options.officeAndAdministrationOnStaffCostsFlatRate != null || options.officeAndAdministrationOnDirectCostsFlatRate != null || options.travelAndAccommodationOnStaffCostsFlatRate != null || options.staffCostsFlatRate != null</ID>
    <ID>MaxLineLength:UpdateBudgetTravelAndAccommodationCostsInteractor.kt$UpdateBudgetTravelAndAccommodationCostsInteractor$fun updateBudgetTravelAndAccommodationCosts(partnerId: Long, travelCosts: List&lt;BudgetTravelAndAccommodationCostEntry&gt;): List&lt;BudgetTravelAndAccommodationCostEntry&gt;</ID>
    <ID>MaxLineLength:UpdateCallLumpSumsTest.kt$UpdateCallLumpSumsTest$every { persistence.updateProjectCallLumpSum(ID, setOf(2, 3)) } returns call.copy(lumpSums = listOf(ProgrammeLumpSum(id = 2, splittingAllowed = true), ProgrammeLumpSum(id = 3, splittingAllowed = true)))</ID>
    <ID>MaxLineLength:UpdateOutputIndicatorTest.kt$UpdateOutputIndicatorTest$fun</ID>
    <ID>MaxLineLength:UploadProjectFile.kt$UploadProjectFile$if</ID>
    <ID>MaxLineLength:UploadTranslationFileTest.kt$UploadTranslationFileTest$fun</ID>
    <ID>MaxLineLength:UserAuthorization.kt$UserAuthorization$(hasPermission(ProjectCreatorCollaboratorsRetrieve) &amp;&amp; isActiveUserIdEqualToOneOf(projectPersistence.getApplicantAndStatusById(projectId).getUserIdsWithViewLevel()))</ID>
    <ID>MaxLineLength:UserAuthorization.kt$UserAuthorization$(hasPermission(ProjectCreatorCollaboratorsUpdate) &amp;&amp; isActiveUserIdEqualToOneOf(projectPersistence.getApplicantAndStatusById(projectId).getUserIdsWithManageLevel()))</ID>
    <ID>MaxLineLength:WorkPackageInvestmentRepository.kt$WorkPackageInvestmentRepository$ LEFT JOIN #{#entityName}_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS workPackageInvestmentTransl ON entity.id = workPackageInvestmentTransl.investment_id</ID>
    <ID>MaxLineLength:WorkPackageMapper.kt$documentationExpectedImpacts = groupedInvestmentRow.value.extractField ({it.investmentLanguage}) { it.investmentDocumentationExpectedImpacts}</ID>
    <ID>MaxLineLength:WorkPackageMapper.kt$justificationTransactionalRelevance = groupedInvestmentRow.value.extractField ({it.investmentLanguage}) { it.justificationTransactionalRelevance}</ID>
    <ID>MaxLineLength:WorkPackageMapper.kt$programmeOutputIndicatorMeasurementUnit = groupedRows.value.extractField({ it.programmeOutputIndicatorLanguage }) { it.programmeOutputIndicatorMeasurementUnit }</ID>
    <ID>MaxLineLength:WorkPackageOutputModelMapper.kt$programmeOutputIndicatorMeasurementUnit = it.programmeOutputIndicatorEntity?.translatedValues?.extractIndicatorField { it.measurementUnit } ?: emptySet()</ID>
    <ID>MaxLineLength:WorkPackageOutputRepository.kt$WorkPackageOutputRepository$ LEFT JOIN #{#entityName}_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS workPackageOutputTransl ON entity.work_package_id = workPackageOutputTransl.work_package_id AND entity.output_number = workPackageOutputTransl.output_number</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN #{#entityName}_activity_deliverable_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS deliverableTransl ON deliverable.id = deliverableTransl.source_entity_id</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN #{#entityName}_activity_partner FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS activityPartner ON activity.id = activityPartner.activity_id</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN #{#entityName}_activity_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS activityTransl ON activity.id = activityTransl.source_entity_id</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN #{#entityName}_investment_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS investmentTransl ON investment.id = investmentTransl.investment_id</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN #{#entityName}_output_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS outputTransl ON output.work_package_id = outputTransl.work_package_id AND output.output_number = outputTransl.output_number</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN #{#entityName}_output_transl FOR SYSTEM_TIME AS OF TIMESTAMP :timestamp AS workPackageOutputTransl ON entity.work_package_id = workPackageOutputTransl.work_package_id AND entity.output_number = workPackageOutputTransl.output_number</ID>
    <ID>MaxLineLength:WorkPackageRepository.kt$WorkPackageRepository$ LEFT JOIN programme_indicator_output_transl AS programmeOutputIndicatorIdentifierTransl ON programmeOutputIndicatorIdentifier.id = programmeOutputIndicatorIdentifierTransl.source_entity_id</ID>
    <ID>MayBeConst:ProgrammeFundPersistenceTest.kt$ProgrammeFundPersistenceTest.Companion$private val ID = 1L</ID>
    <ID>MayBeConst:ProgrammeLegalStatusPersistenceTest.kt$ProgrammeLegalStatusPersistenceTest.Companion$private val ID = 1L</ID>
    <ID>MayBeConst:ProgrammePriorityPersistenceTest.kt$ProgrammePriorityPersistenceTest.Companion$private val ID = 1L</ID>
    <ID>MayBeConst:UpdatePriorityInteractorTest.kt$UpdatePriorityInteractorTest.Companion$private val ID = 3L</ID>
    <ID>MemberNameEqualsClassName:SubmitApplication.kt$SubmitApplication$private fun submitApplication(projectSummary: ProjectSummary): ApplicationStatus</ID>
    <ID>NestedBlockDepth:ExecutePreConditionCheck.kt$ExecutePreConditionCheck$@ExceptionWrapper(ExecutePreConditionCheckException::class) @Transactional(readOnly = true) @CanCheckApplicationForm override fun execute(projectId: Long): PreConditionCheckResult</ID>
    <ID>PackageNaming:CreateProjectPartnerReport.kt$package io.cloudflight.jems.server.project.service.report.partner.createProjectPartnerReport</ID>
    <ID>PackageNaming:CreateProjectPartnerReportException.kt$package io.cloudflight.jems.server.project.service.report.partner.createProjectPartnerReport</ID>
    <ID>PackageNaming:CreateProjectPartnerReportInteractor.kt$package io.cloudflight.jems.server.project.service.report.partner.createProjectPartnerReport</ID>
    <ID>PackageNaming:DownloadProgrammeDataExportFile.kt$package io.cloudflight.jems.server.programme.service.downloadProgrammeDataExportFile</ID>
    <ID>PackageNaming:DownloadProgrammeDataExportFileExceptions.kt$package io.cloudflight.jems.server.programme.service.downloadProgrammeDataExportFile</ID>
    <ID>PackageNaming:DownloadProgrammeDataExportFileInteractor.kt$package io.cloudflight.jems.server.programme.service.downloadProgrammeDataExportFile</ID>
    <ID>PackageNaming:ExportProgrammeData.kt$package io.cloudflight.jems.server.programme.service.exportProgrammeData</ID>
    <ID>PackageNaming:ExportProgrammeDataExceptions.kt$package io.cloudflight.jems.server.programme.service.exportProgrammeData</ID>
    <ID>PackageNaming:ExportProgrammeDataInteractor.kt$package io.cloudflight.jems.server.programme.service.exportProgrammeData</ID>
    <ID>PackageNaming:ExportProgrammeDataService.kt$package io.cloudflight.jems.server.programme.service.exportProgrammeData</ID>
    <ID>PackageNaming:GetMyPartnerCollaboratorLevel.kt$package io.cloudflight.jems.server.project.service.partnerUser.getMyPartnerCollaboratorLevel</ID>
    <ID>PackageNaming:GetMyPartnerCollaboratorLevelException.kt$package io.cloudflight.jems.server.project.service.partnerUser.getMyPartnerCollaboratorLevel</ID>
    <ID>PackageNaming:GetMyPartnerCollaboratorLevelInteractor.kt$package io.cloudflight.jems.server.project.service.partnerUser.getMyPartnerCollaboratorLevel</ID>
    <ID>PackageNaming:GetProjectPartnerReport.kt$package io.cloudflight.jems.server.project.service.report.partner.getProjectPartnerReport</ID>
    <ID>PackageNaming:GetProjectPartnerReportException.kt$package io.cloudflight.jems.server.project.service.report.partner.getProjectPartnerReport</ID>
    <ID>PackageNaming:GetProjectPartnerReportInteractor.kt$package io.cloudflight.jems.server.project.service.report.partner.getProjectPartnerReport</ID>
    <ID>PackageNaming:GetProjectReportPartnerList.kt$package io.cloudflight.jems.server.project.service.report.getProjectReportPartnerList</ID>
    <ID>PackageNaming:GetProjectReportPartnerListException.kt$package io.cloudflight.jems.server.project.service.report.getProjectReportPartnerList</ID>
    <ID>PackageNaming:GetProjectReportPartnerListInteractor.kt$package io.cloudflight.jems.server.project.service.report.getProjectReportPartnerList</ID>
    <ID>PackageNaming:ListProgrammeDataExports.kt$package io.cloudflight.jems.server.programme.service.listProgrammeDataExports</ID>
    <ID>PackageNaming:ListProgrammeDataExportsExceptions.kt$package io.cloudflight.jems.server.programme.service.listProgrammeDataExports</ID>
    <ID>PackageNaming:ListProgrammeDataExportsInteractor.kt$package io.cloudflight.jems.server.programme.service.listProgrammeDataExports</ID>
    <ID>PackageNaming:SubmitProjectPartnerReport.kt$package io.cloudflight.jems.server.project.service.report.partner.submitProjectPartnerReport</ID>
    <ID>PackageNaming:SubmitProjectPartnerReportException.kt$package io.cloudflight.jems.server.project.service.report.partner.submitProjectPartnerReport</ID>
    <ID>PackageNaming:SubmitProjectPartnerReportInteractor.kt$package io.cloudflight.jems.server.project.service.report.partner.submitProjectPartnerReport</ID>
    <ID>PackageNaming:UpdateBudgetSpfCosts.kt$package io.cloudflight.jems.server.project.service.partner.budget.updateBudgetSpfCosts</ID>
    <ID>PackageNaming:UpdateBudgetSpfCostsInteractor.kt$package io.cloudflight.jems.server.project.service.partner.budget.updateBudgetSpfCosts</ID>
    <ID>ProtectedMemberInFinalClass:Authorization.kt$Authorization$protected fun isActiveUserIdEqualToOneOf(userIds: Set&lt;Long&gt;): Boolean</ID>
    <ID>ReturnCount:GetPartnerFundsPerPeriod.kt$GetPartnerFundsPerPeriod$private fun getTotalFundPerPeriodForPartner( partnerBudgetPerPeriod: ProjectPeriodBudget?, partnerCoFinancing: List&lt;ProjectPartnerCoFinancing&gt;?, fund: ProgrammeFund ) : BigDecimal</ID>
    <ID>ReturnCount:PartnerBudgetPerFundCalculator.kt$PartnerBudgetPerFundCalculator$private fun getPartnerContribution( partnerContributions: Collection&lt;ProjectPartnerContribution&gt;?, status: ProjectPartnerContributionStatusDTO? ): BigDecimal</ID>
    <ID>ReturnCount:ProjectDescriptionMapper.kt$fun getMappedStrategy(strategy: ProgrammeStrategy?): ProgrammeStrategy?</ID>
    <ID>ReturnCount:UserRoleAuditFactory.kt$private fun getAuditPermissionState(node: UserRolePermissionNode, permissions: Set&lt;UserRolePermission&gt;): String</ID>
    <ID>SerialVersionUIDInSerializableClass:AllowRealCostsEntity.kt$AllowedRealCostsEntity : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ApplicationFormFieldConfigurationId.kt$ApplicationFormFieldConfigurationId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:BudgetPeriodId.kt$BudgetPeriodId&lt;T : ProjectPartnerBudgetBase&gt; : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:FlatRateSetupId.kt$FlatRateSetupId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:FundSetupId.kt$FundSetupId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProgrammeFundTranslationId.kt$ProgrammeFundTranslationId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProgrammeLumpSumTranslId.kt$ProgrammeLumpSumTranslId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProgrammePriorityTranslId.kt$ProgrammePriorityTranslId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProgrammeUnitCostTranslId.kt$ProgrammeUnitCostTranslId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectAssessmentId.kt$ProjectAssessmentId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectAssociatedOrganizationContactId.kt$ProjectAssociatedOrganizationContactId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectFileCategoryId.kt$ProjectFileCategoryId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectLumpSumId.kt$ProjectLumpSumId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectPartnerAddressId.kt$ProjectPartnerAddressId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectPartnerCoFinancingFundId.kt$ProjectPartnerCoFinancingFundId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectPartnerContactId.kt$ProjectPartnerContactId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectPartnerLumpSumId.kt$ProjectPartnerLumpSumId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectPartnerStateAidActivityId.kt$ProjectPartnerStateAidActivityId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectPeriodId.kt$ProjectPeriodId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectResultId.kt$ProjectResultId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProjectVersionId.kt$ProjectVersionId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:StateAidSetupId.kt$StateAidSetupId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationFileId.kt$TranslationFileId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationId.kt$TranslationId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationId.kt$TranslationId&lt;T&gt; : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationOrganizationId.kt$TranslationOrganizationId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationPartnerId.kt$TranslationPartnerId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationResultId.kt$TranslationResultId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TranslationUuId.kt$TranslationUuId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:UserPartnerId.kt$UserPartnerId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:UserProjectId.kt$UserProjectId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:UserRolePermissionId.kt$UserRolePermissionId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WorkPackageActivityId.kt$WorkPackageActivityId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WorkPackageActivityPartnerId.kt$WorkPackageActivityPartnerId : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WorkPackageInvestmentTranslation.kt$WorkPackageInvestmentTranslation&lt;T&gt; : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WorkPackageOutputId.kt$WorkPackageOutputId : Serializable</ID>
    <ID>ThrowsCount:BudgetCostValidator.kt$BudgetCostValidator$final fun validateBaseEntries(budgetEntries: List&lt;BaseBudgetEntry&gt;)</ID>
    <ID>ThrowsCount:CreateOutputIndicator.kt$CreateOutputIndicator$private fun validateOutputIndicatorDetail(outputIndicator: OutputIndicator)</ID>
    <ID>ThrowsCount:CreateUser.kt$CreateUser$private fun validateUser(user: UserChange)</ID>
    <ID>ThrowsCount:WorkPackageActivityValidation.kt$fun validateWorkPackageActivities(workPackageActivities: Collection&lt;WorkPackageActivity&gt;)</ID>
    <ID>TooGenericExceptionThrown:MockedMethodSignature.kt$MockedMethodSignature$throw Exception("sample exception!")</ID>
    <ID>TooManyFunctions:ApplicationState.kt$ApplicationState</ID>
    <ID>TooManyFunctions:CallPersistence.kt$CallPersistence</ID>
    <ID>TooManyFunctions:CallPersistenceProvider.kt$CallPersistenceProvider : CallPersistence</ID>
    <ID>TooManyFunctions:GeneralValidatorDefaultImpl.kt$GeneralValidatorDefaultImpl : GeneralValidatorService</ID>
    <ID>TooManyFunctions:GeneralValidatorService.kt$GeneralValidatorService</ID>
    <ID>TooManyFunctions:PartnerPersistenceProvider.kt$PartnerPersistenceProvider : PartnerPersistence</ID>
    <ID>TooManyFunctions:ProjectDataModelMapper.kt$PluginDataMapper</ID>
    <ID>TooManyFunctions:ProjectDataModelMapper.kt$io.cloudflight.jems.server.plugin.services.ProjectDataModelMapper.kt</ID>
    <ID>TooManyFunctions:ProjectDescriptionMapper.kt$io.cloudflight.jems.server.project.controller.ProjectDescriptionMapper.kt</ID>
    <ID>TooManyFunctions:ProjectDescriptionMapper.kt$io.cloudflight.jems.server.project.service.ProjectDescriptionMapper.kt</ID>
    <ID>TooManyFunctions:ProjectMapper.kt$ProjectMapper</ID>
    <ID>TooManyFunctions:ProjectPartnerBudgetMapper.kt$io.cloudflight.jems.server.project.controller.partner.budget.ProjectPartnerBudgetMapper.kt</ID>
    <ID>TooManyFunctions:ProjectPartnerEntityMapper.kt$io.cloudflight.jems.server.project.repository.partner.ProjectPartnerEntityMapper.kt</ID>
    <ID>TooManyFunctions:ProjectPartnerRepository.kt$ProjectPartnerRepository : JpaRepository</ID>
    <ID>TooManyFunctions:WorkPackagePersistenceProvider.kt$WorkPackagePersistenceProvider : WorkPackagePersistence</ID>
    <ID>UnnecessaryAbstractClass:ApplicationState.kt$ApplicationState</ID>
    <ID>UnnecessaryAbstractClass:CommonDTOMapper.kt$CommonDTOMapper</ID>
    <ID>UnnecessaryAbstractClass:MailNotificationMapper.kt$MailNotificationMapper</ID>
    <ID>UnnecessaryAbstractClass:ProgrammeDataModelMapper.kt$ProgrammeDataModelMapper</ID>
    <ID>UnnecessaryAbstractClass:ProgrammeEntityModelMapper.kt$ProgrammeEntityModelMapper</ID>
    <ID>UnnecessaryAbstractClass:ProjectPartnerCoFinancingMapper.kt$ProjectPartnerCoFinancingMapper</ID>
    <ID>UnnecessaryAbstractClass:TranslationDTOMapper.kt$TranslationDTOMapper</ID>
    <ID>UnnecessaryAbstractClass:TranslationEntityMapper.kt$TranslationEntityMapper</ID>
    <ID>UnnecessaryAbstractClass:UnitTest.kt$UnitTest</ID>
    <ID>UnnecessaryAbstractClass:UserConfirmationMapper.kt$UserConfirmationMapper</ID>
    <ID>UnusedPrivateMember:ApplicationStateFactoryTest.kt$ApplicationStateFactoryTest$private fun provideSummaryWithExpectedInstance(): Stream&lt;Arguments&gt;</ID>
    <ID>UnusedPrivateMember:AssignUserEventListeners.kt$AssignUserEventListeners$private val appProperties: AppProperties</ID>
    <ID>UnusedPrivateMember:CallPersistenceProviderTest.kt$CallPersistenceProviderTest$@MockK private lateinit var programmeStateAidRepo: ProgrammeStateAidRepository</ID>
    <ID>UnusedPrivateMember:CreateProjectTest.kt$CreateProjectTest.Companion$private fun projectVersion(status: ApplicationStatus): ProjectVersion</ID>
    <ID>UnusedPrivateMember:MinioStorageTest.kt$MinioStorageTest$errorCode: ErrorResponse</ID>
    <ID>UnusedPrivateMember:MinioStorageTest.kt$MinioStorageTest$private fun testSave(bucketExists: Boolean, errorCode: ErrorResponse)</ID>
    <ID>UnusedPrivateMember:ProgrammeSetupAuthorizationTest.kt$ProgrammeSetupAuthorizationTest$private fun provideAllUsers(): Stream&lt;Arguments&gt;</ID>
    <ID>UnusedPrivateMember:ProjectBudgetControllerTest.kt$ProjectBudgetControllerTest$@MockK private lateinit var getPartnerBudgetPerFundInteractor: GetPartnerBudgetPerFundInteractor</ID>
    <ID>UnusedPrivateMember:ProjectPartnerCoFinancingPersistenceProviderTest.kt$ProjectPartnerCoFinancingPersistenceProviderTest$private val previousFinances = setOf( ProjectPartnerCoFinancingEntity( coFinancingFundId = ProjectPartnerCoFinancingFundId(1, 1), percentage = BigDecimal.valueOf(15.5), programmeFund = null ), ProjectPartnerCoFinancingEntity( coFinancingFundId = ProjectPartnerCoFinancingFundId(1, 2), percentage = BigDecimal.valueOf(25.5), programmeFund = null ) )</ID>
    <ID>UnusedPrivateMember:ProjectPartnerFactory.kt$ProjectPartnerFactory$author: UserEntity</ID>
    <ID>UnusedPrivateMember:ProjectWorkPackageAuthorization.kt$ProjectWorkPackageAuthorization$version: String? = null</ID>
    <ID>UnusedPrivateMember:ProjectWorkPackageAuthorizationTest.kt$ProjectWorkPackageAuthorizationTest.Companion$private const val INVESTMENT_ID = 7L</ID>
    <ID>UnusedPrivateMember:ReturnApplicationToApplicantInteractorTest.kt$ReturnApplicationToApplicantInteractorTest$@InjectMockKs private lateinit var handBackToApplicant: HandBackToApplicant</ID>
    <ID>UnusedPrivateMember:ReturnApplicationToApplicantInteractorTest.kt$ReturnApplicationToApplicantInteractorTest.Companion$private val projectVersion = ProjectVersion( version = "1.0", projectId = PROJECT_ID, createdAt = ZonedDateTime.now(), user = UserEntity(1L, "some@applicant", "name", "surname", UserRoleEntity(1L, "applicant"), "", UserStatus.ACTIVE), status = ApplicationStatus.DRAFT, current = true )</ID>
    <ID>UnusedPrivateMember:SaveProjectVersionTest.kt$SaveProjectVersionTest$private val newProjectVersion = ProjectVersion( "2.0", projectId, createdAt = ZonedDateTime.now(), user, ApplicationStatus.SUBMITTED, current = true )</ID>
    <ID>UnusedPrivateMember:UpdateCallTest.kt$UpdateCallTest$private fun provideNotAllowedChangesToPublishedCall(): Stream&lt;Arguments&gt;</ID>
    <ID>UnusedPrivateMember:UpdateFundsTest.kt$UpdateFundsTest$private fun providePreDefinedProgramFundTypes()</ID>
    <ID>UnusedPrivateMember:UpdateLegalStatusInteractorTest.kt$UpdateLegalStatusInteractorTest$private fun providePreDefinedLegalStatusTypes()</ID>
    <ID>UtilityClassWithPublicConstructor:AuthorizationUtil.kt$AuthorizationUtil</ID>
    <ID>UtilityClassWithPublicConstructor:CoFinancingOverviewCalculator.kt$CoFinancingOverviewCalculator</ID>
    <ID>UtilityClassWithPublicConstructor:ProjectPartnerTestUtil.kt$ProjectPartnerTestUtil</ID>
    <ID>UtilityClassWithPublicConstructor:ProjectStatusTestUtil.kt$ProjectStatusTestUtil</ID>
    <ID>UtilityClassWithPublicConstructor:ResultOverviewCalculator.kt$ResultOverviewCalculator</ID>
  </CurrentIssues>
</SmellBaseline>
